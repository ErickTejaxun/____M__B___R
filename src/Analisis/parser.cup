package Analisis;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;


parser code
{:	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	
:}


terminal String tint, tdouble, tchar, tbool, tstring, puntocoma, llavei, llaved, pari, pard, id, corchetei, corcheted, igual, print, println, coma;
terminal String igualigual, desigual, mayor, menor, menorigual, mayorigual, potencia , tvoid, nulo, tcomodin;
terminal String abstracto, caso, cat, clase, defecto, hacer, extiende, final_, graph,msn;
terminal String importar, instanceof_, nuevo, privado, protegido, publico, retorno, tcopi;

/*Palabras reservadas :v*/
terminal String tdefinir, tfusion, tconcatenar, tatexto, taentero, tadecimal, tpeso, treservar, teql, twrite, twriteend, tclose;
terminal String repetir;
/*Casteos*/
terminal String leerarchivo,estatico, super_, switch_, este, tochar, todouble, toint, str_, try_, escribir;
terminal String mientras, para, romper, continuar ,interrogante, dospuntos, aumento, decremento, punto;
terminal String not, and, or, si, sinosi, sino, tostring, tolower, touper;
terminal String suma, menos, multi, div, xor, printable, modulo;
terminal String cadena;
terminal char caracter;
terminal int entero;
terminal double decimal;
terminal boolean booleano;

non terminal Bloque BLOQUE;
non terminal ArrayList<Nodo> LINST;
non terminal Nodo INST;
non terminal Declaracion DECLARACION;
non terminal Expresion EXP, AUMENTO, DECREMENTO, EXPLICITCAST;
non terminal INICIO;
non terminal Tipo PRIMITIVO;
non terminal Imprimir PRINT;
non terminal Message MSN;
non terminal ImprimirT PRINTABLE;
non terminal Asignacion ASIG;
non terminal While WHILE;
non terminal DoWhile DOWHILE;
non terminal Break BREAK;
non terminal Continuar CONTINUE;
non terminal If IF, ELSE;
non terminal Ternario TER;
non terminal For FOR;
non terminal Expresion /*ACTUALIZACION,*/ EXPRETORNO;
non terminal Nodo ACTUALIZACION;
/*---------------> Dimensiones*/
non terminal ArrayList<Expresion> NDIM, NDIMVACIO, NDIMVALOR;
/*--------------->*/
non terminal ArrayList<Expresion> LEXP, LVALORES;
non terminal AsignacionVector ASIGV;
non terminal NodoNario ITEM,LITEM,ARR;
non terminal Tipo TIPO;
non terminal ArrayList<Dec> LDEC;
non terminal Dec DEC, DECCONSTANTE;
non terminal ForEach FOREACH;
non terminal Caso CASO, DEFECTO;
non terminal ArrayList<Caso> LCASO;
non terminal Switch SWITCH;
non terminal ArrayList<String> LMODFICADOR;
non terminal String MODFUNCION, MODCONST;
non terminal Tipo RESULTADO;
non terminal ParametroFormal PARFORMAL;
non terminal ArrayList<ParametroFormal> LPARFORMAL;
/*non terminal Constructor CONSTRUCTOR;*/
non terminal Funcion FUNCION, CABECERAMET;
non terminal DeclaracionConstante DECLARACIONCONSTANTE;
/*non terminal ArrayList<Nodo> LFUNCION;*/
non terminal Retorno RETORNO;
non terminal Llamada LLAMADA;
non terminal String MODATRIB;
non terminal ArrayList<Expresion> PARACTUALES,ACTUALES;
non terminal Concatenar CONCATENAR;

/*Atributos de clase*/
/*non terminal ArrayList<String> LMODATRIB;*/
/*non terminal ArrayList<Nodo> LDECATRIB;*/
non terminal DeclaracionAtributo DECATRIB;

non terminal Fusion FUSION, CUERPOFUSION, CUERPO ;

/*Arreglos*/
non terminal Expresion VALORARREGLO ;
non terminal Copi COPI;
non terminal Expresion ACCESO, ORIGEN;
non terminal Expresion INSTANCIA;
non terminal Expresion VALORASIGNACION;
non terminal Importar IMPORTAR;


/*precedence left interrogante, punto;*/
precedence left or;
precedence left and;
precedence left xor;
precedence left igualigual, desigual;
precedence left menor, mayor, mayorigual, menorigual;
precedence left suma, menos;
precedence left multi, div, modulo;
precedence left potencia;
precedence left aumento, decremento ;
precedence left not;
precedence left interrogante;
precedence nonassoc pard , pari;
precedence nonassoc corcheted , corchetei;
/*
precedence left not;
precedence nonassoc aumento, decremento, not;
precedence right interrogante, dospuntos;
precedence left or;
precedence left and;
precedence left xor;
precedence left igualigual, desigual;
precedence left menor, menorigual, mayor, mayorigual, instanceof_;
precedence left suma, menos;
precedence left div, multi, modulo;
precedence left potencia;
precedence right nuevo;
precedence nonassoc pard , pari;
precedence nonassoc corcheted , corchetei;
precedence left punto;
*/
start with INICIO
;

INICIO ::= LINST:lista {: Imprimir("Correcto"); raiz = new AST(lista);; :}		
;
       
LINST::= LINST:lista INST:inst {: lista.add(inst); RESULT = lista;:}
	    |INST:inst {: ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;:} 
;

INST::= PRINT:inst puntocoma {: RESULT = inst;:}
       |MSN:inst puntocoma {: RESULT = inst;:}
       |DECLARACION:inst puntocoma {: RESULT = inst;:}
       |ASIGV:inst puntocoma {: RESULT = inst;:}
       |ASIG:inst puntocoma {: RESULT = inst;:}
       |FUSION:inst puntocoma {: RESULT = inst;:}
       |COPI:inst puntocoma {: RESULT = inst;:}
       /*Todo esto deber√≠a de ser solo dentro de las funciones*/
       |FUNCION:inst  {: RESULT = inst;:}
       |IF:inst  {: RESULT = inst;:}
       |RETORNO:inst {:RESULT = inst;:}
       |LLAMADA:inst puntocoma {:RESULT = inst;:}       
       |WHILE:inst  {:RESULT = inst;:}
       |DOWHILE:inst puntocoma {:RESULT = inst;:}
       |FOR:inst  {:RESULT = inst;:}
       |BREAK:inst puntocoma {:RESULT = inst;:}
       |CONTINUE:inst puntocoma {:RESULT = inst;:}
       |SWITCH:inst {:RESULT = inst;:}
       |DECLARACIONCONSTANTE:inst {:RESULT = inst;:}
       |AUMENTO:inst puntocoma{:RESULT =inst;:}
       |DECREMENTO:inst puntocoma{:RESULT =inst;:}
       |CONCATENAR:inst puntocoma{:RESULT =inst;:}
       |error
;

COPI::= tcopi:t pari EXP:origen coma EXP:destino pard 
        {:
        RESULT = new Copi(origen, destino, tright, tleft);
        :}
;        
                /*#definir id 10 */
                /*#definir id {{1,2},{2,3}} */                
DECLARACIONCONSTANTE::= tdefinir:t DECCONSTANTE:nombre  
        {:
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        :}
;

DECCONSTANTE::=           
      id:id VALORARREGLO:valor {: RESULT = new Dec(id, valor, idright, idleft);:}    
    | id:id VALORASIGNACION:valor 
        {: 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        :}
; 

/* --------------------------------------------> fin constantes -*/

DECLARACION::= TIPO:t LDEC:lista {: RESULT = new Declaracion(t, lista, tright, tleft); :} ;

LDEC::= LDEC:lista  coma DEC:dec {: lista.add(dec); RESULT = lista;:}
        |DEC:dec {: ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;:}
;

DEC::= 
      id:id {: RESULT = new Dec(id,idright, idleft);:}
    | id:id igual VALORASIGNACION:valor {: RESULT = new Dec(id,valor, idright, idleft);:}
    | id:id NDIM:dim {: RESULT = new Dec(id,dim, idright, idleft);:}
    | id:id NDIM:dim igual VALORARREGLO:valor {: RESULT = new Dec(id,dim, valor, idright, idleft);:}
    | id:id NDIM:dim igual ARR:valor {: RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);:}
    | id:id NDIM:dim igual EXP:valor 
        {: 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        :}
;   

/*Dimensiones*/
NDIM ::=  NDIMVACIO:v {:RESULT =v; :}
        | LEXP:v {:RESULT =v; :}
;



NDIMVACIO::= 
          NDIMVACIO:n corchetei corcheted {:RESULT = n ; n.add(null);:}
        |corchetei corcheted {: RESULT = new ArrayList<Expresion>(); RESULT.add(null);:}
;  

/*
NDIMVALOR::= 
         NDIMVALOR:n corchetei EXP:valor corcheted {:RESULT = n ; n.add(valor);:}
        |corchetei EXP:valor corcheted {: RESULT = new ArrayList<Expresion>(); RESULT.add(valor);:}
; 
*/

VALORARREGLO::=
          llavei LEXP:l  llaved {: RESULT = new ExpresionArreglo(l,lright,lleft);:}
        /*|nuevo:n id:tipo LEXP:l {: RESULT = new ExpresionArreglo(new Tipo(tipo), l,nright,nleft);:}*/
;


ARR::= llavei LITEM:nodo llaved {: RESULT = nodo;:}
;

LITEM::= LITEM:nodo coma ITEM:item {: nodo.addHijo(item); RESULT = nodo; :}
        |ITEM:item  {: NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;:}
;

ITEM::= EXP:exp {: RESULT = new NodoNario(exp);:} 
        |ARR:exp {: RESULT = exp;:} 
;

ASIG::= ACCESO:origen igual VALORASIGNACION:valor   
        {: 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        :}
       
;

ASIGV::= id:id LEXP:coordenas igual EXP:valor {: RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);:}
;


VALORASIGNACION::= 
            EXP:exp {:RESULT = exp;:}
         |  INSTANCIA:exp  {:RESULT = exp;:}         
;


INSTANCIA::=          
        /*nuevo:n TIPO:tipo pari PARACTUALES:lista pard {: RESULT = new Instancia(tipo, lista, nright, nleft);:}*/
        treservar:n pari EXP:valor pard {: RESULT = new Instancia(valor, nright, nleft); :}
;

/*Lista de parametros actuales para llamadas a funciones*/
PARACTUALES::= ACTUALES:l{:RESULT = l;:}
            | {:RESULT = new ArrayList<Expresion>();:}
;            
ACTUALES::=    ACTUALES:l coma EXP:exp {:l.add(exp);RESULT = l;:}
              |EXP:exp {:ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;:}
;



PRINT::= print:p pari cadena:v pard  
        {: 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        :}
        |print:p pari cadena:v coma LVALORES:l pard  
        {: 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        :}        
;


MSN::= msn:p pari cadena:v pard  
        {: 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        :}
        |msn:p pari cadena:v coma LVALORES:l pard  
        {: 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        :}        
;




LVALORES ::= LVALORES:l coma EXP:exp {:RESULT = l; RESULT.add(exp); :}
            |EXP:exp {: RESULT = new ArrayList<Expresion>(); RESULT.add(exp); :}
;

LEXP::=   LEXP:l corchetei EXP:exp corcheted{:l.add(exp); RESULT = l;:}
        | corchetei EXP:exp corcheted {: ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;:}
;

EXP::= 
        /*L√≥gicas*/
         EXP:opi and EXP:opd {: RESULT = new And(opi, opd, opiright,opileft);:}
        |EXP:opi or EXP:opd {: RESULT = new Or(opi, opd, opiright,opileft);:}
        |EXP:opi xor EXP:opd {: RESULT = new Xor(opi,opd,opiright,opileft);:} 
        /*Instanceof*/
        |EXP:op instanceof_ id:tipo {:RESULT = new InstanceOf(op,tipo, opright, opleft);:}        
        |not EXP:op {: RESULT = new Not(op, opright,opleft);:}        
        /*Relacionales*/
        |EXP:opi igualigual EXP:opd {:RESULT = new Igual(opi,opd,opiright,opileft);:}
        |EXP:opi desigual EXP:opd {:RESULT = new Desigual(opi,opd,opiright,opileft);:}
        |EXP:opi mayor EXP:opd {:RESULT = new Mayor(opi,opd,opiright,opileft);:}
        |EXP:opi mayorigual EXP:opd {:RESULT = new MayorIgual(opi,opd,opiright,opileft);:}
        |EXP:opi menor EXP:opd {:RESULT = new Menor(opi,opd,opiright,opileft);:}
        |EXP:opi menorigual EXP:opd {:RESULT = new MenorIgual(opi,opd,opiright,opileft);:}        
        /*Ariteticas*/
        |EXP:opi suma EXP:opd {: RESULT = new Suma(opi,opd,opiright,opileft);:}       
        |EXP:opi menos EXP:opd {: RESULT = new Resta(opi,opd,opiright,opileft);:}          
        |EXP:opi multi EXP:opd {: RESULT = new Multiplicacion(opi,opd,opiright,opileft);:}  
        |EXP:opi div EXP:opd {: RESULT = new Division(opi,opd,opiright,opileft);:}  
        |EXP:opi modulo EXP:opd {: RESULT = new Modulo(opi,opd,opiright,opileft);:}  
        |EXP:opi potencia EXP:opd {:RESULT = new Potencia(opi,opd,opiright,opileft);:}        
        |menos EXP:op {: RESULT = new Menos(op, opright,opleft);:}
        /*Ternario*/                      
        /*Aumento ++ y --*/
        |AUMENTO:op {:RESULT = op;:}        
        |DECREMENTO:op {:RESULT = op;:}        
        |LLAMADA:exp {:RESULT = exp;:}
        /*Primitivas*/
        |entero:v {: RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);:}
        |decimal:v {: RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);:}
        |booleano:v {: RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);:}
        |cadena:v {: RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);:}
        |caracter:v {: RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);:}
        /*ACCESO*/
        |ACCESO:v {:RESULT = v;:}
        |multi ACCESO:v {:RESULT = v;:}
        |pari EXP:op pard {: RESULT = op;:}
        |tatexto:t pari EXP:expresion pard {: RESULT = new aTexto(expresion, tright, tleft);:}
        /*|EXPLICITCAST:exp {:RESULT = exp;:}*/
        | nulo:r {:RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);:} 
        | tpeso:t pari id:nombre pard {: RESULT = new Peso(nombre,tright, tleft );:}
        | CONCATENAR:v {:RESULT = v;:}
        | taentero:t pari EXP:expresion pard {: RESULT = new aEntero(expresion, tright,tleft);:}
        | tadecimal:t pari EXP:expresion pard {: RESULT = new aDecimal(expresion, tright,tleft);:}
        | teql:t pari EXP:expresion1 coma EXP: expresion2 pard {: RESULT = new Equals(expresion1, expresion2, tright,tleft);:}
;

CONCATENAR::= tconcatenar:t pari EXP:exp1 coma EXP:exp2 pard {:RESULT = new Concatenar(exp1,exp2,tright,tleft);:}
;

AUMENTO::= ACCESO:op aumento {:RESULT = new Aumento(op, opright, opleft);:}
          /*|aumento EXP:op {:RESULT = new Preaumento(op, opright, opleft);:}       */
            ;
DECREMENTO::= ACCESO:op decremento {:RESULT = new Decremento(op, opright, opleft);:}
              /*|decremento EXP:op {:RESULT = new Predecremento(op, opright, opleft);:}*/
;

ACCESO::= ACCESO:origen punto ORIGEN:destino {: RESULT = new Acceso(origen, destino, origenright, origenleft);:}
        | ORIGEN:exp {:RESULT = exp;:}        
;

ORIGEN::=
          TIPO:id {:RESULT = new Variable(id.nombreTipo(), idright, idleft);:}        
        | ORIGEN:origen LEXP:coor {: RESULT = new AccesoVector(origen , coor , origenright, origenleft);:}
        
;

TIPO::= PRIMITIVO:t{:RESULT = t;:}
      | id:id {:RESULT = new Tipo(id,idright, idleft);:}      
;

PRIMITIVO ::=   
         tint:t {:RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);:}
		|tchar:t {:RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);:}
        |tdouble:t {:RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);:}
		|tbool:t {:RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);:}
		/*|tstring:t {:RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);:}*/
;



FUSION::= tfusion id:nombre llavei CUERPO:clase llaved 
            {:                
                clase.setId(nombre);                
                RESULT = clase;
            :}
        | tfusion id:nombre llavei llaved 
            {:      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            :}            
;            

CUERPO::=              
          CUERPO:clase DECATRIB:f puntocoma 
            {: 
                clase.addAtributo(f); 
                RESULT = clase;
            :}
        | DECATRIB:atributos puntocoma
            {:
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            :}
;

DECATRIB::= TIPO:tipo LDEC:declaraciones
            {: 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            :}             
;


FUNCION::= CABECERAMET:funcion BLOQUE:bloque {: funcion.setInstrucciones(bloque); RESULT = funcion;:}
;

CABECERAMET::=
      TIPO:res id:nombre pari LPARFORMAL:lf pard 
                {: 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                :}  
    | TIPO:res NDIMVACIO id:nombre pari LPARFORMAL:lf pard 
                {: 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                :}                                          
    | tvoid:res id:nombre pari LPARFORMAL:lf pard 
                {: 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                :}
;

BLOQUE::= llavei LINST:l llaved {:RESULT = new Bloque(l,lright,lleft);:}
        | llavei:l  llaved {:RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);:}
;


RETORNO ::= retorno:r EXPRETORNO:exp puntocoma{:RESULT = new Retorno(exp, rright, rleft);:} 
          | retorno:r puntocoma {: RESULT = new Retorno( rright, rleft);:}
;

EXPRETORNO::= 
            EXP:exp {:RESULT = exp;:};

LPARFORMAL::= 
         LPARFORMAL:lista coma PARFORMAL:par {:lista.add(par); RESULT = lista;:}
        |PARFORMAL:par {:ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;:}
        |{: ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; :}
;

PARFORMAL::=  
         TIPO:tipo id:nombre{: RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);:}
        | final_:f TIPO:tipo id:nombre {: RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);:}
        | TIPO:tipo id:nombre NDIM:n{: RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);:}
        | final_:f TIPO:tipo id:nombre NDIM:n {: RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);:}             
;
        

IF::= si:si pari EXP:condicion pard BLOQUE:bloque {:RESULT = new If(condicion, bloque, siright, sileft);:}
    | si:si pari EXP:condicion pard BLOQUE:bloque sino ELSE:inst2 {: RESULT= new If(condicion,bloque,inst2,siright, sileft);:}
;

ELSE::= IF:inst  {:RESULT = inst;:}
      | BLOQUE:bloque {: RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); :}
;

LLAMADA::=            
            ACCESO:origen punto id:nombre pari PARACTUALES:l pard {:RESULT = new Llamada(origen,nombre, l, origenright,origenleft);:}                      
           | id:nombre pari PARACTUALES:l pard {:RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);:}                      
;

WHILE::= mientras:inst pari EXP:condicion pard BLOQUE:bloque {: RESULT = new While(condicion,bloque,instright, instleft);:}
;

CONTINUE::= continuar:inst  {: RESULT = new Continuar(instright, instleft);:}
;

BREAK::= romper:inst  {: RESULT = new Break(instright, instleft);:}
;

SWITCH::= switch_:i pari EXP:condicion pard llavei LCASO:lista llaved
        {:
            RESULT = new Switch(condicion, lista, iright, ileft);
        :}
        | switch_:i pari EXP:condicion pard llavei LCASO:lista DEFECTO:defecto llaved 
        {:
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        :}
;

LCASO::= LCASO:l CASO:caso {:l.add(caso); RESULT = l;:}
        |CASO:caso {:ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;:}
;

CASO::= caso:i EXP:condicion dospuntos LINST:linst {:RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);:}
;

DEFECTO::= defecto:i dospuntos LINST:linst {:RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);:}
;

DOWHILE::=  hacer:i BLOQUE:bloque mientras:inst pari EXP:condicion pard puntocoma
        {:
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        :}
;

FOR::= 
      para:para pari DECLARACION:dec puntocoma EXP:condicion puntocoma ACTUALIZACION:act  pard BLOQUE:bloque{: RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);:}
    | para:para pari ASIG:dec puntocoma EXP:condicion puntocoma ACTUALIZACION:act  pard BLOQUE:bloque{: RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);:}
;

ACTUALIZACION::= AUMENTO :inst {:RESULT =inst;:}
                |DECREMENTO :inst {:RESULT =inst;:}
                |ASIG:inst {:RESULT =inst;:}
                |ASIGV:inst {:RESULT =inst;:}
;

