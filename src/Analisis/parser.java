
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.InputOutput.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import AST.Instruccion.GUI.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\013\004\000\002\013" +
    "\003\000\002\115\004\000\002\115\004\000\002\115\004" +
    "\000\002\115\004\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\057\011\000\002\060\011\000\002" +
    "\114\004\000\002\106\004\000\002\107\004\000\002\110" +
    "\004\000\002\111\004\000\002\112\004\000\002\113\004" +
    "\000\002\120\006\000\002\004\004\000\002\004\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\105\010\000\002\103" +
    "\005\000\002\101\006\000\002\104\006\000\002\102\006" +
    "\000\002\102\010\000\002\073\010\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\061\004\000\002\100\004\000\002\046\004\000\002\046" +
    "\004\000\002\007\004\000\002\044\005\000\002\044\003" +
    "\000\002\045\003\000\002\045\005\000\002\045\004\000" +
    "\002\045\006\000\002\045\006\000\002\045\006\000\002" +
    "\032\003\000\002\032\003\000\002\033\005\000\002\033" +
    "\004\000\002\072\005\000\002\042\005\000\002\041\005" +
    "\000\002\041\003\000\002\040\003\000\002\040\003\000" +
    "\002\020\005\000\002\037\006\000\002\077\003\000\002" +
    "\077\003\000\002\076\006\000\002\064\003\000\002\064" +
    "\002\000\002\065\005\000\002\065\003\000\002\015\006" +
    "\000\002\015\010\000\002\016\006\000\002\016\010\000" +
    "\002\036\005\000\002\036\003\000\002\035\006\000\002" +
    "\035\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\005\000\002\010\006\000\002\010\003\000\002\010\006" +
    "\000\002\010\003\000\002\010\006\000\002\010\006\000" +
    "\002\010\010\000\002\066\010\000\002\011\004\000\002" +
    "\012\004\000\002\074\005\000\002\074\003\000\002\075" +
    "\003\000\002\075\004\000\002\043\003\000\002\043\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\070\007\000\002" +
    "\070\006\000\002\071\005\000\002\071\004\000\002\067" +
    "\004\000\002\055\004\000\002\056\007\000\002\056\010" +
    "\000\002\056\007\000\002\002\005\000\002\002\004\000" +
    "\002\062\005\000\002\062\004\000\002\030\003\000\002" +
    "\054\005\000\002\054\003\000\002\054\002\000\002\053" +
    "\004\000\002\053\005\000\002\053\005\000\002\053\006" +
    "\000\002\025\007\000\002\025\011\000\002\026\003\000" +
    "\002\026\003\000\002\063\010\000\002\063\006\000\002" +
    "\021\007\000\002\024\003\000\002\023\003\000\002\052" +
    "\011\000\002\052\012\000\002\051\004\000\002\051\003" +
    "\000\002\047\006\000\002\050\005\000\002\022\010\000" +
    "\002\027\013\000\002\027\013\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\112\003\104\004\030\005\122\006\007\007" +
    "\066\010\074\016\041\022\006\034\015\037\076\045\116" +
    "\051\033\053\071\054\102\056\013\064\043\065\051\066" +
    "\017\067\046\070\101\071\120\072\042\073\026\074\032" +
    "\075\130\100\045\102\052\103\023\104\004\115\061\122" +
    "\105\131\022\132\121\133\020\134\107\145\114\001\002" +
    "\000\004\014\u01ad\001\002\000\004\011\u01ac\001\002\000" +
    "\004\014\u01a6\001\002\000\160\003\uff6b\004\uff6b\005\uff6b" +
    "\006\uff6b\007\uff6b\010\uff6b\011\uff6b\013\uff6b\015\uff6b\016" +
    "\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\024\uff6b\025\uff6b" +
    "\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034" +
    "\uff6b\037\uff6b\045\uff6b\051\uff6b\053\uff6b\054\uff6b\057\uff6b" +
    "\064\uff6b\065\uff6b\066\uff6b\100\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\115\uff6b\122\uff6b\131\uff6b\132\uff6b\133\uff6b\134\uff6b" +
    "\136\uff6b\137\uff6b\140\uff6b\141\uff6b\143\uff6b\144\uff6b\145" +
    "\uff6b\153\uff6b\154\uff6b\155\uff6b\156\uff6b\157\uff6b\161\uff6b" +
    "\001\002\000\004\011\u01a5\001\002\000\004\011\u01a4\001" +
    "\002\000\004\011\u01a3\001\002\000\004\162\u01a2\001\002" +
    "\000\004\011\u01a1\001\002\000\004\016\u0194\001\002\000" +
    "\004\002\u0193\001\002\000\004\014\u0190\001\002\000\004" +
    "\011\uff4a\001\002\000\072\002\uffff\003\104\004\030\005" +
    "\122\006\007\007\066\010\074\016\041\022\006\034\015" +
    "\037\076\045\116\051\033\053\071\054\102\064\043\065" +
    "\051\066\017\100\045\103\023\104\004\115\061\122\105" +
    "\131\022\132\121\133\020\134\107\145\114\001\002\000" +
    "\004\014\u018c\001\002\000\004\016\u0181\001\002\000\100" +
    "\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\013\uffe4\016\uffe4\022\uffe4\034\uffe4\037\uffe4\041\uffe4" +
    "\044\uffe4\045\uffe4\051\uffe4\053\uffe4\054\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\100\uffe4\103\uffe4\104\uffe4\115\uffe4\122\uffe4" +
    "\131\uffe4\132\uffe4\133\uffe4\134\uffe4\145\uffe4\001\002\000" +
    "\004\011\u0180\001\002\000\004\016\u017f\001\002\000\004" +
    "\011\u017e\001\002\000\160\003\uff6c\004\uff6c\005\uff6c\006" +
    "\uff6c\007\uff6c\010\uff6c\011\uff6c\013\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\024\uff6c\025\uff6c\026" +
    "\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c" +
    "\037\uff6c\045\uff6c\051\uff6c\053\uff6c\054\uff6c\057\uff6c\064" +
    "\uff6c\065\uff6c\066\uff6c\100\uff6c\102\uff6c\103\uff6c\104\uff6c" +
    "\115\uff6c\122\uff6c\131\uff6c\132\uff6c\133\uff6c\134\uff6c\136" +
    "\uff6c\137\uff6c\140\uff6c\141\uff6c\143\uff6c\144\uff6c\145\uff6c" +
    "\153\uff6c\154\uff6c\155\uff6c\156\uff6c\157\uff6c\161\uff6c\001" +
    "\002\000\012\021\373\137\267\140\270\141\266\001\002" +
    "\000\004\016\u017d\001\002\000\004\014\u0177\001\002\000" +
    "\004\011\u0176\001\002\000\004\011\u0175\001\002\000\004" +
    "\011\u0174\001\002\000\004\011\u0173\001\002\000\072\003" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\016\uffc3" +
    "\022\uffc3\034\uffc3\037\uffc3\045\uffc3\051\uffc3\053\uffc3\054" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\100\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\115\uffc3\122\uffc3\131\uffc3\132\uffc3\133\uffc3\134" +
    "\uffc3\145\uffc3\001\002\000\020\014\244\016\uff6d\017\141" +
    "\021\uff6d\137\uff6d\140\uff6d\141\uff6d\001\002\000\004\016" +
    "\u0172\001\002\000\060\004\030\005\122\006\007\007\066" +
    "\010\074\011\u0170\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\004\011\u016d\001\002\000\004\014\u016a\001\002" +
    "\000\004\016\u0169\001\002\000\100\002\uffe0\003\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\013\uffe0\016\uffe0" +
    "\022\uffe0\034\uffe0\037\uffe0\041\uffe0\044\uffe0\045\uffe0\051" +
    "\uffe0\053\uffe0\054\uffe0\064\uffe0\065\uffe0\066\uffe0\100\uffe0" +
    "\103\uffe0\104\uffe0\115\uffe0\122\uffe0\131\uffe0\132\uffe0\133" +
    "\uffe0\134\uffe0\145\uffe0\001\002\000\016\016\u0157\017\u0155" +
    "\021\uff70\137\uff70\140\uff70\141\uff70\001\002\000\004\014" +
    "\u0150\001\002\000\004\016\u014c\001\002\000\160\003\uff6e" +
    "\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e\013" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\037\uff6e\045\uff6e\051\uff6e\053\uff6e" +
    "\054\uff6e\057\uff6e\064\uff6e\065\uff6e\066\uff6e\100\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\115\uff6e\122\uff6e\131\uff6e\132\uff6e" +
    "\133\uff6e\134\uff6e\136\uff6e\137\uff6e\140\uff6e\141\uff6e\143" +
    "\uff6e\144\uff6e\145\uff6e\153\uff6e\154\uff6e\155\uff6e\156\uff6e" +
    "\157\uff6e\161\uff6e\001\002\000\100\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\016\uffdb" +
    "\022\uffdb\034\uffdb\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051" +
    "\uffdb\053\uffdb\054\uffdb\064\uffdb\065\uffdb\066\uffdb\100\uffdb" +
    "\103\uffdb\104\uffdb\115\uffdb\122\uffdb\131\uffdb\132\uffdb\133" +
    "\uffdb\134\uffdb\145\uffdb\001\002\000\100\002\uffec\003\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\013\uffec\016" +
    "\uffec\022\uffec\034\uffec\037\uffec\041\uffec\044\uffec\045\uffec" +
    "\051\uffec\053\uffec\054\uffec\064\uffec\065\uffec\066\uffec\100" +
    "\uffec\103\uffec\104\uffec\115\uffec\122\uffec\131\uffec\132\uffec" +
    "\133\uffec\134\uffec\145\uffec\001\002\000\100\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde" +
    "\016\uffde\022\uffde\034\uffde\037\uffde\041\uffde\044\uffde\045" +
    "\uffde\051\uffde\053\uffde\054\uffde\064\uffde\065\uffde\066\uffde" +
    "\100\uffde\103\uffde\104\uffde\115\uffde\122\uffde\131\uffde\132" +
    "\uffde\133\uffde\134\uffde\145\uffde\001\002\000\004\011\u014a" +
    "\001\002\000\004\011\u0149\001\002\000\004\014\u0147\001" +
    "\002\000\004\011\u0146\001\002\000\072\003\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\016\uffc2\022\uffc2\034" +
    "\uffc2\037\uffc2\045\uffc2\051\uffc2\053\uffc2\054\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\100\uffc2\102\uffc2\103\uffc2\104\uffc2\115" +
    "\uffc2\122\uffc2\131\uffc2\132\uffc2\133\uffc2\134\uffc2\145\uffc2" +
    "\001\002\000\004\011\u0145\001\002\000\004\011\u0144\001" +
    "\002\000\160\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69" +
    "\010\uff69\011\uff69\013\uff69\015\uff69\016\uff69\017\uff69\020" +
    "\uff69\021\uff69\022\uff69\024\uff69\025\uff69\026\uff69\027\uff69" +
    "\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\037\uff69\045" +
    "\uff69\051\uff69\053\uff69\054\uff69\057\uff69\064\uff69\065\uff69" +
    "\066\uff69\100\uff69\102\uff69\103\uff69\104\uff69\115\uff69\122" +
    "\uff69\131\uff69\132\uff69\133\uff69\134\uff69\136\uff69\137\uff69" +
    "\140\uff69\141\uff69\143\uff69\144\uff69\145\uff69\153\uff69\154" +
    "\uff69\155\uff69\156\uff69\157\uff69\161\uff69\001\002\000\072" +
    "\003\104\004\030\005\122\006\007\007\066\010\074\016" +
    "\041\022\006\034\015\037\076\045\116\051\033\053\071" +
    "\054\102\064\043\065\051\066\017\100\045\102\052\103" +
    "\023\104\004\115\061\122\105\131\022\132\121\133\020" +
    "\134\107\145\114\001\002\000\004\011\u0141\001\002\000" +
    "\004\014\u0138\001\002\000\004\011\u0137\001\002\000\004" +
    "\011\u0136\001\002\000\160\003\uff68\004\uff68\005\uff68\006" +
    "\uff68\007\uff68\010\uff68\011\uff68\013\uff68\015\uff68\016\uff68" +
    "\017\uff68\020\uff68\021\uff68\022\uff68\024\uff68\025\uff68\026" +
    "\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68" +
    "\037\uff68\045\uff68\051\uff68\053\uff68\054\uff68\057\uff68\064" +
    "\uff68\065\uff68\066\uff68\100\uff68\102\uff68\103\uff68\104\uff68" +
    "\115\uff68\122\uff68\131\uff68\132\uff68\133\uff68\134\uff68\136" +
    "\uff68\137\uff68\140\uff68\141\uff68\143\uff68\144\uff68\145\uff68" +
    "\153\uff68\154\uff68\155\uff68\156\uff68\157\uff68\161\uff68\001" +
    "\002\000\004\011\u0135\001\002\000\004\014\u0130\001\002" +
    "\000\004\011\u012f\001\002\000\004\011\u012e\001\002\000" +
    "\004\016\u012d\001\002\000\004\014\u012a\001\002\000\004" +
    "\011\u0129\001\002\000\100\002\uffcd\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\013\uffcd\016\uffcd\022\uffcd" +
    "\034\uffcd\037\uffcd\041\uffcd\044\uffcd\045\uffcd\051\uffcd\053" +
    "\uffcd\054\uffcd\064\uffcd\065\uffcd\066\uffcd\100\uffcd\103\uffcd" +
    "\104\uffcd\115\uffcd\122\uffcd\131\uffcd\132\uffcd\133\uffcd\134" +
    "\uffcd\145\uffcd\001\002\000\004\014\u0118\001\002\000\004" +
    "\011\u0117\001\002\000\004\011\uff4b\001\002\000\100\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\013\uffe2\016\uffe2\022\uffe2\034\uffe2\037\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\053\uffe2\054\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\100\uffe2\103\uffe2\104\uffe2\115\uffe2\122\uffe2\131" +
    "\uffe2\132\uffe2\133\uffe2\134\uffe2\145\uffe2\001\002\000\004" +
    "\011\u0116\001\002\000\004\011\u0115\001\002\000\100\002" +
    "\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\016\uffe3\022\uffe3\034\uffe3\037\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\051\uffe3\053\uffe3\054\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\100\uffe3\103\uffe3\104\uffe3\115\uffe3\122\uffe3\131" +
    "\uffe3\132\uffe3\133\uffe3\134\uffe3\145\uffe3\001\002\000\004" +
    "\014\u010d\001\002\000\072\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\016\uffc4\022\uffc4\034\uffc4\037\uffc4" +
    "\045\uffc4\051\uffc4\053\uffc4\054\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\100\uffc4\102\uffc4\103\uffc4\104\uffc4\115\uffc4\122\uffc4" +
    "\131\uffc4\132\uffc4\133\uffc4\134\uffc4\145\uffc4\001\002\000" +
    "\004\012\134\001\002\000\004\011\u0107\001\002\000\004" +
    "\016\u0106\001\002\000\004\014\307\001\002\000\160\003" +
    "\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a" +
    "\013\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\022" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a" +
    "\032\uff6a\033\uff6a\034\uff6a\037\uff6a\045\uff6a\051\uff6a\053" +
    "\uff6a\054\uff6a\057\uff6a\064\uff6a\065\uff6a\066\uff6a\100\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\115\uff6a\122\uff6a\131\uff6a\132" +
    "\uff6a\133\uff6a\134\uff6a\136\uff6a\137\uff6a\140\uff6a\141\uff6a" +
    "\143\uff6a\144\uff6a\145\uff6a\153\uff6a\154\uff6a\155\uff6a\156" +
    "\uff6a\157\uff6a\161\uff6a\001\002\000\004\011\306\001\002" +
    "\000\004\011\305\001\002\000\160\003\uff71\004\uff71\005" +
    "\uff71\006\uff71\007\uff71\010\uff71\011\uff71\013\uff71\015\uff71" +
    "\016\uff71\017\141\020\uff71\021\uff71\022\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71" +
    "\034\uff71\037\uff71\045\uff71\051\uff71\053\uff71\054\uff71\057" +
    "\uff71\064\uff71\065\uff71\066\uff71\100\uff71\102\uff71\103\uff71" +
    "\104\uff71\115\uff71\122\uff71\131\uff71\132\uff71\133\uff71\134" +
    "\uff71\136\uff71\137\uff71\140\uff71\141\uff71\143\uff71\144\uff71" +
    "\145\uff71\153\uff71\154\uff71\155\uff71\156\uff71\157\uff71\161" +
    "\uff71\001\002\000\004\012\134\001\002\000\004\011\132" +
    "\001\002\000\004\016\131\001\002\000\004\011\uffef\001" +
    "\002\000\100\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\013\uffd4\016\uffd4\022\uffd4\034\uffd4\037" +
    "\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\053\uffd4\054\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\100\uffd4\103\uffd4\104\uffd4\115" +
    "\uffd4\122\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\145\uffd4" +
    "\001\002\000\100\002\uff62\003\uff62\004\uff62\005\uff62\006" +
    "\uff62\007\uff62\010\uff62\013\uff62\016\uff62\022\uff62\034\uff62" +
    "\037\uff62\041\uff62\044\uff62\045\uff62\051\uff62\053\uff62\054" +
    "\uff62\064\uff62\065\uff62\066\uff62\100\uff62\103\uff62\104\uff62" +
    "\115\uff62\122\uff62\131\uff62\132\uff62\133\uff62\134\uff62\145" +
    "\uff62\001\002\000\072\003\104\004\030\005\122\006\007" +
    "\007\066\010\074\013\136\016\041\022\006\034\015\037" +
    "\076\045\116\051\033\053\071\054\102\064\043\065\051" +
    "\066\017\100\045\103\023\104\004\115\061\122\105\131" +
    "\022\132\121\133\020\134\107\145\114\001\002\000\072" +
    "\003\104\004\030\005\122\006\007\007\066\010\074\013" +
    "\137\016\041\022\006\034\015\037\076\045\116\051\033" +
    "\053\071\054\102\064\043\065\051\066\017\100\045\103" +
    "\023\104\004\115\061\122\105\131\022\132\121\133\020" +
    "\134\107\145\114\001\002\000\104\002\uff5d\003\uff5d\004" +
    "\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\013\uff5d\016\uff5d" +
    "\022\uff5d\034\uff5d\037\uff5d\041\uff5d\044\uff5d\045\uff5d\051" +
    "\uff5d\052\uff5d\053\uff5d\054\uff5d\064\uff5d\065\uff5d\066\uff5d" +
    "\100\uff5d\103\uff5d\104\uff5d\115\uff5d\122\uff5d\131\uff5d\132" +
    "\uff5d\133\uff5d\134\uff5d\145\uff5d\147\uff5d\001\002\000\104" +
    "\002\uff5e\003\uff5e\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010" +
    "\uff5e\013\uff5e\016\uff5e\022\uff5e\034\uff5e\037\uff5e\041\uff5e" +
    "\044\uff5e\045\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\100\uff5e\103\uff5e\104\uff5e\115\uff5e" +
    "\122\uff5e\131\uff5e\132\uff5e\133\uff5e\134\uff5e\145\uff5e\147" +
    "\uff5e\001\002\000\100\002\uffed\003\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\013\uffed\016\uffed\022\uffed\034" +
    "\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed\053\uffed" +
    "\054\uffed\064\uffed\065\uffed\066\uffed\100\uffed\103\uffed\104" +
    "\uffed\115\uffed\122\uffed\131\uffed\132\uffed\133\uffed\134\uffed" +
    "\145\uffed\001\002\000\056\004\030\005\122\006\007\007" +
    "\066\010\074\014\171\016\164\035\163\104\004\105\160" +
    "\106\162\107\153\110\170\112\150\142\147\154\161\155" +
    "\165\162\145\163\155\164\166\165\146\166\151\001\002" +
    "\000\160\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\011\uff6f\013\uff6f\015\uff6f\016\uff6f\017\143\020\uff6f" +
    "\021\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\037\uff6f\045\uff6f" +
    "\051\uff6f\053\uff6f\054\uff6f\057\uff6f\064\uff6f\065\uff6f\066" +
    "\uff6f\100\uff6f\102\uff6f\103\uff6f\104\uff6f\115\uff6f\122\uff6f" +
    "\131\uff6f\132\uff6f\133\uff6f\134\uff6f\136\uff6f\137\uff6f\140" +
    "\uff6f\141\uff6f\143\uff6f\144\uff6f\145\uff6f\153\uff6f\154\uff6f" +
    "\155\uff6f\156\uff6f\157\uff6f\161\uff6f\001\002\000\056\004" +
    "\030\005\122\006\007\007\066\010\074\014\171\016\164" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\112" +
    "\150\142\147\154\161\155\165\162\145\163\155\164\166" +
    "\165\146\166\151\001\002\000\146\003\uff85\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\013\uff85\015\uff85" +
    "\016\uff85\020\uff85\022\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\037\uff85" +
    "\045\uff85\051\uff85\053\uff85\054\uff85\057\uff85\064\uff85\065" +
    "\uff85\066\uff85\100\uff85\102\uff85\103\uff85\104\uff85\115\uff85" +
    "\122\uff85\131\uff85\132\uff85\133\uff85\134\uff85\136\uff85\143" +
    "\uff85\144\uff85\145\uff85\153\uff85\154\uff85\155\uff85\156\uff85" +
    "\157\uff85\161\uff85\001\002\000\146\003\uff81\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\013\uff81\015\uff81" +
    "\016\uff81\020\uff81\022\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\037\uff81" +
    "\045\uff81\051\uff81\053\uff81\054\uff81\057\uff81\064\uff81\065" +
    "\uff81\066\uff81\100\uff81\102\uff81\103\uff81\104\uff81\115\uff81" +
    "\122\uff81\131\uff81\132\uff81\133\uff81\134\uff81\136\uff81\143" +
    "\uff81\144\uff81\145\uff81\153\uff81\154\uff81\155\uff81\156\uff81" +
    "\157\uff81\161\uff81\001\002\000\146\003\uff83\004\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83\015\uff83" +
    "\016\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\037\uff83" +
    "\045\uff83\051\uff83\053\uff83\054\uff83\057\uff83\064\uff83\065" +
    "\uff83\066\uff83\100\uff83\102\uff83\103\uff83\104\uff83\115\uff83" +
    "\122\uff83\131\uff83\132\uff83\133\uff83\134\uff83\136\uff83\143" +
    "\uff83\144\uff83\145\uff83\153\uff83\154\uff83\155\uff83\156\uff83" +
    "\157\uff83\161\uff83\001\002\000\056\004\030\005\122\006" +
    "\007\007\066\010\074\014\171\016\164\035\163\104\004" +
    "\105\160\106\162\107\153\110\170\112\150\142\147\154" +
    "\161\155\165\162\145\163\155\164\166\165\146\166\151" +
    "\001\002\000\004\014\275\001\002\000\146\003\uff82\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\013\uff82" +
    "\015\uff82\016\uff82\020\uff82\022\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\037\uff82\045\uff82\051\uff82\053\uff82\054\uff82\057\uff82\064" +
    "\uff82\065\uff82\066\uff82\100\uff82\102\uff82\103\uff82\104\uff82" +
    "\115\uff82\122\uff82\131\uff82\132\uff82\133\uff82\134\uff82\136" +
    "\uff82\143\uff82\144\uff82\145\uff82\153\uff82\154\uff82\155\uff82" +
    "\156\uff82\157\uff82\161\uff82\001\002\000\154\003\uff7f\004" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\uff7f" +
    "\015\uff7f\016\uff7f\020\uff7f\022\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\037\uff7f\045\uff7f\051\uff7f\053\uff7f\054\uff7f\057\uff7f\064" +
    "\uff7f\065\uff7f\066\uff7f\100\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\115\uff7f\122\uff7f\131\uff7f\132\uff7f\133\uff7f\134\uff7f\136" +
    "\uff7f\137\267\140\270\141\266\143\uff7f\144\uff7f\145\uff7f" +
    "\153\uff7f\154\uff7f\155\uff7f\156\uff7f\157\uff7f\161\uff7f\001" +
    "\002\000\004\014\263\001\002\000\044\020\262\025\205" +
    "\026\176\027\214\030\204\031\213\032\200\033\174\057" +
    "\210\143\202\144\201\153\177\154\203\155\207\156\175" +
    "\157\206\161\211\001\002\000\146\003\uff80\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\013\uff80\015\uff80" +
    "\016\uff80\020\uff80\022\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\037\uff80" +
    "\045\uff80\051\uff80\053\uff80\054\uff80\057\uff80\064\uff80\065" +
    "\uff80\066\uff80\100\uff80\102\uff80\103\uff80\104\uff80\115\uff80" +
    "\122\uff80\131\uff80\132\uff80\133\uff80\134\uff80\136\uff80\143" +
    "\uff80\144\uff80\145\uff80\153\uff80\154\uff80\155\uff80\156\uff80" +
    "\157\uff80\161\uff80\001\002\000\146\003\uff87\004\uff87\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\013\uff87\015\uff87" +
    "\016\uff87\020\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\037\uff87" +
    "\045\uff87\051\uff87\053\uff87\054\uff87\057\uff87\064\uff87\065" +
    "\uff87\066\uff87\100\uff87\102\uff87\103\uff87\104\uff87\115\uff87" +
    "\122\uff87\131\uff87\132\uff87\133\uff87\134\uff87\136\uff87\143" +
    "\uff87\144\uff87\145\uff87\153\uff87\154\uff87\155\uff87\156\uff87" +
    "\157\uff87\161\uff87\001\002\000\160\003\uff70\004\uff70\005" +
    "\uff70\006\uff70\007\uff70\010\uff70\011\uff70\013\uff70\015\uff70" +
    "\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\024\uff70\025" +
    "\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70" +
    "\034\uff70\037\uff70\045\uff70\051\uff70\053\uff70\054\uff70\057" +
    "\uff70\064\uff70\065\uff70\066\uff70\100\uff70\102\uff70\103\uff70" +
    "\104\uff70\115\uff70\122\uff70\131\uff70\132\uff70\133\uff70\134" +
    "\uff70\136\uff70\137\uff70\140\uff70\141\uff70\143\uff70\144\uff70" +
    "\145\uff70\153\uff70\154\uff70\155\uff70\156\uff70\157\uff70\161" +
    "\uff70\001\002\000\004\014\257\001\002\000\056\004\030" +
    "\005\122\006\007\007\066\010\074\014\171\016\164\035" +
    "\163\104\004\105\160\106\162\107\153\110\170\112\150" +
    "\142\147\154\161\155\165\162\145\163\155\164\166\165" +
    "\146\166\151\001\002\000\004\014\253\001\002\000\146" +
    "\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\013\uff7b\015\uff7b\016\uff7b\020\uff7b\022\uff7b\024\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\037\uff7b\045\uff7b\051\uff7b\053\uff7b\054\uff7b" +
    "\057\uff7b\064\uff7b\065\uff7b\066\uff7b\100\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\115\uff7b\122\uff7b\131\uff7b\132\uff7b\133\uff7b" +
    "\134\uff7b\136\uff7b\143\uff7b\144\uff7b\145\uff7b\153\uff7b\154" +
    "\uff7b\155\uff7b\156\uff7b\157\uff7b\161\uff7b\001\002\000\160" +
    "\003\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011" +
    "\uff6d\013\uff6d\014\244\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\022\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\037\uff6d\045\uff6d\051\uff6d" +
    "\053\uff6d\054\uff6d\057\uff6d\064\uff6d\065\uff6d\066\uff6d\100" +
    "\uff6d\102\uff6d\103\uff6d\104\uff6d\115\uff6d\122\uff6d\131\uff6d" +
    "\132\uff6d\133\uff6d\134\uff6d\136\uff6d\137\uff6d\140\uff6d\141" +
    "\uff6d\143\uff6d\144\uff6d\145\uff6d\153\uff6d\154\uff6d\155\uff6d" +
    "\156\uff6d\157\uff6d\161\uff6d\001\002\000\016\004\030\005" +
    "\122\006\007\007\066\010\074\016\240\001\002\000\146" +
    "\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\013\uff84\015\uff84\016\uff84\020\uff84\022\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\037\uff84\045\uff84\051\uff84\053\uff84\054\uff84" +
    "\057\uff84\064\uff84\065\uff84\066\uff84\100\uff84\102\uff84\103" +
    "\uff84\104\uff84\115\uff84\122\uff84\131\uff84\132\uff84\133\uff84" +
    "\134\uff84\136\uff84\143\uff84\144\uff84\145\uff84\153\uff84\154" +
    "\uff84\155\uff84\156\uff84\157\uff84\161\uff84\001\002\000\146" +
    "\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\013\uff86\015\uff86\016\uff86\020\uff86\022\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\037\uff86\045\uff86\051\uff86\053\uff86\054\uff86" +
    "\057\uff86\064\uff86\065\uff86\066\uff86\100\uff86\102\uff86\103" +
    "\uff86\104\uff86\115\uff86\122\uff86\131\uff86\132\uff86\133\uff86" +
    "\134\uff86\136\uff86\143\uff86\144\uff86\145\uff86\153\uff86\154" +
    "\uff86\155\uff86\156\uff86\157\uff86\161\uff86\001\002\000\004" +
    "\014\235\001\002\000\056\004\030\005\122\006\007\007" +
    "\066\010\074\014\171\016\164\035\163\104\004\105\160" +
    "\106\162\107\153\110\170\112\150\142\147\154\161\155" +
    "\165\162\145\163\155\164\166\165\146\166\151\001\002" +
    "\000\146\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79\010" +
    "\uff79\011\uff79\013\uff79\015\uff79\016\uff79\020\uff79\022\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\034\uff79\037\uff79\045\uff79\051\uff79\053\uff79" +
    "\054\uff79\057\uff79\064\uff79\065\uff79\066\uff79\100\uff79\102" +
    "\uff79\103\uff79\104\uff79\115\uff79\122\uff79\131\uff79\132\uff79" +
    "\133\uff79\134\uff79\136\uff79\143\uff79\144\uff79\145\uff79\153" +
    "\uff79\154\uff79\155\uff79\156\uff79\157\uff79\161\uff79\001\002" +
    "\000\044\015\212\025\205\026\176\027\214\030\204\031" +
    "\213\032\200\033\174\057\210\143\202\144\201\153\177" +
    "\154\203\155\207\156\175\157\206\161\211\001\002\000" +
    "\056\004\030\005\122\006\007\007\066\010\074\014\171" +
    "\016\164\035\163\104\004\105\160\106\162\107\153\110" +
    "\170\112\150\142\147\154\161\155\165\162\145\163\155" +
    "\164\166\165\146\166\151\001\002\000\056\004\030\005" +
    "\122\006\007\007\066\010\074\014\171\016\164\035\163" +
    "\104\004\105\160\106\162\107\153\110\170\112\150\142" +
    "\147\154\161\155\165\162\145\163\155\164\166\165\146" +
    "\166\151\001\002\000\056\004\030\005\122\006\007\007" +
    "\066\010\074\014\171\016\164\035\163\104\004\105\160" +
    "\106\162\107\153\110\170\112\150\142\147\154\161\155" +
    "\165\162\145\163\155\164\166\165\146\166\151\001\002" +
    "\000\056\004\030\005\122\006\007\007\066\010\074\014" +
    "\171\016\164\035\163\104\004\105\160\106\162\107\153" +
    "\110\170\112\150\142\147\154\161\155\165\162\145\163" +
    "\155\164\166\165\146\166\151\001\002\000\056\004\030" +
    "\005\122\006\007\007\066\010\074\014\171\016\164\035" +
    "\163\104\004\105\160\106\162\107\153\110\170\112\150" +
    "\142\147\154\161\155\165\162\145\163\155\164\166\165" +
    "\146\166\151\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\056\004\030\005\122\006\007\007\066\010\074" +
    "\014\171\016\164\035\163\104\004\105\160\106\162\107" +
    "\153\110\170\112\150\142\147\154\161\155\165\162\145" +
    "\163\155\164\166\165\146\166\151\001\002\000\056\004" +
    "\030\005\122\006\007\007\066\010\074\014\171\016\164" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\112" +
    "\150\142\147\154\161\155\165\162\145\163\155\164\166" +
    "\165\146\166\151\001\002\000\056\004\030\005\122\006" +
    "\007\007\066\010\074\014\171\016\164\035\163\104\004" +
    "\105\160\106\162\107\153\110\170\112\150\142\147\154" +
    "\161\155\165\162\145\163\155\164\166\165\146\166\151" +
    "\001\002\000\056\004\030\005\122\006\007\007\066\010" +
    "\074\014\171\016\164\035\163\104\004\105\160\106\162" +
    "\107\153\110\170\112\150\142\147\154\161\155\165\162" +
    "\145\163\155\164\166\165\146\166\151\001\002\000\056" +
    "\004\030\005\122\006\007\007\066\010\074\014\171\016" +
    "\164\035\163\104\004\105\160\106\162\107\153\110\170" +
    "\112\150\142\147\154\161\155\165\162\145\163\155\164" +
    "\166\165\146\166\151\001\002\000\056\004\030\005\122" +
    "\006\007\007\066\010\074\014\171\016\164\035\163\104" +
    "\004\105\160\106\162\107\153\110\170\112\150\142\147" +
    "\154\161\155\165\162\145\163\155\164\166\165\146\166" +
    "\151\001\002\000\004\016\220\001\002\000\056\004\030" +
    "\005\122\006\007\007\066\010\074\014\171\016\164\035" +
    "\163\104\004\105\160\106\162\107\153\110\170\112\150" +
    "\142\147\154\161\155\165\162\145\163\155\164\166\165" +
    "\146\166\151\001\002\000\146\003\uff7d\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\011\uff7d\013\uff7d\015\uff7d\016" +
    "\uff7d\020\uff7d\022\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\037\uff7d\045" +
    "\uff7d\051\uff7d\053\uff7d\054\uff7d\057\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\100\uff7d\102\uff7d\103\uff7d\104\uff7d\115\uff7d\122" +
    "\uff7d\131\uff7d\132\uff7d\133\uff7d\134\uff7d\136\uff7d\143\uff7d" +
    "\144\uff7d\145\uff7d\153\uff7d\154\uff7d\155\uff7d\156\uff7d\157" +
    "\uff7d\161\uff7d\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\056\004\030\005\122\006\007\007\066\010\074" +
    "\014\171\016\164\035\163\104\004\105\160\106\162\107" +
    "\153\110\170\112\150\142\147\154\161\155\165\162\145" +
    "\163\155\164\166\165\146\166\151\001\002\000\146\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\013\uff92\015\uff92\016\uff92\020\uff92\022\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\174" +
    "\034\uff92\037\uff92\045\uff92\051\uff92\053\uff92\054\uff92\057" +
    "\uff92\064\uff92\065\uff92\066\uff92\100\uff92\102\uff92\103\uff92" +
    "\104\uff92\115\uff92\122\uff92\131\uff92\132\uff92\133\uff92\134" +
    "\uff92\136\uff92\143\uff92\144\uff92\145\uff92\153\177\154\203" +
    "\155\207\156\175\157\uff92\161\211\001\002\000\146\003" +
    "\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\013\uff8f\015\uff8f\016\uff8f\020\uff8f\022\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\174" +
    "\034\uff8f\037\uff8f\045\uff8f\051\uff8f\053\uff8f\054\uff8f\057" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\100\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\115\uff8f\122\uff8f\131\uff8f\132\uff8f\133\uff8f\134" +
    "\uff8f\136\uff8f\143\uff8f\144\uff8f\145\uff8f\153\177\154\203" +
    "\155\207\156\175\157\uff8f\161\211\001\002\000\146\003" +
    "\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\013\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\174" +
    "\034\uff8a\037\uff8a\045\uff8a\051\uff8a\053\uff8a\054\uff8a\057" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\100\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\115\uff8a\122\uff8a\131\uff8a\132\uff8a\133\uff8a\134" +
    "\uff8a\136\uff8a\143\uff8a\144\uff8a\145\uff8a\153\uff8a\154\uff8a" +
    "\155\uff8a\156\uff8a\157\uff8a\161\uff8a\001\002\000\146\003" +
    "\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\013\uff96\015\uff96\016\uff96\020\uff96\022\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\037\uff96\045\uff96\051\uff96\053\uff96\054\uff96\057" +
    "\uff96\064\uff96\065\uff96\066\uff96\100\uff96\102\uff96\103\uff96" +
    "\104\uff96\115\uff96\122\uff96\131\uff96\132\uff96\133\uff96\134" +
    "\uff96\136\uff96\143\uff96\144\uff96\145\uff96\153\uff96\154\uff96" +
    "\155\uff96\156\uff96\157\uff96\161\uff96\001\002\000\146\003" +
    "\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\013\uff8c\015\uff8c\016\uff8c\020\uff8c\022\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\174" +
    "\034\uff8c\037\uff8c\045\uff8c\051\uff8c\053\uff8c\054\uff8c\057" +
    "\uff8c\064\uff8c\065\uff8c\066\uff8c\100\uff8c\102\uff8c\103\uff8c" +
    "\104\uff8c\115\uff8c\122\uff8c\131\uff8c\132\uff8c\133\uff8c\134" +
    "\uff8c\136\uff8c\143\uff8c\144\uff8c\145\uff8c\153\uff8c\154\uff8c" +
    "\155\uff8c\156\uff8c\157\uff8c\161\uff8c\001\002\000\146\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\013\uff97\015\uff97\016\uff97\020\uff97\022\uff97\024\uff97\025" +
    "\205\026\176\027\214\030\204\031\213\032\200\033\174" +
    "\034\uff97\037\uff97\045\uff97\051\uff97\053\uff97\054\uff97\057" +
    "\uff97\064\uff97\065\uff97\066\uff97\100\uff97\102\uff97\103\uff97" +
    "\104\uff97\115\uff97\122\uff97\131\uff97\132\uff97\133\uff97\134" +
    "\uff97\136\uff97\143\uff97\144\uff97\145\uff97\153\177\154\203" +
    "\155\207\156\175\157\uff97\161\211\001\002\000\146\003" +
    "\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\013\uff94\015\uff94\016\uff94\020\uff94\022\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\214\030\204\031\213\032\200\033\174" +
    "\034\uff94\037\uff94\045\uff94\051\uff94\053\uff94\054\uff94\057" +
    "\uff94\064\uff94\065\uff94\066\uff94\100\uff94\102\uff94\103\uff94" +
    "\104\uff94\115\uff94\122\uff94\131\uff94\132\uff94\133\uff94\134" +
    "\uff94\136\uff94\143\uff94\144\uff94\145\uff94\153\177\154\203" +
    "\155\207\156\175\157\uff94\161\211\001\002\000\146\003" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\013\uff90\015\uff90\016\uff90\020\uff90\022\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\174" +
    "\034\uff90\037\uff90\045\uff90\051\uff90\053\uff90\054\uff90\057" +
    "\uff90\064\uff90\065\uff90\066\uff90\100\uff90\102\uff90\103\uff90" +
    "\104\uff90\115\uff90\122\uff90\131\uff90\132\uff90\133\uff90\134" +
    "\uff90\136\uff90\143\uff90\144\uff90\145\uff90\153\177\154\203" +
    "\155\207\156\175\157\uff90\161\211\001\002\000\146\003" +
    "\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\013\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\174" +
    "\034\uff8d\037\uff8d\045\uff8d\051\uff8d\053\uff8d\054\uff8d\057" +
    "\uff8d\064\uff8d\065\uff8d\066\uff8d\100\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\115\uff8d\122\uff8d\131\uff8d\132\uff8d\133\uff8d\134" +
    "\uff8d\136\uff8d\143\uff8d\144\uff8d\145\uff8d\153\uff8d\154\uff8d" +
    "\155\207\156\175\157\uff8d\161\211\001\002\000\146\003" +
    "\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\013\uff99\015\uff99\016\uff99\020\uff99\022\uff99\024\uff99\025" +
    "\205\026\176\027\214\030\204\031\213\032\200\033\174" +
    "\034\uff99\037\uff99\045\uff99\051\uff99\053\uff99\054\uff99\057" +
    "\uff99\064\uff99\065\uff99\066\uff99\100\uff99\102\uff99\103\uff99" +
    "\104\uff99\115\uff99\122\uff99\131\uff99\132\uff99\133\uff99\134" +
    "\uff99\136\uff99\143\uff99\144\uff99\145\uff99\153\177\154\203" +
    "\155\207\156\175\157\206\161\211\001\002\000\146\003" +
    "\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\013\uff98\015\uff98\016\uff98\020\uff98\022\uff98\024\uff98\025" +
    "\205\026\176\027\214\030\204\031\213\032\200\033\174" +
    "\034\uff98\037\uff98\045\uff98\051\uff98\053\uff98\054\uff98\057" +
    "\uff98\064\uff98\065\uff98\066\uff98\100\uff98\102\uff98\103\uff98" +
    "\104\uff98\115\uff98\122\uff98\131\uff98\132\uff98\133\uff98\134" +
    "\uff98\136\uff98\143\202\144\uff98\145\uff98\153\177\154\203" +
    "\155\207\156\175\157\206\161\211\001\002\000\146\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\013\uff91\015\uff91\016\uff91\020\uff91\022\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\174" +
    "\034\uff91\037\uff91\045\uff91\051\uff91\053\uff91\054\uff91\057" +
    "\uff91\064\uff91\065\uff91\066\uff91\100\uff91\102\uff91\103\uff91" +
    "\104\uff91\115\uff91\122\uff91\131\uff91\132\uff91\133\uff91\134" +
    "\uff91\136\uff91\143\uff91\144\uff91\145\uff91\153\177\154\203" +
    "\155\207\156\175\157\uff91\161\211\001\002\000\146\003" +
    "\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\013\uff8e\015\uff8e\016\uff8e\020\uff8e\022\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\174" +
    "\034\uff8e\037\uff8e\045\uff8e\051\uff8e\053\uff8e\054\uff8e\057" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\100\uff8e\102\uff8e\103\uff8e" +
    "\104\uff8e\115\uff8e\122\uff8e\131\uff8e\132\uff8e\133\uff8e\134" +
    "\uff8e\136\uff8e\143\uff8e\144\uff8e\145\uff8e\153\uff8e\154\uff8e" +
    "\155\207\156\175\157\uff8e\161\211\001\002\000\146\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\013\uff93\015\uff93\016\uff93\020\uff93\022\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\214\030\204\031\213\032\200\033\174" +
    "\034\uff93\037\uff93\045\uff93\051\uff93\053\uff93\054\uff93\057" +
    "\uff93\064\uff93\065\uff93\066\uff93\100\uff93\102\uff93\103\uff93" +
    "\104\uff93\115\uff93\122\uff93\131\uff93\132\uff93\133\uff93\134" +
    "\uff93\136\uff93\143\uff93\144\uff93\145\uff93\153\177\154\203" +
    "\155\207\156\175\157\uff93\161\211\001\002\000\146\003" +
    "\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\013\uff8b\015\uff8b\016\uff8b\020\uff8b\022\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\174" +
    "\034\uff8b\037\uff8b\045\uff8b\051\uff8b\053\uff8b\054\uff8b\057" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\100\uff8b\102\uff8b\103\uff8b" +
    "\104\uff8b\115\uff8b\122\uff8b\131\uff8b\132\uff8b\133\uff8b\134" +
    "\uff8b\136\uff8b\143\uff8b\144\uff8b\145\uff8b\153\uff8b\154\uff8b" +
    "\155\uff8b\156\uff8b\157\uff8b\161\uff8b\001\002\000\146\003" +
    "\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\013\uff89\015\uff89\016\uff89\020\uff89\022\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\037\uff89\045\uff89\051\uff89\053\uff89\054\uff89\057" +
    "\uff89\064\uff89\065\uff89\066\uff89\100\uff89\102\uff89\103\uff89" +
    "\104\uff89\115\uff89\122\uff89\131\uff89\132\uff89\133\uff89\134" +
    "\uff89\136\uff89\143\uff89\144\uff89\145\uff89\153\uff89\154\uff89" +
    "\155\uff89\156\uff89\157\uff89\161\uff89\001\002\000\004\016" +
    "\236\001\002\000\004\015\237\001\002\000\146\003\uff7a" +
    "\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\013" +
    "\uff7a\015\uff7a\016\uff7a\020\uff7a\022\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\037\uff7a\045\uff7a\051\uff7a\053\uff7a\054\uff7a\057\uff7a" +
    "\064\uff7a\065\uff7a\066\uff7a\100\uff7a\102\uff7a\103\uff7a\104" +
    "\uff7a\115\uff7a\122\uff7a\131\uff7a\132\uff7a\133\uff7a\134\uff7a" +
    "\136\uff7a\143\uff7a\144\uff7a\145\uff7a\153\uff7a\154\uff7a\155" +
    "\uff7a\156\uff7a\157\uff7a\161\uff7a\001\002\000\160\003\uff6d" +
    "\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\013" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\uff6d\034\uff6d\037\uff6d\045\uff6d\051\uff6d\053\uff6d" +
    "\054\uff6d\057\uff6d\064\uff6d\065\uff6d\066\uff6d\100\uff6d\102" +
    "\uff6d\103\uff6d\104\uff6d\115\uff6d\122\uff6d\131\uff6d\132\uff6d" +
    "\133\uff6d\134\uff6d\136\uff6d\137\uff6d\140\uff6d\141\uff6d\143" +
    "\uff6d\144\uff6d\145\uff6d\153\uff6d\154\uff6d\155\uff6d\156\uff6d" +
    "\157\uff6d\161\uff6d\001\002\000\150\003\uff7e\004\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e\015\uff7e" +
    "\016\uff7e\020\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e\027" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\037\uff7e" +
    "\045\uff7e\051\uff7e\053\uff7e\054\uff7e\057\uff7e\064\uff7e\065" +
    "\uff7e\066\uff7e\100\uff7e\102\uff7e\103\uff7e\104\uff7e\115\uff7e" +
    "\122\uff7e\131\uff7e\132\uff7e\133\uff7e\134\uff7e\136\uff7e\141" +
    "\242\143\uff7e\144\uff7e\145\uff7e\153\uff7e\154\uff7e\155\uff7e" +
    "\156\uff7e\157\uff7e\161\uff7e\001\002\000\016\004\030\005" +
    "\122\006\007\007\066\010\074\016\240\001\002\000\160" +
    "\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011" +
    "\uff72\013\uff72\015\uff72\016\uff72\017\141\020\uff72\021\uff72" +
    "\022\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\037\uff72\045\uff72\051\uff72" +
    "\053\uff72\054\uff72\057\uff72\064\uff72\065\uff72\066\uff72\100" +
    "\uff72\102\uff72\103\uff72\104\uff72\115\uff72\122\uff72\131\uff72" +
    "\132\uff72\133\uff72\134\uff72\136\uff72\137\uff72\140\uff72\141" +
    "\uff72\143\uff72\144\uff72\145\uff72\153\uff72\154\uff72\155\uff72" +
    "\156\uff72\157\uff72\161\uff72\001\002\000\060\004\030\005" +
    "\122\006\007\007\066\010\074\014\171\015\uffa4\016\164" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\112" +
    "\150\142\147\154\161\155\165\162\145\163\155\164\166" +
    "\165\146\166\151\001\002\000\004\015\252\001\002\000" +
    "\046\015\uffa2\024\uffa2\025\205\026\176\027\214\030\204" +
    "\031\213\032\200\033\174\057\210\143\202\144\201\153" +
    "\177\154\203\155\207\156\175\157\206\161\211\001\002" +
    "\000\006\015\uffa5\024\250\001\002\000\056\004\030\005" +
    "\122\006\007\007\066\010\074\014\171\016\164\035\163" +
    "\104\004\105\160\106\162\107\153\110\170\112\150\142" +
    "\147\154\161\155\165\162\145\163\155\164\166\165\146" +
    "\166\151\001\002\000\046\015\uffa3\024\uffa3\025\205\026" +
    "\176\027\214\030\204\031\213\032\200\033\174\057\210" +
    "\143\202\144\201\153\177\154\203\155\207\156\175\157" +
    "\206\161\211\001\002\000\146\003\uff4d\004\uff4d\005\uff4d" +
    "\006\uff4d\007\uff4d\010\uff4d\011\uff4d\013\uff4d\015\uff4d\016" +
    "\uff4d\020\uff4d\022\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\037\uff4d\045" +
    "\uff4d\051\uff4d\053\uff4d\054\uff4d\057\uff4d\064\uff4d\065\uff4d" +
    "\066\uff4d\100\uff4d\102\uff4d\103\uff4d\104\uff4d\115\uff4d\122" +
    "\uff4d\131\uff4d\132\uff4d\133\uff4d\134\uff4d\136\uff4d\143\uff4d" +
    "\144\uff4d\145\uff4d\153\uff4d\154\uff4d\155\uff4d\156\uff4d\157" +
    "\uff4d\161\uff4d\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\044\015\255\025\205\026\176\027\214\030\204" +
    "\031\213\032\200\033\174\057\210\143\202\144\201\153" +
    "\177\154\203\155\207\156\175\157\206\161\211\001\002" +
    "\000\146\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\013\uff78\015\uff78\016\uff78\020\uff78\022\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\037\uff78\045\uff78\051\uff78\053\uff78" +
    "\054\uff78\057\uff78\064\uff78\065\uff78\066\uff78\100\uff78\102" +
    "\uff78\103\uff78\104\uff78\115\uff78\122\uff78\131\uff78\132\uff78" +
    "\133\uff78\134\uff78\136\uff78\143\uff78\144\uff78\145\uff78\153" +
    "\uff78\154\uff78\155\uff78\156\uff78\157\uff78\161\uff78\001\002" +
    "\000\146\003\uff88\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\013\uff88\015\uff88\016\uff88\020\uff88\022\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\033\174\034\uff88\037\uff88\045\uff88\051\uff88\053\uff88" +
    "\054\uff88\057\uff88\064\uff88\065\uff88\066\uff88\100\uff88\102" +
    "\uff88\103\uff88\104\uff88\115\uff88\122\uff88\131\uff88\132\uff88" +
    "\133\uff88\134\uff88\136\uff88\143\uff88\144\uff88\145\uff88\153" +
    "\uff88\154\uff88\155\207\156\175\157\uff88\161\211\001\002" +
    "\000\056\004\030\005\122\006\007\007\066\010\074\014" +
    "\171\016\164\035\163\104\004\105\160\106\162\107\153" +
    "\110\170\112\150\142\147\154\161\155\165\162\145\163" +
    "\155\164\166\165\146\166\151\001\002\000\044\015\261" +
    "\025\205\026\176\027\214\030\204\031\213\032\200\033" +
    "\174\057\210\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\146\003\uff7c\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\013\uff7c" +
    "\015\uff7c\016\uff7c\020\uff7c\022\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\037\uff7c\045\uff7c\051\uff7c\053\uff7c\054\uff7c\057\uff7c\064" +
    "\uff7c\065\uff7c\066\uff7c\100\uff7c\102\uff7c\103\uff7c\104\uff7c" +
    "\115\uff7c\122\uff7c\131\uff7c\132\uff7c\133\uff7c\134\uff7c\136" +
    "\uff7c\143\uff7c\144\uff7c\145\uff7c\153\uff7c\154\uff7c\155\uff7c" +
    "\156\uff7c\157\uff7c\161\uff7c\001\002\000\160\003\uff9b\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\037\uff9b\045\uff9b\051\uff9b\053\uff9b\054" +
    "\uff9b\057\uff9b\064\uff9b\065\uff9b\066\uff9b\100\uff9b\102\uff9b" +
    "\103\uff9b\104\uff9b\115\uff9b\122\uff9b\131\uff9b\132\uff9b\133" +
    "\uff9b\134\uff9b\136\uff9b\137\uff9b\140\uff9b\141\uff9b\143\uff9b" +
    "\144\uff9b\145\uff9b\153\uff9b\154\uff9b\155\uff9b\156\uff9b\157" +
    "\uff9b\161\uff9b\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\044\015\265\025\205\026\176\027\214\030\204" +
    "\031\213\032\200\033\174\057\210\143\202\144\201\153" +
    "\177\154\203\155\207\156\175\157\206\161\211\001\002" +
    "\000\146\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010" +
    "\uff77\011\uff77\013\uff77\015\uff77\016\uff77\020\uff77\022\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032" +
    "\uff77\033\uff77\034\uff77\037\uff77\045\uff77\051\uff77\053\uff77" +
    "\054\uff77\057\uff77\064\uff77\065\uff77\066\uff77\100\uff77\102" +
    "\uff77\103\uff77\104\uff77\115\uff77\122\uff77\131\uff77\132\uff77" +
    "\133\uff77\134\uff77\136\uff77\143\uff77\144\uff77\145\uff77\153" +
    "\uff77\154\uff77\155\uff77\156\uff77\157\uff77\161\uff77\001\002" +
    "\000\016\004\030\005\122\006\007\007\066\010\074\016" +
    "\271\001\002\000\146\003\uff74\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\013\uff74\015\uff74\016\uff74\020" +
    "\uff74\022\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\033\uff74\034\uff74\037\uff74\045\uff74\051" +
    "\uff74\053\uff74\054\uff74\057\uff74\064\uff74\065\uff74\066\uff74" +
    "\100\uff74\102\uff74\103\uff74\104\uff74\115\uff74\122\uff74\131" +
    "\uff74\132\uff74\133\uff74\134\uff74\136\uff74\143\uff74\144\uff74" +
    "\145\uff74\153\uff74\154\uff74\155\uff74\156\uff74\157\uff74\161" +
    "\uff74\001\002\000\146\003\uff73\004\uff73\005\uff73\006\uff73" +
    "\007\uff73\010\uff73\011\uff73\013\uff73\015\uff73\016\uff73\020" +
    "\uff73\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\037\uff73\045\uff73\051" +
    "\uff73\053\uff73\054\uff73\057\uff73\064\uff73\065\uff73\066\uff73" +
    "\100\uff73\102\uff73\103\uff73\104\uff73\115\uff73\122\uff73\131" +
    "\uff73\132\uff73\133\uff73\134\uff73\136\uff73\143\uff73\144\uff73" +
    "\145\uff73\153\uff73\154\uff73\155\uff73\156\uff73\157\uff73\161" +
    "\uff73\001\002\000\162\003\uff6d\004\uff6d\005\uff6d\006\uff6d" +
    "\007\uff6d\010\uff6d\011\uff6d\013\uff6d\014\272\015\uff6d\016" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\037\uff6d\045\uff6d\051\uff6d\053\uff6d\054\uff6d\057\uff6d" +
    "\064\uff6d\065\uff6d\066\uff6d\100\uff6d\102\uff6d\103\uff6d\104" +
    "\uff6d\115\uff6d\122\uff6d\131\uff6d\132\uff6d\133\uff6d\134\uff6d" +
    "\136\uff6d\137\uff6d\140\uff6d\141\uff6d\143\uff6d\144\uff6d\145" +
    "\uff6d\153\uff6d\154\uff6d\155\uff6d\156\uff6d\157\uff6d\161\uff6d" +
    "\001\002\000\060\004\030\005\122\006\007\007\066\010" +
    "\074\014\171\015\uffa4\016\164\035\163\104\004\105\160" +
    "\106\162\107\153\110\170\112\150\142\147\154\161\155" +
    "\165\162\145\163\155\164\166\165\146\166\151\001\002" +
    "\000\004\015\274\001\002\000\146\003\uff4e\004\uff4e\005" +
    "\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\013\uff4e\015\uff4e" +
    "\016\uff4e\020\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\037\uff4e" +
    "\045\uff4e\051\uff4e\053\uff4e\054\uff4e\057\uff4e\064\uff4e\065" +
    "\uff4e\066\uff4e\100\uff4e\102\uff4e\103\uff4e\104\uff4e\115\uff4e" +
    "\122\uff4e\131\uff4e\132\uff4e\133\uff4e\134\uff4e\136\uff4e\143" +
    "\uff4e\144\uff4e\145\uff4e\153\uff4e\154\uff4e\155\uff4e\156\uff4e" +
    "\157\uff4e\161\uff4e\001\002\000\056\004\030\005\122\006" +
    "\007\007\066\010\074\014\171\016\164\035\163\104\004" +
    "\105\160\106\162\107\153\110\170\112\150\142\147\154" +
    "\161\155\165\162\145\163\155\164\166\165\146\166\151" +
    "\001\002\000\044\024\277\025\205\026\176\027\214\030" +
    "\204\031\213\032\200\033\174\057\210\143\202\144\201" +
    "\153\177\154\203\155\207\156\175\157\206\161\211\001" +
    "\002\000\056\004\030\005\122\006\007\007\066\010\074" +
    "\014\171\016\164\035\163\104\004\105\160\106\162\107" +
    "\153\110\170\112\150\142\147\154\161\155\165\162\145" +
    "\163\155\164\166\165\146\166\151\001\002\000\044\015" +
    "\301\025\205\026\176\027\214\030\204\031\213\032\200" +
    "\033\174\057\210\143\202\144\201\153\177\154\203\155" +
    "\207\156\175\157\206\161\211\001\002\000\146\003\uff76" +
    "\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\013" +
    "\uff76\015\uff76\016\uff76\020\uff76\022\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034" +
    "\uff76\037\uff76\045\uff76\051\uff76\053\uff76\054\uff76\057\uff76" +
    "\064\uff76\065\uff76\066\uff76\100\uff76\102\uff76\103\uff76\104" +
    "\uff76\115\uff76\122\uff76\131\uff76\132\uff76\133\uff76\134\uff76" +
    "\136\uff76\143\uff76\144\uff76\145\uff76\153\uff76\154\uff76\155" +
    "\uff76\156\uff76\157\uff76\161\uff76\001\002\000\146\003\uff95" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\013" +
    "\uff95\015\uff95\016\uff95\020\uff95\022\uff95\024\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\037\uff95\045\uff95\051\uff95\053\uff95\054\uff95\057\uff95" +
    "\064\uff95\065\uff95\066\uff95\100\uff95\102\uff95\103\uff95\104" +
    "\uff95\115\uff95\122\uff95\131\uff95\132\uff95\133\uff95\134\uff95" +
    "\136\uff95\143\uff95\144\uff95\145\uff95\153\uff95\154\uff95\155" +
    "\uff95\156\uff95\157\uff95\161\uff95\001\002\000\044\020\304" +
    "\025\205\026\176\027\214\030\204\031\213\032\200\033" +
    "\174\057\210\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\160\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\013\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\037\uff9a\045\uff9a\051\uff9a\053\uff9a\054" +
    "\uff9a\057\uff9a\064\uff9a\065\uff9a\066\uff9a\100\uff9a\102\uff9a" +
    "\103\uff9a\104\uff9a\115\uff9a\122\uff9a\131\uff9a\132\uff9a\133" +
    "\uff9a\134\uff9a\136\uff9a\137\uff9a\140\uff9a\141\uff9a\143\uff9a" +
    "\144\uff9a\145\uff9a\153\uff9a\154\uff9a\155\uff9a\156\uff9a\157" +
    "\uff9a\161\uff9a\001\002\000\100\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\016\uffe5\022" +
    "\uffe5\034\uffe5\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051\uffe5" +
    "\053\uffe5\054\uffe5\064\uffe5\065\uffe5\066\uffe5\100\uffe5\103" +
    "\uffe5\104\uffe5\115\uffe5\122\uffe5\131\uffe5\132\uffe5\133\uffe5" +
    "\134\uffe5\145\uffe5\001\002\000\100\002\uffce\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\013\uffce\016\uffce" +
    "\022\uffce\034\uffce\037\uffce\041\uffce\044\uffce\045\uffce\051" +
    "\uffce\053\uffce\054\uffce\064\uffce\065\uffce\066\uffce\100\uffce" +
    "\103\uffce\104\uffce\115\uffce\122\uffce\131\uffce\132\uffce\133" +
    "\uffce\134\uffce\145\uffce\001\002\000\016\004\030\005\122" +
    "\006\007\007\066\010\074\016\240\001\002\000\006\021" +
    "\373\141\242\001\002\000\004\011\u0100\001\002\000\004" +
    "\011\357\001\002\000\012\016\316\017\uff70\021\uff70\141" +
    "\uff70\001\002\000\006\011\uffbb\024\uffbb\001\002\000\006" +
    "\011\uffbd\024\355\001\002\000\012\011\uffba\017\320\021" +
    "\321\024\uffba\001\002\000\010\011\uffb8\021\336\024\uffb8" +
    "\001\002\000\060\004\030\005\122\006\007\007\066\010" +
    "\074\014\171\016\164\020\335\035\163\104\004\105\160" +
    "\106\162\107\153\110\170\112\150\142\147\154\161\155" +
    "\165\162\145\163\155\164\166\165\146\166\151\001\002" +
    "\000\060\004\030\005\122\006\007\007\066\010\074\014" +
    "\171\016\164\035\163\104\004\105\160\106\162\107\153" +
    "\110\170\111\331\112\150\142\147\154\161\155\165\162" +
    "\145\163\155\164\166\165\146\166\151\001\002\000\014" +
    "\011\uffb4\015\uffb4\017\324\021\uffb4\024\uffb4\001\002\000" +
    "\014\011\uffb3\015\uffb3\017\143\021\uffb3\024\uffb3\001\002" +
    "\000\004\020\325\001\002\000\016\011\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\024\uffb2\001\002\000\006\011\uffb9" +
    "\024\uffb9\001\002\000\140\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\015\uffa8\016\uffa8\022\uffa8" +
    "\024\uffa8\025\205\026\176\027\214\030\204\031\213\032" +
    "\200\033\174\034\uffa8\037\uffa8\045\uffa8\051\uffa8\053\uffa8" +
    "\054\uffa8\057\210\064\uffa8\065\uffa8\066\uffa8\100\uffa8\102" +
    "\uffa8\103\uffa8\104\uffa8\115\uffa8\122\uffa8\131\uffa8\132\uffa8" +
    "\133\uffa8\134\uffa8\143\202\144\201\145\uffa8\153\177\154" +
    "\203\155\207\156\175\157\206\161\211\001\002\000\100" +
    "\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\015\uffa7\016\uffa7\022\uffa7\024\uffa7\034\uffa7\037\uffa7" +
    "\045\uffa7\051\uffa7\053\uffa7\054\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\100\uffa7\102\uffa7\103\uffa7\104\uffa7\115\uffa7\122\uffa7" +
    "\131\uffa7\132\uffa7\133\uffa7\134\uffa7\145\uffa7\001\002\000" +
    "\004\014\332\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\044\015\334\025\205\026\176\027\214\030\204" +
    "\031\213\032\200\033\174\057\210\143\202\144\201\153" +
    "\177\154\203\155\207\156\175\157\206\161\211\001\002" +
    "\000\100\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\015\uffa6\016\uffa6\022\uffa6\024\uffa6\034\uffa6" +
    "\037\uffa6\045\uffa6\051\uffa6\053\uffa6\054\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\100\uffa6\102\uffa6\103\uffa6\104\uffa6\115\uffa6" +
    "\122\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\145\uffa6\001" +
    "\002\000\016\011\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1" +
    "\024\uffb1\001\002\000\060\004\030\005\122\006\007\007" +
    "\066\010\074\012\342\014\171\016\164\035\163\104\004" +
    "\105\160\106\162\107\153\110\170\112\150\142\147\154" +
    "\161\155\165\162\145\163\155\164\166\165\146\166\151" +
    "\001\002\000\006\011\uffb6\024\uffb6\001\002\000\006\011" +
    "\uffb7\024\uffb7\001\002\000\046\011\uffb5\024\uffb5\025\205" +
    "\026\176\027\214\030\204\031\213\032\200\033\174\057" +
    "\210\143\202\144\201\153\177\154\203\155\207\156\175" +
    "\157\206\161\211\001\002\000\062\004\030\005\122\006" +
    "\007\007\066\010\074\012\344\014\171\016\164\017\141" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\112" +
    "\150\142\147\154\161\155\165\162\145\163\155\164\166" +
    "\165\146\166\151\001\002\000\006\013\352\024\353\001" +
    "\002\000\060\004\030\005\122\006\007\007\066\010\074" +
    "\012\344\014\171\016\164\035\163\104\004\105\160\106" +
    "\162\107\153\110\170\112\150\142\147\154\161\155\165" +
    "\162\145\163\155\164\166\165\146\166\151\001\002\000" +
    "\046\013\uffac\024\uffac\025\205\026\176\027\214\030\204" +
    "\031\213\032\200\033\174\057\210\143\202\144\201\153" +
    "\177\154\203\155\207\156\175\157\206\161\211\001\002" +
    "\000\006\013\351\017\143\001\002\000\006\013\uffab\024" +
    "\uffab\001\002\000\006\013\uffad\024\uffad\001\002\000\076" +
    "\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\016\uffb0\022\uffb0\024\uffb0\034\uffb0\037\uffb0\045\uffb0" +
    "\051\uffb0\053\uffb0\054\uffb0\064\uffb0\065\uffb0\066\uffb0\100" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\115\uffb0\122\uffb0\131\uffb0" +
    "\132\uffb0\133\uffb0\134\uffb0\145\uffb0\001\002\000\010\011" +
    "\uffaf\013\uffaf\024\uffaf\001\002\000\060\004\030\005\122" +
    "\006\007\007\066\010\074\012\344\014\171\016\164\035" +
    "\163\104\004\105\160\106\162\107\153\110\170\112\150" +
    "\142\147\154\161\155\165\162\145\163\155\164\166\165" +
    "\146\166\151\001\002\000\006\013\uffae\024\uffae\001\002" +
    "\000\004\016\316\001\002\000\006\011\uffbc\024\uffbc\001" +
    "\002\000\056\004\030\005\122\006\007\007\066\010\074" +
    "\014\171\016\164\035\163\104\004\105\160\106\162\107" +
    "\153\110\170\112\150\142\147\154\161\155\165\162\145" +
    "\163\155\164\166\165\146\166\151\001\002\000\044\011" +
    "\361\025\205\026\176\027\214\030\204\031\213\032\200" +
    "\033\174\057\210\143\202\144\201\153\177\154\203\155" +
    "\207\156\175\157\206\161\211\001\002\000\016\004\030" +
    "\005\122\006\007\007\066\010\074\016\363\001\002\000" +
    "\004\015\uff40\001\002\000\014\017\141\021\uff6d\137\uff6d" +
    "\140\uff6d\141\uff6d\001\002\000\004\015\uff3d\001\002\000" +
    "\012\021\373\137\267\140\270\141\242\001\002\000\004" +
    "\015\371\001\002\000\004\015\uff3e\001\002\000\004\015" +
    "\uff3f\001\002\000\004\012\134\001\002\000\100\002\uff41" +
    "\003\uff41\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41\013" +
    "\uff41\016\uff41\022\uff41\034\uff41\037\uff41\041\uff41\044\uff41" +
    "\045\uff41\051\uff41\053\uff41\054\uff41\064\uff41\065\uff41\066" +
    "\uff41\100\uff41\103\uff41\104\uff41\115\uff41\122\uff41\131\uff41" +
    "\132\uff41\133\uff41\134\uff41\145\uff41\001\002\000\060\004" +
    "\030\005\122\006\007\007\066\010\074\014\171\016\164" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\111" +
    "\331\112\150\142\147\154\161\155\165\162\145\163\155" +
    "\164\166\165\146\166\151\001\002\000\006\011\uffaa\015" +
    "\uffaa\001\002\000\006\017\143\021\376\001\002\000\056" +
    "\004\030\005\122\006\007\007\066\010\074\014\171\016" +
    "\164\035\163\104\004\105\160\106\162\107\153\110\170" +
    "\112\150\142\147\154\161\155\165\162\145\163\155\164" +
    "\166\165\146\166\151\001\002\000\046\011\uffa9\015\uffa9" +
    "\025\205\026\176\027\214\030\204\031\213\032\200\033" +
    "\174\057\210\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\056\004\030\005" +
    "\122\006\007\007\066\010\074\014\171\016\164\035\163" +
    "\104\004\105\160\106\162\107\153\110\170\112\150\142" +
    "\147\154\161\155\165\162\145\163\155\164\166\165\146" +
    "\166\151\001\002\000\044\011\u0102\025\205\026\176\027" +
    "\214\030\204\031\213\032\200\033\174\057\210\143\202" +
    "\144\201\153\177\154\203\155\207\156\175\157\206\161" +
    "\211\001\002\000\016\004\030\005\122\006\007\007\066" +
    "\010\074\016\363\001\002\000\004\015\u0104\001\002\000" +
    "\004\012\134\001\002\000\100\002\uff42\003\uff42\004\uff42" +
    "\005\uff42\006\uff42\007\uff42\010\uff42\013\uff42\016\uff42\022" +
    "\uff42\034\uff42\037\uff42\041\uff42\044\uff42\045\uff42\051\uff42" +
    "\053\uff42\054\uff42\064\uff42\065\uff42\066\uff42\100\uff42\103" +
    "\uff42\104\uff42\115\uff42\122\uff42\131\uff42\132\uff42\133\uff42" +
    "\134\uff42\145\uff42\001\002\000\004\011\ufff3\001\002\000" +
    "\100\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\013\uffe7\016\uffe7\022\uffe7\034\uffe7\037\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\051\uffe7\053\uffe7\054\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\100\uffe7\103\uffe7\104\uffe7\115\uffe7\122" +
    "\uffe7\131\uffe7\132\uffe7\133\uffe7\134\uffe7\145\uffe7\001\002" +
    "\000\004\052\u0109\001\002\000\004\014\u010a\001\002\000" +
    "\056\004\030\005\122\006\007\007\066\010\074\014\171" +
    "\016\164\035\163\104\004\105\160\106\162\107\153\110" +
    "\170\112\150\142\147\154\161\155\165\162\145\163\155" +
    "\164\166\165\146\166\151\001\002\000\044\015\u010c\025" +
    "\205\026\176\027\214\030\204\031\213\032\200\033\174" +
    "\057\210\143\202\144\201\153\177\154\203\155\207\156" +
    "\175\157\206\161\211\001\002\000\004\011\uff43\001\002" +
    "\000\056\004\030\005\122\006\007\007\066\010\074\014" +
    "\171\016\164\035\163\104\004\105\160\106\162\107\153" +
    "\110\170\112\150\142\147\154\161\155\165\162\145\163" +
    "\155\164\166\165\146\166\151\001\002\000\044\015\u010f" +
    "\025\205\026\176\027\214\030\204\031\213\032\200\033" +
    "\174\057\210\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\004\012\134\001" +
    "\002\000\102\002\uff52\003\uff52\004\uff52\005\uff52\006\uff52" +
    "\007\uff52\010\uff52\013\uff52\016\uff52\022\uff52\034\uff52\037" +
    "\uff52\041\uff52\044\uff52\045\uff52\051\uff52\053\uff52\054\uff52" +
    "\064\uff52\065\uff52\066\uff52\100\uff52\103\uff52\104\uff52\115" +
    "\uff52\122\uff52\131\uff52\132\uff52\133\uff52\134\uff52\145\uff52" +
    "\147\u0111\001\002\000\006\012\134\145\114\001\002\000" +
    "\100\002\uff51\003\uff51\004\uff51\005\uff51\006\uff51\007\uff51" +
    "\010\uff51\013\uff51\016\uff51\022\uff51\034\uff51\037\uff51\041" +
    "\uff51\044\uff51\045\uff51\051\uff51\053\uff51\054\uff51\064\uff51" +
    "\065\uff51\066\uff51\100\uff51\103\uff51\104\uff51\115\uff51\122" +
    "\uff51\131\uff51\132\uff51\133\uff51\134\uff51\145\uff51\001\002" +
    "\000\100\002\uff4f\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007" +
    "\uff4f\010\uff4f\013\uff4f\016\uff4f\022\uff4f\034\uff4f\037\uff4f" +
    "\041\uff4f\044\uff4f\045\uff4f\051\uff4f\053\uff4f\054\uff4f\064" +
    "\uff4f\065\uff4f\066\uff4f\100\uff4f\103\uff4f\104\uff4f\115\uff4f" +
    "\122\uff4f\131\uff4f\132\uff4f\133\uff4f\134\uff4f\145\uff4f\001" +
    "\002\000\100\002\uff50\003\uff50\004\uff50\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\013\uff50\016\uff50\022\uff50\034\uff50\037" +
    "\uff50\041\uff50\044\uff50\045\uff50\051\uff50\053\uff50\054\uff50" +
    "\064\uff50\065\uff50\066\uff50\100\uff50\103\uff50\104\uff50\115" +
    "\uff50\122\uff50\131\uff50\132\uff50\133\uff50\134\uff50\145\uff50" +
    "\001\002\000\100\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\013\uffcf\016\uffcf\022\uffcf\034\uffcf" +
    "\037\uffcf\041\uffcf\044\uffcf\045\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\100\uffcf\103\uffcf\104\uffcf" +
    "\115\uffcf\122\uffcf\131\uffcf\132\uffcf\133\uffcf\134\uffcf\145" +
    "\uffcf\001\002\000\100\002\uffdc\003\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\013\uffdc\016\uffdc\022\uffdc\034" +
    "\uffdc\037\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\053\uffdc" +
    "\054\uffdc\064\uffdc\065\uffdc\066\uffdc\100\uffdc\103\uffdc\104" +
    "\uffdc\115\uffdc\122\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc" +
    "\145\uffdc\001\002\000\072\003\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\016\ufff9\022\ufff9\034\ufff9\037\ufff9" +
    "\045\ufff9\051\ufff9\053\ufff9\054\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9\115\ufff9\122\ufff9" +
    "\131\ufff9\132\ufff9\133\ufff9\134\ufff9\145\ufff9\001\002\000" +
    "\056\004\030\005\122\006\007\007\066\010\074\014\171" +
    "\016\164\035\163\104\004\105\160\106\162\107\153\110" +
    "\170\112\150\142\147\154\161\155\165\162\145\163\155" +
    "\164\166\165\146\166\151\001\002\000\044\015\u011a\025" +
    "\205\026\176\027\214\030\204\031\213\032\200\033\174" +
    "\057\210\143\202\144\201\153\177\154\203\155\207\156" +
    "\175\157\206\161\211\001\002\000\004\012\u011b\001\002" +
    "\000\004\041\u011d\001\002\000\010\013\u0122\041\u011d\044" +
    "\u0124\001\002\000\056\004\030\005\122\006\007\007\066" +
    "\010\074\014\171\016\164\035\163\104\004\105\160\106" +
    "\162\107\153\110\170\112\150\142\147\154\161\155\165" +
    "\162\145\163\155\164\166\165\146\166\151\001\002\000" +
    "\010\013\uff46\041\uff46\044\uff46\001\002\000\044\025\205" +
    "\026\176\027\214\030\204\031\213\032\200\033\174\057" +
    "\210\136\u0120\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\070\003\104\004" +
    "\030\005\122\006\007\007\066\010\074\016\041\022\006" +
    "\034\015\037\076\045\116\051\033\053\071\054\102\064" +
    "\043\065\051\066\017\100\045\103\023\104\004\115\061" +
    "\122\105\131\022\132\121\133\020\134\107\145\114\001" +
    "\002\000\076\003\104\004\030\005\122\006\007\007\066" +
    "\010\074\013\uff45\016\041\022\006\034\015\037\076\041" +
    "\uff45\044\uff45\045\116\051\033\053\071\054\102\064\043" +
    "\065\051\066\017\100\045\103\023\104\004\115\061\122" +
    "\105\131\022\132\121\133\020\134\107\145\114\001\002" +
    "\000\100\002\uff49\003\uff49\004\uff49\005\uff49\006\uff49\007" +
    "\uff49\010\uff49\013\uff49\016\uff49\022\uff49\034\uff49\037\uff49" +
    "\041\uff49\044\uff49\045\uff49\051\uff49\053\uff49\054\uff49\064" +
    "\uff49\065\uff49\066\uff49\100\uff49\103\uff49\104\uff49\115\uff49" +
    "\122\uff49\131\uff49\132\uff49\133\uff49\134\uff49\145\uff49\001" +
    "\002\000\004\013\u0128\001\002\000\004\136\u0126\001\002" +
    "\000\010\013\uff47\041\uff47\044\uff47\001\002\000\070\003" +
    "\104\004\030\005\122\006\007\007\066\010\074\016\041" +
    "\022\006\034\015\037\076\045\116\051\033\053\071\054" +
    "\102\064\043\065\051\066\017\100\045\103\023\104\004" +
    "\115\061\122\105\131\022\132\121\133\020\134\107\145" +
    "\114\001\002\000\072\003\104\004\030\005\122\006\007" +
    "\007\066\010\074\013\uff44\016\041\022\006\034\015\037" +
    "\076\045\116\051\033\053\071\054\102\064\043\065\051" +
    "\066\017\100\045\103\023\104\004\115\061\122\105\131" +
    "\022\132\121\133\020\134\107\145\114\001\002\000\100" +
    "\002\uff48\003\uff48\004\uff48\005\uff48\006\uff48\007\uff48\010" +
    "\uff48\013\uff48\016\uff48\022\uff48\034\uff48\037\uff48\041\uff48" +
    "\044\uff48\045\uff48\051\uff48\053\uff48\054\uff48\064\uff48\065" +
    "\uff48\066\uff48\100\uff48\103\uff48\104\uff48\115\uff48\122\uff48" +
    "\131\uff48\132\uff48\133\uff48\134\uff48\145\uff48\001\002\000" +
    "\072\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\016\ufffc\022\ufffc\034\ufffc\037\ufffc\045\ufffc\051\ufffc\053" +
    "\ufffc\054\ufffc\064\ufffc\065\ufffc\066\ufffc\100\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\115\ufffc\122\ufffc\131\ufffc\132\ufffc\133" +
    "\ufffc\134\ufffc\145\ufffc\001\002\000\056\004\030\005\122" +
    "\006\007\007\066\010\074\014\171\016\164\035\163\104" +
    "\004\105\160\106\162\107\153\110\170\112\150\142\147" +
    "\154\161\155\165\162\145\163\155\164\166\165\146\166" +
    "\151\001\002\000\044\015\u012c\025\205\026\176\027\214" +
    "\030\204\031\213\032\200\033\174\057\210\143\202\144" +
    "\201\153\177\154\203\155\207\156\175\157\206\161\211" +
    "\001\002\000\004\011\uffca\001\002\000\004\011\ufff4\001" +
    "\002\000\100\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\013\uffea\016\uffea\022\uffea\034\uffea\037" +
    "\uffea\041\uffea\044\uffea\045\uffea\051\uffea\053\uffea\054\uffea" +
    "\064\uffea\065\uffea\066\uffea\100\uffea\103\uffea\104\uffea\115" +
    "\uffea\122\uffea\131\uffea\132\uffea\133\uffea\134\uffea\145\uffea" +
    "\001\002\000\100\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\013\uffd5\016\uffd5\022\uffd5\034\uffd5" +
    "\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051\uffd5\053\uffd5\054" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\100\uffd5\103\uffd5\104\uffd5" +
    "\115\uffd5\122\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\145" +
    "\uffd5\001\002\000\056\004\030\005\122\006\007\007\066" +
    "\010\074\014\171\016\164\035\163\104\004\105\160\106" +
    "\162\107\153\110\170\112\150\142\147\154\161\155\165" +
    "\162\145\163\155\164\166\165\146\166\151\001\002\000" +
    "\044\024\u0132\025\205\026\176\027\214\030\204\031\213" +
    "\032\200\033\174\057\210\143\202\144\201\153\177\154" +
    "\203\155\207\156\175\157\206\161\211\001\002\000\004" +
    "\016\u0133\001\002\000\004\015\u0134\001\002\000\004\011" +
    "\uffcc\001\002\000\100\002\uffeb\003\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\013\uffeb\016\uffeb\022\uffeb\034" +
    "\uffeb\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\053\uffeb" +
    "\054\uffeb\064\uffeb\065\uffeb\066\uffeb\100\uffeb\103\uffeb\104" +
    "\uffeb\115\uffeb\122\uffeb\131\uffeb\132\uffeb\133\uffeb\134\uffeb" +
    "\145\uffeb\001\002\000\100\002\uffdf\003\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\016\uffdf\022\uffdf" +
    "\034\uffdf\037\uffdf\041\uffdf\044\uffdf\045\uffdf\051\uffdf\053" +
    "\uffdf\054\uffdf\064\uffdf\065\uffdf\066\uffdf\100\uffdf\103\uffdf" +
    "\104\uffdf\115\uffdf\122\uffdf\131\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\145\uffdf\001\002\000\100\002\uffe8\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\016\uffe8\022" +
    "\uffe8\034\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051\uffe8" +
    "\053\uffe8\054\uffe8\064\uffe8\065\uffe8\066\uffe8\100\uffe8\103" +
    "\uffe8\104\uffe8\115\uffe8\122\uffe8\131\uffe8\132\uffe8\133\uffe8" +
    "\134\uffe8\145\uffe8\001\002\000\004\162\u0139\001\002\000" +
    "\006\015\u013b\024\u013a\001\002\000\056\004\030\005\122" +
    "\006\007\007\066\010\074\014\171\016\164\035\163\104" +
    "\004\105\160\106\162\107\153\110\170\112\150\142\147" +
    "\154\161\155\165\162\145\163\155\164\166\165\146\166" +
    "\151\001\002\000\004\011\uffc8\001\002\000\006\015\u013f" +
    "\024\u013e\001\002\000\046\015\uff9c\024\uff9c\025\205\026" +
    "\176\027\214\030\204\031\213\032\200\033\174\057\210" +
    "\143\202\144\201\153\177\154\203\155\207\156\175\157" +
    "\206\161\211\001\002\000\056\004\030\005\122\006\007" +
    "\007\066\010\074\014\171\016\164\035\163\104\004\105" +
    "\160\106\162\107\153\110\170\112\150\142\147\154\161" +
    "\155\165\162\145\163\155\164\166\165\146\166\151\001" +
    "\002\000\004\011\uffc7\001\002\000\046\015\uff9d\024\uff9d" +
    "\025\205\026\176\027\214\030\204\031\213\032\200\033" +
    "\174\057\210\143\202\144\201\153\177\154\203\155\207" +
    "\156\175\157\206\161\211\001\002\000\100\002\uffe1\003" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1" +
    "\016\uffe1\022\uffe1\034\uffe1\037\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\051\uffe1\053\uffe1\054\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\100\uffe1\103\uffe1\104\uffe1\115\uffe1\122\uffe1\131\uffe1\132" +
    "\uffe1\133\uffe1\134\uffe1\145\uffe1\001\002\000\072\002\000" +
    "\003\104\004\030\005\122\006\007\007\066\010\074\016" +
    "\041\022\006\034\015\037\076\045\116\051\033\053\071" +
    "\054\102\064\043\065\051\066\017\100\045\103\023\104" +
    "\004\115\061\122\105\131\022\132\121\133\020\134\107" +
    "\145\114\001\002\000\072\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\016\uffc5\022\uffc5\034\uffc5\037\uffc5" +
    "\045\uffc5\051\uffc5\053\uffc5\054\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\100\uffc5\102\uffc5\103\uffc5\104\uffc5\115\uffc5\122\uffc5" +
    "\131\uffc5\132\uffc5\133\uffc5\134\uffc5\145\uffc5\001\002\000" +
    "\100\002\uffd7\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\013\uffd7\016\uffd7\022\uffd7\034\uffd7\037\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\053\uffd7\054\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\100\uffd7\103\uffd7\104\uffd7\115\uffd7\122" +
    "\uffd7\131\uffd7\132\uffd7\133\uffd7\134\uffd7\145\uffd7\001\002" +
    "\000\100\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\013\uffe6\016\uffe6\022\uffe6\034\uffe6\037\uffe6" +
    "\041\uffe6\044\uffe6\045\uffe6\051\uffe6\053\uffe6\054\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\100\uffe6\103\uffe6\104\uffe6\115\uffe6" +
    "\122\uffe6\131\uffe6\132\uffe6\133\uffe6\134\uffe6\145\uffe6\001" +
    "\002\000\100\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\016\uffdd\022\uffdd\034\uffdd\037" +
    "\uffdd\041\uffdd\044\uffdd\045\uffdd\051\uffdd\053\uffdd\054\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\100\uffdd\103\uffdd\104\uffdd\115" +
    "\uffdd\122\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\145\uffdd" +
    "\001\002\000\004\015\u0148\001\002\000\004\011\uffcb\001" +
    "\002\000\100\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\013\uffd8\016\uffd8\022\uffd8\034\uffd8\037" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\053\uffd8\054\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\100\uffd8\103\uffd8\104\uffd8\115" +
    "\uffd8\122\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8\145\uffd8" +
    "\001\002\000\100\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\013\uffd9\016\uffd9\022\uffd9\034\uffd9" +
    "\037\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\100\uffd9\103\uffd9\104\uffd9" +
    "\115\uffd9\122\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\145" +
    "\uffd9\001\002\000\072\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\016\uffc1\022\uffc1\034\uffc1\037\uffc1\045" +
    "\uffc1\051\uffc1\053\uffc1\054\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\100\uffc1\102\uffc1\103\uffc1\104\uffc1\115\uffc1\122\uffc1\131" +
    "\uffc1\132\uffc1\133\uffc1\134\uffc1\145\uffc1\001\002\000\062" +
    "\004\030\005\122\006\007\007\066\010\074\012\u014e\014" +
    "\171\016\164\035\163\104\004\105\160\106\162\107\153" +
    "\110\170\111\331\112\150\142\147\154\161\155\165\162" +
    "\145\163\155\164\166\165\146\166\151\001\002\000\072" +
    "\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\016" +
    "\uffbf\022\uffbf\034\uffbf\037\uffbf\045\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\064\uffbf\065\uffbf\066\uffbf\100\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\115\uffbf\122\uffbf\131\uffbf\132\uffbf\133\uffbf" +
    "\134\uffbf\145\uffbf\001\002\000\004\017\141\001\002\000" +
    "\072\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\016\uffbe\022\uffbe\034\uffbe\037\uffbe\045\uffbe\051\uffbe\053" +
    "\uffbe\054\uffbe\064\uffbe\065\uffbe\066\uffbe\100\uffbe\102\uffbe" +
    "\103\uffbe\104\uffbe\115\uffbe\122\uffbe\131\uffbe\132\uffbe\133" +
    "\uffbe\134\uffbe\145\uffbe\001\002\000\056\004\030\005\122" +
    "\006\007\007\066\010\074\014\171\016\164\035\163\104" +
    "\004\105\160\106\162\107\153\110\170\112\150\142\147" +
    "\154\161\155\165\162\145\163\155\164\166\165\146\166" +
    "\151\001\002\000\044\024\u0152\025\205\026\176\027\214" +
    "\030\204\031\213\032\200\033\174\057\210\143\202\144" +
    "\201\153\177\154\203\155\207\156\175\157\206\161\211" +
    "\001\002\000\056\004\030\005\122\006\007\007\066\010" +
    "\074\014\171\016\164\035\163\104\004\105\160\106\162" +
    "\107\153\110\170\112\150\142\147\154\161\155\165\162" +
    "\145\163\155\164\166\165\146\166\151\001\002\000\044" +
    "\015\u0154\025\205\026\176\027\214\030\204\031\213\032" +
    "\200\033\174\057\210\143\202\144\201\153\177\154\203" +
    "\155\207\156\175\157\206\161\211\001\002\000\004\011" +
    "\uffc6\001\002\000\004\020\335\001\002\000\006\016\u0165" +
    "\017\324\001\002\000\014\011\uffba\014\u0158\017\320\021" +
    "\321\024\uffba\001\002\000\024\004\030\005\122\006\007" +
    "\007\066\010\074\015\uff57\016\240\024\uff57\047\u015c\001" +
    "\002\000\006\015\uff58\024\uff58\001\002\000\006\015\u0163" +
    "\024\u0162\001\002\000\004\016\u0160\001\002\000\016\004" +
    "\030\005\122\006\007\007\066\010\074\016\240\001\002" +
    "\000\004\016\u015e\001\002\000\010\015\uff55\017\320\024" +
    "\uff55\001\002\000\006\015\uff53\024\uff53\001\002\000\010" +
    "\015\uff56\017\320\024\uff56\001\002\000\006\015\uff54\024" +
    "\uff54\001\002\000\020\004\030\005\122\006\007\007\066" +
    "\010\074\016\240\047\u015c\001\002\000\004\012\uff61\001" +
    "\002\000\006\015\uff59\024\uff59\001\002\000\004\014\u0166" +
    "\001\002\000\024\004\030\005\122\006\007\007\066\010" +
    "\074\015\uff57\016\240\024\uff57\047\u015c\001\002\000\006" +
    "\015\u0168\024\u0162\001\002\000\004\012\uff60\001\002\000" +
    "\004\011\ufff5\001\002\000\004\016\u016b\001\002\000\004" +
    "\015\u016c\001\002\000\004\011\uffee\001\002\000\072\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\016\ufffe" +
    "\022\ufffe\034\ufffe\037\ufffe\045\ufffe\051\ufffe\053\ufffe\054" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\100\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\115\ufffe\122\ufffe\131\ufffe\132\ufffe\133\ufffe\134" +
    "\ufffe\145\ufffe\001\002\000\004\011\u0171\001\002\000\044" +
    "\011\uff5a\025\205\026\176\027\214\030\204\031\213\032" +
    "\200\033\174\057\210\143\202\144\201\153\177\154\203" +
    "\155\207\156\175\157\206\161\211\001\002\000\100\002" +
    "\uff5b\003\uff5b\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b" +
    "\013\uff5b\016\uff5b\022\uff5b\034\uff5b\037\uff5b\041\uff5b\044" +
    "\uff5b\045\uff5b\051\uff5b\053\uff5b\054\uff5b\064\uff5b\065\uff5b" +
    "\066\uff5b\100\uff5b\103\uff5b\104\uff5b\115\uff5b\122\uff5b\131" +
    "\uff5b\132\uff5b\133\uff5b\134\uff5b\145\uff5b\001\002\000\100" +
    "\002\uff5c\003\uff5c\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010" +
    "\uff5c\013\uff5c\016\uff5c\022\uff5c\034\uff5c\037\uff5c\041\uff5c" +
    "\044\uff5c\045\uff5c\051\uff5c\053\uff5c\054\uff5c\064\uff5c\065" +
    "\uff5c\066\uff5c\100\uff5c\103\uff5c\104\uff5c\115\uff5c\122\uff5c" +
    "\131\uff5c\132\uff5c\133\uff5c\134\uff5c\145\uff5c\001\002\000" +
    "\004\011\ufff2\001\002\000\100\002\uffda\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\013\uffda\016\uffda\022" +
    "\uffda\034\uffda\037\uffda\041\uffda\044\uffda\045\uffda\051\uffda" +
    "\053\uffda\054\uffda\064\uffda\065\uffda\066\uffda\100\uffda\103" +
    "\uffda\104\uffda\115\uffda\122\uffda\131\uffda\132\uffda\133\uffda" +
    "\134\uffda\145\uffda\001\002\000\100\002\uffd2\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\013\uffd2\016\uffd2" +
    "\022\uffd2\034\uffd2\037\uffd2\041\uffd2\044\uffd2\045\uffd2\051" +
    "\uffd2\053\uffd2\054\uffd2\064\uffd2\065\uffd2\066\uffd2\100\uffd2" +
    "\103\uffd2\104\uffd2\115\uffd2\122\uffd2\131\uffd2\132\uffd2\133" +
    "\uffd2\134\uffd2\145\uffd2\001\002\000\100\002\uffd1\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\013\uffd1\016" +
    "\uffd1\022\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\051\uffd1\053\uffd1\054\uffd1\064\uffd1\065\uffd1\066\uffd1\100" +
    "\uffd1\103\uffd1\104\uffd1\115\uffd1\122\uffd1\131\uffd1\132\uffd1" +
    "\133\uffd1\134\uffd1\145\uffd1\001\002\000\100\002\uffe9\003" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9" +
    "\016\uffe9\022\uffe9\034\uffe9\037\uffe9\041\uffe9\044\uffe9\045" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\100\uffe9\103\uffe9\104\uffe9\115\uffe9\122\uffe9\131\uffe9\132" +
    "\uffe9\133\uffe9\134\uffe9\145\uffe9\001\002\000\004\162\u0178" +
    "\001\002\000\006\015\u017a\024\u0179\001\002\000\056\004" +
    "\030\005\122\006\007\007\066\010\074\014\171\016\164" +
    "\035\163\104\004\105\160\106\162\107\153\110\170\112" +
    "\150\142\147\154\161\155\165\162\145\163\155\164\166" +
    "\165\146\166\151\001\002\000\004\011\uff9f\001\002\000" +
    "\006\015\u017c\024\u013e\001\002\000\004\011\uff9e\001\002" +
    "\000\004\011\ufff0\001\002\000\072\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\016\ufffb\022\ufffb\034\ufffb" +
    "\037\ufffb\045\ufffb\051\ufffb\053\ufffb\054\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\100\ufffb\102\ufffb\103\ufffb\104\ufffb\115\ufffb" +
    "\122\ufffb\131\ufffb\132\ufffb\133\ufffb\134\ufffb\145\ufffb\001" +
    "\002\000\004\011\ufff1\001\002\000\072\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\016\ufffa\022\ufffa\034" +
    "\ufffa\037\ufffa\045\ufffa\051\ufffa\053\ufffa\054\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\100\ufffa\102\ufffa\103\ufffa\104\ufffa\115" +
    "\ufffa\122\ufffa\131\ufffa\132\ufffa\133\ufffa\134\ufffa\145\ufffa" +
    "\001\002\000\004\012\u0182\001\002\000\020\004\030\005" +
    "\122\006\007\007\066\010\074\013\u0184\016\240\001\002" +
    "\000\020\004\030\005\122\006\007\007\066\010\074\013" +
    "\u0189\016\240\001\002\000\004\011\uff66\001\002\000\004" +
    "\016\316\001\002\000\004\011\u0187\001\002\000\020\004" +
    "\uff64\005\uff64\006\uff64\007\uff64\010\uff64\013\uff64\016\uff64" +
    "\001\002\000\006\011\uff63\024\355\001\002\000\004\011" +
    "\uff67\001\002\000\004\011\u018b\001\002\000\020\004\uff65" +
    "\005\uff65\006\uff65\007\uff65\010\uff65\013\uff65\016\uff65\001" +
    "\002\000\056\004\030\005\122\006\007\007\066\010\074" +
    "\014\171\016\164\035\163\104\004\105\160\106\162\107" +
    "\153\110\170\112\150\142\147\154\161\155\165\162\145" +
    "\163\155\164\166\165\146\166\151\001\002\000\044\015" +
    "\u018e\025\205\026\176\027\214\030\204\031\213\032\200" +
    "\033\174\057\210\143\202\144\201\153\177\154\203\155" +
    "\207\156\175\157\206\161\211\001\002\000\004\012\134" +
    "\001\002\000\100\002\uff4c\003\uff4c\004\uff4c\005\uff4c\006" +
    "\uff4c\007\uff4c\010\uff4c\013\uff4c\016\uff4c\022\uff4c\034\uff4c" +
    "\037\uff4c\041\uff4c\044\uff4c\045\uff4c\051\uff4c\053\uff4c\054" +
    "\uff4c\064\uff4c\065\uff4c\066\uff4c\100\uff4c\103\uff4c\104\uff4c" +
    "\115\uff4c\122\uff4c\131\uff4c\132\uff4c\133\uff4c\134\uff4c\145" +
    "\uff4c\001\002\000\056\004\030\005\122\006\007\007\066" +
    "\010\074\014\171\016\164\035\163\104\004\105\160\106" +
    "\162\107\153\110\170\112\150\142\147\154\161\155\165" +
    "\162\145\163\155\164\166\165\146\166\151\001\002\000" +
    "\044\015\u0192\025\205\026\176\027\214\030\204\031\213" +
    "\032\200\033\174\057\210\143\202\144\201\153\177\154" +
    "\203\155\207\156\175\157\206\161\211\001\002\000\004" +
    "\011\uffc9\001\002\000\004\002\001\001\002\000\006\014" +
    "\u0195\136\u0196\001\002\000\024\004\030\005\122\006\007" +
    "\007\066\010\074\015\uff57\016\240\024\uff57\047\u015c\001" +
    "\002\000\006\076\u0198\077\u0197\001\002\000\004\014\u019c" +
    "\001\002\000\004\014\u0199\001\002\000\004\015\u019a\001" +
    "\002\000\002\001\002\000\004\011\ufff7\001\002\000\004" +
    "\015\u019d\001\002\000\002\001\002\000\004\011\ufff6\001" +
    "\002\000\006\015\u01a0\024\u0162\001\002\000\004\012\uff5f" +
    "\001\002\000\072\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\016\ufffd\022\ufffd\034\ufffd\037\ufffd\045\ufffd" +
    "\051\ufffd\053\ufffd\054\ufffd\064\ufffd\065\ufffd\066\ufffd\100" +
    "\ufffd\102\ufffd\103\ufffd\104\ufffd\115\ufffd\122\ufffd\131\ufffd" +
    "\132\ufffd\133\ufffd\134\ufffd\145\ufffd\001\002\000\072\003" +
    "\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\016\uffc0" +
    "\022\uffc0\034\uffc0\037\uffc0\045\uffc0\051\uffc0\053\uffc0\054" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\100\uffc0\102\uffc0\103\uffc0" +
    "\104\uffc0\115\uffc0\122\uffc0\131\uffc0\132\uffc0\133\uffc0\134" +
    "\uffc0\145\uffc0\001\002\000\100\002\uffd6\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\016\uffd6\022" +
    "\uffd6\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\064\uffd6\065\uffd6\066\uffd6\100\uffd6\103" +
    "\uffd6\104\uffd6\115\uffd6\122\uffd6\131\uffd6\132\uffd6\133\uffd6" +
    "\134\uffd6\145\uffd6\001\002\000\072\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\016\ufff8\022\ufff8\034\ufff8" +
    "\037\ufff8\045\ufff8\051\ufff8\053\ufff8\054\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\100\ufff8\102\ufff8\103\ufff8\104\ufff8\115\ufff8" +
    "\122\ufff8\131\ufff8\132\ufff8\133\ufff8\134\ufff8\145\ufff8\001" +
    "\002\000\100\002\uffd0\003\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\013\uffd0\016\uffd0\022\uffd0\034\uffd0\037" +
    "\uffd0\041\uffd0\044\uffd0\045\uffd0\051\uffd0\053\uffd0\054\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\100\uffd0\103\uffd0\104\uffd0\115" +
    "\uffd0\122\uffd0\131\uffd0\132\uffd0\133\uffd0\134\uffd0\145\uffd0" +
    "\001\002\000\004\162\u01a7\001\002\000\006\015\u01a9\024" +
    "\u01a8\001\002\000\056\004\030\005\122\006\007\007\066" +
    "\010\074\014\171\016\164\035\163\104\004\105\160\106" +
    "\162\107\153\110\170\112\150\142\147\154\161\155\165" +
    "\162\145\163\155\164\166\165\146\166\151\001\002\000" +
    "\004\011\uffa1\001\002\000\006\015\u01ab\024\u013e\001\002" +
    "\000\004\011\uffa0\001\002\000\100\002\uffd3\003\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\016\uffd3" +
    "\022\uffd3\034\uffd3\037\uffd3\041\uffd3\044\uffd3\045\uffd3\051" +
    "\uffd3\053\uffd3\054\uffd3\064\uffd3\065\uffd3\066\uffd3\100\uffd3" +
    "\103\uffd3\104\uffd3\115\uffd3\122\uffd3\131\uffd3\132\uffd3\133" +
    "\uffd3\134\uffd3\145\uffd3\001\002\000\056\004\030\005\122" +
    "\006\007\007\066\010\074\014\171\016\164\035\163\104" +
    "\004\105\160\106\162\107\153\110\170\112\150\142\147" +
    "\154\161\155\165\162\145\163\155\164\166\165\146\166" +
    "\151\001\002\000\044\024\u01af\025\205\026\176\027\214" +
    "\030\204\031\213\032\200\033\174\057\210\143\202\144" +
    "\201\153\177\154\203\155\207\156\175\157\206\161\211" +
    "\001\002\000\056\004\030\005\122\006\007\007\066\010" +
    "\074\014\171\016\164\035\163\104\004\105\160\106\162" +
    "\107\153\110\170\112\150\142\147\154\161\155\165\162" +
    "\145\163\155\164\166\165\146\166\151\001\002\000\044" +
    "\015\u01b1\025\205\026\176\027\214\030\204\031\213\032" +
    "\200\033\174\057\210\143\202\144\201\153\177\154\203" +
    "\155\207\156\175\157\206\161\211\001\002\000\146\003" +
    "\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75" +
    "\013\uff75\015\uff75\016\uff75\020\uff75\022\uff75\024\uff75\025" +
    "\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75" +
    "\034\uff75\037\uff75\045\uff75\051\uff75\053\uff75\054\uff75\057" +
    "\uff75\064\uff75\065\uff75\066\uff75\100\uff75\102\uff75\103\uff75" +
    "\104\uff75\115\uff75\122\uff75\131\uff75\132\uff75\133\uff75\134" +
    "\uff75\136\uff75\143\uff75\144\uff75\145\uff75\153\uff75\154\uff75" +
    "\155\uff75\156\uff75\157\uff75\161\uff75\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\144\004\020\005\066\006\054\007\033\011" +
    "\036\012\056\013\015\014\052\015\074\016\077\020\116" +
    "\021\046\022\072\023\061\024\110\025\112\027\055\037" +
    "\071\043\047\052\053\055\023\056\125\057\111\060\007" +
    "\061\114\062\107\063\067\066\057\070\063\073\123\074" +
    "\030\075\124\100\037\101\064\102\126\103\076\104\011" +
    "\105\004\106\013\107\102\110\026\111\024\112\105\113" +
    "\010\114\043\115\062\116\035\117\034\120\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\006\137\007\033\011\036\012\056\014\052\015" +
    "\074\016\077\020\116\021\046\022\072\023\061\024\110" +
    "\025\112\027\055\037\071\043\047\052\053\055\023\056" +
    "\125\057\111\060\007\062\107\063\067\066\057\070\063" +
    "\073\123\074\030\075\124\101\064\102\126\103\076\104" +
    "\011\105\004\116\035\117\034\120\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\374\001\001\000" +
    "\002\001\001\000\026\010\u016e\011\155\012\166\014\052" +
    "\030\u016d\043\156\063\143\066\171\074\151\075\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\u0155\044\314\045\313\001" +
    "\001\000\002\001\001\000\004\046\u014a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\004\u0141\006\054" +
    "\007\033\011\036\012\056\014\052\015\074\016\077\020" +
    "\116\021\046\022\072\023\061\024\110\025\112\027\055" +
    "\037\071\043\047\052\053\055\023\056\125\057\111\060" +
    "\007\061\u0142\062\107\063\067\066\057\070\063\073\123" +
    "\074\030\075\124\101\064\102\126\103\076\104\011\105" +
    "\004\116\035\117\034\120\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\141\001\001\000\004\002\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\004\134\006\054\007\033\011\036" +
    "\012\056\014\052\015\074\016\077\020\116\021\046\022" +
    "\072\023\061\024\110\025\112\027\055\037\071\043\047" +
    "\052\053\055\023\056\125\057\111\060\007\062\107\063" +
    "\067\066\057\070\063\073\123\074\030\075\124\101\064" +
    "\102\126\103\076\104\011\105\004\116\035\117\034\120" +
    "\122\001\001\000\112\006\137\007\033\011\036\012\056" +
    "\014\052\015\074\016\077\020\116\021\046\022\072\023" +
    "\061\024\110\025\112\027\055\037\071\043\047\052\053" +
    "\055\023\056\125\057\111\060\007\062\107\063\067\066" +
    "\057\070\063\073\123\074\030\075\124\101\064\102\126" +
    "\103\076\104\011\105\004\116\035\117\034\120\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\302\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\024\010\153\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\301\011" +
    "\155\012\166\014\052\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\255\011\155\012\166\014\052\043\156" +
    "\063\143\066\171\074\151\075\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\052" +
    "\043\156\074\240\075\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\172\011\155" +
    "\012\166\014\052\043\156\063\143\066\171\074\151\075" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\233\011\155\012\166\014\052\043\156\063\143\066" +
    "\171\074\151\075\124\001\001\000\024\010\232\011\155" +
    "\012\166\014\052\043\156\063\143\066\171\074\151\075" +
    "\124\001\001\000\024\010\231\011\155\012\166\014\052" +
    "\043\156\063\143\066\171\074\151\075\124\001\001\000" +
    "\024\010\230\011\155\012\166\014\052\043\156\063\143" +
    "\066\171\074\151\075\124\001\001\000\024\010\227\011" +
    "\155\012\166\014\052\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\024\010\226\011\155\012\166\014" +
    "\052\043\156\063\143\066\171\074\151\075\124\001\001" +
    "\000\024\010\225\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\024\010\224" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\024\010\223\011\155\012\166" +
    "\014\052\043\156\063\143\066\171\074\151\075\124\001" +
    "\001\000\024\010\222\011\155\012\166\014\052\043\156" +
    "\063\143\066\171\074\151\075\124\001\001\000\024\010" +
    "\221\011\155\012\166\014\052\043\156\063\143\066\171" +
    "\074\151\075\124\001\001\000\024\010\220\011\155\012" +
    "\166\014\052\043\156\063\143\066\171\074\151\075\124" +
    "\001\001\000\002\001\001\000\024\010\216\011\155\012" +
    "\166\014\052\043\156\063\143\066\171\074\151\075\124" +
    "\001\001\000\002\001\001\000\024\010\215\011\155\012" +
    "\166\014\052\043\156\063\143\066\171\074\151\075\124" +
    "\001\001\000\024\010\214\011\155\012\166\014\052\043" +
    "\156\063\143\066\171\074\151\075\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\052\043\156\075\242\001" +
    "\001\000\004\035\141\001\001\000\030\010\245\011\155" +
    "\012\166\014\052\043\156\063\143\064\244\065\246\066" +
    "\171\074\151\075\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\250\011\155\012" +
    "\166\014\052\043\156\063\143\066\171\074\151\075\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\253\011\155\012\166\014\052\043\156\063\143\066\171" +
    "\074\151\075\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\257\011\155\012\166" +
    "\014\052\043\156\063\143\066\171\074\151\075\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\263\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\052\043\156\075\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\010\245\011\155\012\166\014\052\043\156\063" +
    "\143\064\272\065\246\066\171\074\151\075\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\275\011" +
    "\155\012\166\014\052\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\002\001\001\000\024\010\277\011" +
    "\155\012\166\014\052\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\310\014\052\020" +
    "\311\043\312\074\307\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\314\045" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\316\033\321\035\322\001\001\000\002\001\001\000" +
    "\024\010\302\011\155\012\166\014\052\043\156\063\143" +
    "\066\171\074\151\075\124\001\001\000\030\010\326\011" +
    "\155\012\166\014\052\043\156\063\143\066\171\074\151" +
    "\075\124\076\327\077\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\332\011\155\012\166\014\052\043\156" +
    "\063\143\066\171\074\151\075\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\340" +
    "\011\155\012\166\014\052\042\336\043\156\063\143\066" +
    "\171\072\337\074\151\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\344\011" +
    "\155\012\166\014\052\035\345\040\347\041\342\042\346" +
    "\043\156\063\143\066\171\074\151\075\124\001\001\000" +
    "\002\001\001\000\032\010\344\011\155\012\166\014\052" +
    "\040\347\041\342\042\346\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\344\011\155\012\166\014\052" +
    "\040\353\042\346\043\156\063\143\066\171\074\151\075" +
    "\124\001\001\000\002\001\001\000\004\045\355\001\001" +
    "\000\002\001\001\000\024\010\357\011\155\012\166\014" +
    "\052\043\156\063\143\066\171\074\151\075\124\001\001" +
    "\000\002\001\001\000\024\011\361\012\367\014\052\020" +
    "\366\031\365\037\363\043\156\074\364\075\124\001\001" +
    "\000\002\001\001\000\004\035\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\371\001\001\000\002\001" +
    "\001\000\030\010\326\011\155\012\166\014\052\043\156" +
    "\063\143\066\171\074\151\075\124\076\327\077\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\376" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\024\010\u0100" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\024\011\361" +
    "\012\367\014\052\020\366\031\u0102\037\363\043\156\074" +
    "\364\075\124\001\001\000\002\001\001\000\004\002\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\u010a" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\u010d\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\004\002\u010f\001\001\000\002\001\001\000\010\002" +
    "\u0112\025\u0113\026\u0111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\u0118\011\155\012\166" +
    "\014\052\043\156\063\143\066\171\074\151\075\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\u011d" +
    "\051\u011b\001\001\000\006\047\u0124\050\u0122\001\001\000" +
    "\024\010\u011e\011\155\012\166\014\052\043\156\063\143" +
    "\066\171\074\151\075\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\004\u0120\006\054\007\033\011\036" +
    "\012\056\014\052\015\074\016\077\020\116\021\046\022" +
    "\072\023\061\024\110\025\112\027\055\037\071\043\047" +
    "\052\053\055\023\056\125\057\111\060\007\062\107\063" +
    "\067\066\057\070\063\073\123\074\030\075\124\101\064" +
    "\102\126\103\076\104\011\105\004\116\035\117\034\120" +
    "\122\001\001\000\112\006\137\007\033\011\036\012\056" +
    "\014\052\015\074\016\077\020\116\021\046\022\072\023" +
    "\061\024\110\025\112\027\055\037\071\043\047\052\053" +
    "\055\023\056\125\057\111\060\007\062\107\063\067\066" +
    "\057\070\063\073\123\074\030\075\124\101\064\102\126" +
    "\103\076\104\011\105\004\116\035\117\034\120\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\114\004\u0126\006\054\007\033\011" +
    "\036\012\056\014\052\015\074\016\077\020\116\021\046" +
    "\022\072\023\061\024\110\025\112\027\055\037\071\043" +
    "\047\052\053\055\023\056\125\057\111\060\007\062\107" +
    "\063\067\066\057\070\063\073\123\074\030\075\124\101" +
    "\064\102\126\103\076\104\011\105\004\116\035\117\034" +
    "\120\122\001\001\000\112\006\137\007\033\011\036\012" +
    "\056\014\052\015\074\016\077\020\116\021\046\022\072" +
    "\023\061\024\110\025\112\027\055\037\071\043\047\052" +
    "\053\055\023\056\125\057\111\060\007\062\107\063\067" +
    "\066\057\070\063\073\123\074\030\075\124\101\064\102" +
    "\126\103\076\104\011\105\004\116\035\117\034\120\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\u012a\011\155\012\166\014\052\043\156\063\143\066\171" +
    "\074\151\075\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\u0130\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\u013c\011\155\012" +
    "\166\014\052\036\u013b\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\u013f\011\155\012\166\014\052" +
    "\043\156\063\143\066\171\074\151\075\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\112" +
    "\006\137\007\033\011\036\012\056\014\052\015\074\016" +
    "\077\020\116\021\046\022\072\023\061\024\110\025\112" +
    "\027\055\037\071\043\047\052\053\055\023\056\125\057" +
    "\111\060\007\062\107\063\067\066\057\070\063\073\123" +
    "\074\030\075\124\101\064\102\126\103\076\104\011\105" +
    "\004\116\035\117\034\120\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\326\011\155\012" +
    "\166\014\052\043\156\063\143\066\171\072\u014c\074\151" +
    "\075\124\076\327\077\u014e\001\001\000\002\001\001\000" +
    "\004\035\345\001\001\000\002\001\001\000\024\010\u0150" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\024\010\u0152" +
    "\011\155\012\166\014\052\043\156\063\143\066\171\074" +
    "\151\075\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\316\033" +
    "\321\035\322\001\001\000\012\014\052\043\u015a\053\u0158" +
    "\054\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\052\043\u015c\001\001\000\002" +
    "\001\001\000\010\032\u015e\033\321\035\322\001\001\000" +
    "\002\001\001\000\010\032\u0160\033\321\035\322\001\001" +
    "\000\002\001\001\000\010\014\052\043\u015a\053\u0163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\052\043\u015a\053\u0158\054\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\u013c\011\155\012" +
    "\166\014\052\036\u017a\043\156\063\143\066\171\074\151" +
    "\075\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\052\043\u0184\067\u0185\071\u0182\001\001\000\010\014\052" +
    "\043\u0184\067\u0189\001\001\000\002\001\001\000\006\044" +
    "\u0187\045\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\u018c\011\155\012\166\014\052" +
    "\043\156\063\143\066\171\074\151\075\124\001\001\000" +
    "\002\001\001\000\004\002\u018e\001\001\000\002\001\001" +
    "\000\024\010\u0190\011\155\012\166\014\052\043\156\063" +
    "\143\066\171\074\151\075\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\052\043\u015a\053\u0158\054\u019e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u019d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\u013c" +
    "\011\155\012\166\014\052\036\u01a9\043\156\063\143\066" +
    "\171\074\151\075\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\u01ad\011\155\012\166\014\052\043\156\063\143\066\171" +
    "\074\151\075\124\001\001\000\002\001\001\000\024\010" +
    "\u01af\011\155\012\166\014\052\043\156\063\143\066\171" +
    "\074\151\075\124\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONSTANTES LINST 
            {
              Object RESULT =null;
		int constantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> constantes = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                for(Nodo n: lista)
                {
                    constantes.add(n);
                }  
                raiz = new AST(constantes);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GUICOMPONENTE ::= ETIQUETA puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GUICOMPONENTE ::= TEXTO puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GUICOMPONENTE ::= TEXTOAREA puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GUICOMPONENTE ::= TEXTOPASS puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GUICOMPONENTE ::= TEXTONUM puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GUICOMPONENTE ::= BOTON puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GUICOMPONENTE ::= MENSAJE puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALINICIAR ::= tvoid id dospuntos tiniciarventana pari pard BLOQUEVENTANA 
            {
              Funcion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINICIAR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALCLICK ::= tvoid id dospuntos tclick pari pard BLOQUEVENTANA 
            {
              Funcion RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALCLICK",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ETIQUETA ::= tetiqueta id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.ETIQUETA );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TEXTO ::= ttexto id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.TEXT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TEXTOAREA ::= ttextoArea id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTAREA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOAREA",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TEXTOPASS ::= ttextoPass id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTPASS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOPASS",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TEXTONUM ::= ttextoNum id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTNUM);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTONUM",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BOTON ::= tboton id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.BOTON);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MENSAJE ::= tmensaje id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.MENSAJE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MENSAJE",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTANCIARGUI ::= tnuevogui pari id pard 
            {
              InstanciarGui RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstanciarGui(nombre, posright,posleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIARGUI",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= BREAK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= CONTINUE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= CONCATENAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Concatenar inst = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= SETESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetEscribir inst = (SetEscribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= SETAPPEND puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetApend inst = (SetApend)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= CLOSEARCHIVO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CerrarArchivo inst = (CerrarArchivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= ESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Escribir inst = (Escribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= READ puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Read inst = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= SETALTOANCHO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetAltoAncho inst = (SetAltoAncho)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= RMENSAJE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RMensaje inst = (RMensaje)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST ::= ALCLICK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST ::= ALINICIAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST ::= INSTANCIARGUI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstanciarGui inst = (InstanciarGui)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // READ ::= tread pari EXP coma id pard 
            {
              Read RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Read(e1,e2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READ",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CLOSEARCHIVO ::= tclose pari pard 
            {
              CerrarArchivo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CerrarArchivo(tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSEARCHIVO",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SETESCRIBIR ::= escritura pari EXP pard 
            {
              SetEscribir RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetEscribir(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETESCRIBIR",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SETAPPEND ::= tapend pari EXP pard 
            {
              SetApend RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetApend(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETAPPEND",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESCRIBIR ::= escribir pari cadena pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESCRIBIR ::= escribir pari cadena coma LVALORES pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONSTANTES ::= CONSTANTES DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l ; RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONSTANTES ::= DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONSTANTES ::= IMPORTAR 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Importar inst = (Importar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONSTANTES ::= GUICOMPONENTE 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IMPORTAR ::= importar cadena 
            {
              Importar RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Importar(nombre, orright, orleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NDIM ::= LEXP 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= multi ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= tatexto pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aTexto(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= CONCATENAR 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Concatenar v = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= taentero pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aEntero(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= tadecimal pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aDecimal(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= teql pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Equals(expresion1, expresion2, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONCATENAR ::= tconcatenar pari EXP coma EXP pard 
            {
              Concatenar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Concatenar(exp1,exp2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENAR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AUMENTO ::= ACCESO aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECREMENTO ::= ACCESO decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ORIGEN ::= TIPO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo id = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id.nombreTipo(), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CABECERAMET ::= TIPO NDIMVACIO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTINUE ::= continuar 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // BREAK ::= romper 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DOWHILE ::= hacer BLOQUE donde pari EXP pard 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ACTUALIZACION ::= AUMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ACTUALIZACION ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ACTUALIZACION ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ACTUALIZACION ::= ASIGV 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
