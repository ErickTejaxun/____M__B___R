
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.InputOutput.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import AST.Instruccion.GUI.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\310\000\002\002\004\000\002\013\004\000\002\013" +
    "\003\000\002\013\003\000\002\115\004\000\002\115\004" +
    "\000\002\115\004\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\057\011\000\002\060\011\000\002" +
    "\114\004\000\002\106\004\000\002\107\004\000\002\110" +
    "\004\000\002\111\004\000\002\112\004\000\002\117\006" +
    "\000\002\117\010\000\002\120\006\000\002\004\004\000" +
    "\002\004\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\004\000\002\006\003\000\002\121\006\000\002\116\010" +
    "\000\002\105\010\000\002\103\005\000\002\101\006\000" +
    "\002\104\006\000\002\102\006\000\002\102\010\000\002" +
    "\073\010\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\061\004\000\002\100\004" +
    "\000\002\046\004\000\002\046\004\000\002\007\004\000" +
    "\002\044\005\000\002\044\003\000\002\045\003\000\002" +
    "\045\005\000\002\045\004\000\002\045\006\000\002\045" +
    "\006\000\002\045\006\000\002\032\003\000\002\032\003" +
    "\000\002\033\005\000\002\033\004\000\002\072\005\000" +
    "\002\042\005\000\002\041\005\000\002\041\003\000\002" +
    "\040\003\000\002\040\003\000\002\020\005\000\002\037" +
    "\006\000\002\077\003\000\002\077\003\000\002\076\006" +
    "\000\002\064\003\000\002\064\002\000\002\065\005\000" +
    "\002\065\003\000\002\015\006\000\002\015\010\000\002" +
    "\016\006\000\002\016\010\000\002\036\005\000\002\036" +
    "\003\000\002\035\006\000\002\035\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\010\005\000\002\010\006\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\010\006\000\002\010\006\000\002\010\010\000\002\066" +
    "\010\000\002\011\004\000\002\012\004\000\002\074\005" +
    "\000\002\074\003\000\002\075\003\000\002\075\004\000" +
    "\002\043\003\000\002\043\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\070\007\000\002\070\006\000\002\071\005" +
    "\000\002\071\004\000\002\067\004\000\002\055\004\000" +
    "\002\056\007\000\002\056\010\000\002\056\007\000\002" +
    "\002\005\000\002\002\004\000\002\062\005\000\002\062" +
    "\004\000\002\030\003\000\002\054\005\000\002\054\003" +
    "\000\002\054\002\000\002\053\004\000\002\053\005\000" +
    "\002\025\007\000\002\025\011\000\002\026\003\000\002" +
    "\026\003\000\002\063\010\000\002\063\006\000\002\021" +
    "\007\000\002\024\003\000\002\023\003\000\002\052\011" +
    "\000\002\052\012\000\002\051\004\000\002\051\003\000" +
    "\002\047\006\000\002\050\005\000\002\022\010\000\002" +
    "\027\013\000\002\027\013\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\116\003\106\004\030\005\124\006\007\007" +
    "\070\010\076\016\042\022\006\034\014\037\100\045\120" +
    "\051\033\053\073\054\104\056\011\064\044\065\053\066" +
    "\016\067\047\070\103\071\121\072\043\073\026\074\032" +
    "\075\132\100\046\101\051\102\017\103\054\104\024\105" +
    "\004\116\063\123\107\132\022\133\122\134\020\135\112" +
    "\146\116\001\002\000\004\014\u01b7\001\002\000\004\011" +
    "\u01b6\001\002\000\004\014\u01b0\001\002\000\206\002\uff66" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\013\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\033\uff66\034\uff66\037\uff66\045\uff66\051\uff66" +
    "\053\uff66\054\uff66\056\uff66\057\uff66\064\uff66\065\uff66\066" +
    "\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66" +
    "\075\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66\105" +
    "\uff66\116\uff66\123\uff66\132\uff66\133\uff66\134\uff66\135\uff66" +
    "\137\uff66\140\uff66\141\uff66\142\uff66\144\uff66\145\uff66\146" +
    "\uff66\154\uff66\155\uff66\156\uff66\157\uff66\160\uff66\162\uff66" +
    "\001\002\000\122\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\013\uffcf\016\uffcf\022\uffcf\034\uffcf" +
    "\037\uffcf\041\uffcf\044\uffcf\045\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\104\uffcf\105\uffcf\116\uffcf\123\uffcf\132\uffcf\133\uffcf" +
    "\134\uffcf\135\uffcf\146\uffcf\001\002\000\004\163\u01af\001" +
    "\002\000\004\011\u01ae\001\002\000\004\011\u01ad\001\002" +
    "\000\004\016\u01a0\001\002\000\004\002\u019f\001\002\000" +
    "\004\014\u019c\001\002\000\004\014\u0199\001\002\000\004" +
    "\011\uff47\001\002\000\114\002\uffff\003\106\004\030\005" +
    "\124\006\007\007\070\010\076\016\042\022\006\034\014" +
    "\037\100\045\120\051\033\053\073\054\104\064\044\065" +
    "\053\066\016\067\047\070\103\071\121\072\043\073\026" +
    "\074\032\075\132\100\046\101\051\102\017\104\024\105" +
    "\004\116\063\123\107\132\022\133\122\134\020\135\112" +
    "\146\116\001\002\000\004\014\u0195\001\002\000\004\011" +
    "\u0194\001\002\000\004\016\u0189\001\002\000\122\002\uffe3" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013" +
    "\uffe3\016\uffe3\022\uffe3\034\uffe3\037\uffe3\041\uffe3\044\uffe3" +
    "\045\uffe3\051\uffe3\053\uffe3\054\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\100\uffe3\101\uffe3\102\uffe3\104\uffe3\105\uffe3\116" +
    "\uffe3\123\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3\146\uffe3" +
    "\001\002\000\004\016\u0188\001\002\000\004\011\u0187\001" +
    "\002\000\206\002\uff67\003\uff67\004\uff67\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\013\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\024\uff67\025\uff67\026\uff67" +
    "\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\037" +
    "\uff67\045\uff67\051\uff67\053\uff67\054\uff67\056\uff67\057\uff67" +
    "\064\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072" +
    "\uff67\073\uff67\074\uff67\075\uff67\100\uff67\101\uff67\102\uff67" +
    "\103\uff67\104\uff67\105\uff67\116\uff67\123\uff67\132\uff67\133" +
    "\uff67\134\uff67\135\uff67\137\uff67\140\uff67\141\uff67\142\uff67" +
    "\144\uff67\145\uff67\146\uff67\154\uff67\155\uff67\156\uff67\157" +
    "\uff67\160\uff67\162\uff67\001\002\000\012\021\u0106\140\274" +
    "\141\275\142\273\001\002\000\004\016\u0186\001\002\000" +
    "\004\014\u0180\001\002\000\004\011\u017f\001\002\000\004" +
    "\011\u017e\001\002\000\004\011\u017d\001\002\000\004\011" +
    "\u017c\001\002\000\004\011\u017b\001\002\000\120\002\uffbd" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\016" +
    "\uffbd\022\uffbd\034\uffbd\037\uffbd\045\uffbd\051\uffbd\053\uffbd" +
    "\054\uffbd\056\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\100\uffbd" +
    "\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\116\uffbd\123" +
    "\uffbd\132\uffbd\133\uffbd\134\uffbd\135\uffbd\146\uffbd\001\002" +
    "\000\020\014\247\016\uff68\017\240\021\uff68\140\uff68\141" +
    "\uff68\142\uff68\001\002\000\004\016\u017a\001\002\000\060" +
    "\004\030\005\124\006\007\007\070\010\076\011\u0178\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\004\011\u0175" +
    "\001\002\000\004\014\u0172\001\002\000\004\016\u0171\001" +
    "\002\000\122\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\013\uffdf\016\uffdf\022\uffdf\034\uffdf\037" +
    "\uffdf\041\uffdf\044\uffdf\045\uffdf\051\uffdf\053\uffdf\054\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\104\uffdf\105\uffdf\116\uffdf\123\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\135\uffdf\146\uffdf\001\002\000\004\014\u016c\001\002" +
    "\000\016\016\u015e\017\u015c\021\uff6b\140\uff6b\141\uff6b\142" +
    "\uff6b\001\002\000\004\014\u0157\001\002\000\004\016\u0153" +
    "\001\002\000\206\002\uff69\003\uff69\004\uff69\005\uff69\006" +
    "\uff69\007\uff69\010\uff69\011\uff69\013\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\022\uff69\024\uff69\025\uff69\026" +
    "\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69" +
    "\037\uff69\045\uff69\051\uff69\053\uff69\054\uff69\056\uff69\057" +
    "\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071\uff69" +
    "\072\uff69\073\uff69\074\uff69\075\uff69\100\uff69\101\uff69\102" +
    "\uff69\103\uff69\104\uff69\105\uff69\116\uff69\123\uff69\132\uff69" +
    "\133\uff69\134\uff69\135\uff69\137\uff69\140\uff69\141\uff69\142" +
    "\uff69\144\uff69\145\uff69\146\uff69\154\uff69\155\uff69\156\uff69" +
    "\157\uff69\160\uff69\162\uff69\001\002\000\122\002\uffda\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\013\uffda" +
    "\016\uffda\022\uffda\034\uffda\037\uffda\041\uffda\044\uffda\045" +
    "\uffda\051\uffda\053\uffda\054\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075" +
    "\uffda\100\uffda\101\uffda\102\uffda\104\uffda\105\uffda\116\uffda" +
    "\123\uffda\132\uffda\133\uffda\134\uffda\135\uffda\146\uffda\001" +
    "\002\000\122\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\013\uffeb\016\uffeb\022\uffeb\034\uffeb\037" +
    "\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\053\uffeb\054\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\100\uffeb\101\uffeb\102\uffeb" +
    "\104\uffeb\105\uffeb\116\uffeb\123\uffeb\132\uffeb\133\uffeb\134" +
    "\uffeb\135\uffeb\146\uffeb\001\002\000\122\002\uffdd\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\016" +
    "\uffdd\022\uffdd\034\uffdd\037\uffdd\041\uffdd\044\uffdd\045\uffdd" +
    "\051\uffdd\053\uffdd\054\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\104\uffdd\105\uffdd\116\uffdd\123" +
    "\uffdd\132\uffdd\133\uffdd\134\uffdd\135\uffdd\146\uffdd\001\002" +
    "\000\004\011\u0151\001\002\000\004\011\u0150\001\002\000" +
    "\004\014\u014e\001\002\000\004\011\u014d\001\002\000\122" +
    "\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\013\uffcc\016\uffcc\022\uffcc\034\uffcc\037\uffcc\041\uffcc" +
    "\044\uffcc\045\uffcc\051\uffcc\053\uffcc\054\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\100\uffcc\101\uffcc\102\uffcc\104\uffcc\105" +
    "\uffcc\116\uffcc\123\uffcc\132\uffcc\133\uffcc\134\uffcc\135\uffcc" +
    "\146\uffcc\001\002\000\004\011\u014c\001\002\000\004\011" +
    "\u014b\001\002\000\206\002\uff64\003\uff64\004\uff64\005\uff64" +
    "\006\uff64\007\uff64\010\uff64\011\uff64\013\uff64\015\uff64\016" +
    "\uff64\017\uff64\020\uff64\021\uff64\022\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\037\uff64\045\uff64\051\uff64\053\uff64\054\uff64\056\uff64" +
    "\057\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071" +
    "\uff64\072\uff64\073\uff64\074\uff64\075\uff64\100\uff64\101\uff64" +
    "\102\uff64\103\uff64\104\uff64\105\uff64\116\uff64\123\uff64\132" +
    "\uff64\133\uff64\134\uff64\135\uff64\137\uff64\140\uff64\141\uff64" +
    "\142\uff64\144\uff64\145\uff64\146\uff64\154\uff64\155\uff64\156" +
    "\uff64\157\uff64\160\uff64\162\uff64\001\002\000\120\002\ufffe" +
    "\003\106\004\030\005\124\006\007\007\070\010\076\016" +
    "\042\022\006\034\014\037\100\045\120\051\033\053\073" +
    "\054\104\056\011\064\044\065\053\066\016\067\047\070" +
    "\103\071\121\072\043\073\026\074\032\075\132\100\046" +
    "\101\051\102\017\103\054\104\024\105\004\116\063\123" +
    "\107\132\022\133\122\134\020\135\112\146\116\001\002" +
    "\000\004\011\u0147\001\002\000\004\014\u0141\001\002\000" +
    "\004\011\u0140\001\002\000\004\011\u013f\001\002\000\206" +
    "\002\uff63\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010" +
    "\uff63\011\uff63\013\uff63\015\uff63\016\uff63\017\uff63\020\uff63" +
    "\021\uff63\022\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\032\uff63\033\uff63\034\uff63\037\uff63\045\uff63" +
    "\051\uff63\053\uff63\054\uff63\056\uff63\057\uff63\064\uff63\065" +
    "\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63" +
    "\074\uff63\075\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104" +
    "\uff63\105\uff63\116\uff63\123\uff63\132\uff63\133\uff63\134\uff63" +
    "\135\uff63\137\uff63\140\uff63\141\uff63\142\uff63\144\uff63\145" +
    "\uff63\146\uff63\154\uff63\155\uff63\156\uff63\157\uff63\160\uff63" +
    "\162\uff63\001\002\000\004\011\u013e\001\002\000\004\014" +
    "\u0139\001\002\000\004\011\u0138\001\002\000\004\011\u0137" +
    "\001\002\000\004\016\u0136\001\002\000\004\014\u0133\001" +
    "\002\000\004\011\u0132\001\002\000\122\002\uffca\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\013\uffca\016" +
    "\uffca\022\uffca\034\uffca\037\uffca\041\uffca\044\uffca\045\uffca" +
    "\051\uffca\053\uffca\054\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\100\uffca\101\uffca\102\uffca\104\uffca\105\uffca\116\uffca\123" +
    "\uffca\132\uffca\133\uffca\134\uffca\135\uffca\146\uffca\001\002" +
    "\000\004\014\u0121\001\002\000\004\011\u0120\001\002\000" +
    "\122\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\013\uffe1\016\uffe1\022\uffe1\034\uffe1\037\uffe1\041" +
    "\uffe1\044\uffe1\045\uffe1\051\uffe1\053\uffe1\054\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1" +
    "\105\uffe1\116\uffe1\123\uffe1\132\uffe1\133\uffe1\134\uffe1\135" +
    "\uffe1\146\uffe1\001\002\000\004\011\uff48\001\002\000\122" +
    "\002\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\013\uffce\016\uffce\022\uffce\034\uffce\037\uffce\041\uffce" +
    "\044\uffce\045\uffce\051\uffce\053\uffce\054\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\100\uffce\101\uffce\102\uffce\104\uffce\105" +
    "\uffce\116\uffce\123\uffce\132\uffce\133\uffce\134\uffce\135\uffce" +
    "\146\uffce\001\002\000\004\011\u011f\001\002\000\122\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\013\uffe2\016\uffe2\022\uffe2\034\uffe2\037\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\053\uffe2\054\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\100\uffe2\101\uffe2\102\uffe2\104\uffe2\105\uffe2" +
    "\116\uffe2\123\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\146" +
    "\uffe2\001\002\000\004\014\u0117\001\002\000\120\002\uffbe" +
    "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\016" +
    "\uffbe\022\uffbe\034\uffbe\037\uffbe\045\uffbe\051\uffbe\053\uffbe" +
    "\054\uffbe\056\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\116\uffbe\123" +
    "\uffbe\132\uffbe\133\uffbe\134\uffbe\135\uffbe\146\uffbe\001\002" +
    "\000\004\012\312\001\002\000\004\016\u0111\001\002\000" +
    "\004\014\322\001\002\000\004\011\321\001\002\000\206" +
    "\002\uff65\003\uff65\004\uff65\005\uff65\006\uff65\007\uff65\010" +
    "\uff65\011\uff65\013\uff65\015\uff65\016\uff65\017\uff65\020\uff65" +
    "\021\uff65\022\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030" +
    "\uff65\031\uff65\032\uff65\033\uff65\034\uff65\037\uff65\045\uff65" +
    "\051\uff65\053\uff65\054\uff65\056\uff65\057\uff65\064\uff65\065" +
    "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65" +
    "\074\uff65\075\uff65\100\uff65\101\uff65\102\uff65\103\uff65\104" +
    "\uff65\105\uff65\116\uff65\123\uff65\132\uff65\133\uff65\134\uff65" +
    "\135\uff65\137\uff65\140\uff65\141\uff65\142\uff65\144\uff65\145" +
    "\uff65\146\uff65\154\uff65\155\uff65\156\uff65\157\uff65\160\uff65" +
    "\162\uff65\001\002\000\004\011\320\001\002\000\004\011" +
    "\317\001\002\000\206\002\uff6c\003\uff6c\004\uff6c\005\uff6c" +
    "\006\uff6c\007\uff6c\010\uff6c\011\uff6c\013\uff6c\015\uff6c\016" +
    "\uff6c\017\240\020\uff6c\021\uff6c\022\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034" +
    "\uff6c\037\uff6c\045\uff6c\051\uff6c\053\uff6c\054\uff6c\056\uff6c" +
    "\057\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\100\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\116\uff6c\123\uff6c\132" +
    "\uff6c\133\uff6c\134\uff6c\135\uff6c\137\uff6c\140\uff6c\141\uff6c" +
    "\142\uff6c\144\uff6c\145\uff6c\146\uff6c\154\uff6c\155\uff6c\156" +
    "\uff6c\157\uff6c\160\uff6c\162\uff6c\001\002\000\004\012\312" +
    "\001\002\000\004\011\310\001\002\000\004\014\133\001" +
    "\002\000\004\163\134\001\002\000\006\015\136\024\135" +
    "\001\002\000\056\004\030\005\124\006\007\007\070\010" +
    "\076\014\165\016\160\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\004" +
    "\011\uffef\001\002\000\174\002\uff80\003\uff80\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\013\uff80\015\uff80" +
    "\016\uff80\020\uff80\022\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\037\uff80" +
    "\045\uff80\051\uff80\053\uff80\054\uff80\056\uff80\057\uff80\064" +
    "\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\100\uff80\101\uff80\102\uff80\103" +
    "\uff80\104\uff80\105\uff80\116\uff80\123\uff80\132\uff80\133\uff80" +
    "\134\uff80\135\uff80\137\uff80\144\uff80\145\uff80\146\uff80\154" +
    "\uff80\155\uff80\156\uff80\157\uff80\160\uff80\162\uff80\001\002" +
    "\000\174\002\uff7c\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007" +
    "\uff7c\010\uff7c\011\uff7c\013\uff7c\015\uff7c\016\uff7c\020\uff7c" +
    "\022\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\034\uff7c\037\uff7c\045\uff7c\051\uff7c" +
    "\053\uff7c\054\uff7c\056\uff7c\057\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105" +
    "\uff7c\116\uff7c\123\uff7c\132\uff7c\133\uff7c\134\uff7c\135\uff7c" +
    "\137\uff7c\144\uff7c\145\uff7c\146\uff7c\154\uff7c\155\uff7c\156" +
    "\uff7c\157\uff7c\160\uff7c\162\uff7c\001\002\000\174\002\uff7e" +
    "\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011" +
    "\uff7e\013\uff7e\015\uff7e\016\uff7e\020\uff7e\022\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\037\uff7e\045\uff7e\051\uff7e\053\uff7e\054\uff7e" +
    "\056\uff7e\057\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\100\uff7e" +
    "\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\116\uff7e\123" +
    "\uff7e\132\uff7e\133\uff7e\134\uff7e\135\uff7e\137\uff7e\144\uff7e" +
    "\145\uff7e\146\uff7e\154\uff7e\155\uff7e\156\uff7e\157\uff7e\160" +
    "\uff7e\162\uff7e\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\004\014\302\001\002\000\174\002\uff7d\003\uff7d" +
    "\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\013" +
    "\uff7d\015\uff7d\016\uff7d\020\uff7d\022\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\037\uff7d\045\uff7d\051\uff7d\053\uff7d\054\uff7d\056\uff7d" +
    "\057\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071" +
    "\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\100\uff7d\101\uff7d" +
    "\102\uff7d\103\uff7d\104\uff7d\105\uff7d\116\uff7d\123\uff7d\132" +
    "\uff7d\133\uff7d\134\uff7d\135\uff7d\137\uff7d\144\uff7d\145\uff7d" +
    "\146\uff7d\154\uff7d\155\uff7d\156\uff7d\157\uff7d\160\uff7d\162" +
    "\uff7d\001\002\000\202\002\uff7a\003\uff7a\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\011\uff7a\013\uff7a\015\uff7a\016" +
    "\uff7a\020\uff7a\022\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\037\uff7a\045" +
    "\uff7a\051\uff7a\053\uff7a\054\uff7a\056\uff7a\057\uff7a\064\uff7a" +
    "\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073" +
    "\uff7a\074\uff7a\075\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a" +
    "\104\uff7a\105\uff7a\116\uff7a\123\uff7a\132\uff7a\133\uff7a\134" +
    "\uff7a\135\uff7a\137\uff7a\140\274\141\275\142\273\144\uff7a" +
    "\145\uff7a\146\uff7a\154\uff7a\155\uff7a\156\uff7a\157\uff7a\160" +
    "\uff7a\162\uff7a\001\002\000\004\014\270\001\002\000\006" +
    "\015\266\024\265\001\002\000\174\002\uff7b\003\uff7b\004" +
    "\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\013\uff7b" +
    "\015\uff7b\016\uff7b\020\uff7b\022\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\037\uff7b\045\uff7b\051\uff7b\053\uff7b\054\uff7b\056\uff7b\057" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\100\uff7b\101\uff7b\102" +
    "\uff7b\103\uff7b\104\uff7b\105\uff7b\116\uff7b\123\uff7b\132\uff7b" +
    "\133\uff7b\134\uff7b\135\uff7b\137\uff7b\144\uff7b\145\uff7b\146" +
    "\uff7b\154\uff7b\155\uff7b\156\uff7b\157\uff7b\160\uff7b\162\uff7b" +
    "\001\002\000\046\015\uff97\024\uff97\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\057\204\144\177" +
    "\145\175\154\173\155\176\156\203\157\171\160\202\162" +
    "\205\001\002\000\206\002\uff6b\003\uff6b\004\uff6b\005\uff6b" +
    "\006\uff6b\007\uff6b\010\uff6b\011\uff6b\013\uff6b\015\uff6b\016" +
    "\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\024\uff6b\025\uff6b" +
    "\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034" +
    "\uff6b\037\uff6b\045\uff6b\051\uff6b\053\uff6b\054\uff6b\056\uff6b" +
    "\057\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071" +
    "\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\100\uff6b\101\uff6b" +
    "\102\uff6b\103\uff6b\104\uff6b\105\uff6b\116\uff6b\123\uff6b\132" +
    "\uff6b\133\uff6b\134\uff6b\135\uff6b\137\uff6b\140\uff6b\141\uff6b" +
    "\142\uff6b\144\uff6b\145\uff6b\146\uff6b\154\uff6b\155\uff6b\156" +
    "\uff6b\157\uff6b\160\uff6b\162\uff6b\001\002\000\174\002\uff82" +
    "\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\013\uff82\015\uff82\016\uff82\020\uff82\022\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\037\uff82\045\uff82\051\uff82\053\uff82\054\uff82" +
    "\056\uff82\057\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\100\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\116\uff82\123" +
    "\uff82\132\uff82\133\uff82\134\uff82\135\uff82\137\uff82\144\uff82" +
    "\145\uff82\146\uff82\154\uff82\155\uff82\156\uff82\157\uff82\160" +
    "\uff82\162\uff82\001\002\000\004\014\262\001\002\000\056" +
    "\004\030\005\124\006\007\007\070\010\076\014\165\016" +
    "\160\035\157\105\004\106\154\107\156\110\146\111\164" +
    "\113\143\143\142\155\155\156\161\163\140\164\150\165" +
    "\162\166\141\167\144\001\002\000\004\014\256\001\002" +
    "\000\174\002\uff76\003\uff76\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\010\uff76\011\uff76\013\uff76\015\uff76\016\uff76\020\uff76" +
    "\022\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\037\uff76\045\uff76\051\uff76" +
    "\053\uff76\054\uff76\056\uff76\057\uff76\064\uff76\065\uff76\066" +
    "\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105" +
    "\uff76\116\uff76\123\uff76\132\uff76\133\uff76\134\uff76\135\uff76" +
    "\137\uff76\144\uff76\145\uff76\146\uff76\154\uff76\155\uff76\156" +
    "\uff76\157\uff76\160\uff76\162\uff76\001\002\000\206\002\uff68" +
    "\003\uff68\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011" +
    "\uff68\013\uff68\014\247\015\uff68\016\uff68\017\uff68\020\uff68" +
    "\022\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031" +
    "\uff68\032\uff68\033\uff68\034\uff68\037\uff68\045\uff68\051\uff68" +
    "\053\uff68\054\uff68\056\uff68\057\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68" +
    "\075\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105" +
    "\uff68\116\uff68\123\uff68\132\uff68\133\uff68\134\uff68\135\uff68" +
    "\137\uff68\140\uff68\141\uff68\142\uff68\144\uff68\145\uff68\146" +
    "\uff68\154\uff68\155\uff68\156\uff68\157\uff68\160\uff68\162\uff68" +
    "\001\002\000\016\004\030\005\124\006\007\007\070\010" +
    "\076\016\234\001\002\000\174\002\uff7f\003\uff7f\004\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\uff7f\015" +
    "\uff7f\016\uff7f\020\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\037" +
    "\uff7f\045\uff7f\051\uff7f\053\uff7f\054\uff7f\056\uff7f\057\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\104\uff7f\105\uff7f\116\uff7f\123\uff7f\132\uff7f\133" +
    "\uff7f\134\uff7f\135\uff7f\137\uff7f\144\uff7f\145\uff7f\146\uff7f" +
    "\154\uff7f\155\uff7f\156\uff7f\157\uff7f\160\uff7f\162\uff7f\001" +
    "\002\000\174\002\uff81\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\013\uff81\015\uff81\016\uff81\020" +
    "\uff81\022\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\037\uff81\045\uff81\051" +
    "\uff81\053\uff81\054\uff81\056\uff81\057\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81" +
    "\105\uff81\116\uff81\123\uff81\132\uff81\133\uff81\134\uff81\135" +
    "\uff81\137\uff81\144\uff81\145\uff81\146\uff81\154\uff81\155\uff81" +
    "\156\uff81\157\uff81\160\uff81\162\uff81\001\002\000\004\014" +
    "\231\001\002\000\056\004\030\005\124\006\007\007\070" +
    "\010\076\014\165\016\160\035\157\105\004\106\154\107" +
    "\156\110\146\111\164\113\143\143\142\155\155\156\161" +
    "\163\140\164\150\165\162\166\141\167\144\001\002\000" +
    "\174\002\uff74\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74" +
    "\010\uff74\011\uff74\013\uff74\015\uff74\016\uff74\020\uff74\022" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\037\uff74\045\uff74\051\uff74\053" +
    "\uff74\054\uff74\056\uff74\057\uff74\064\uff74\065\uff74\066\uff74" +
    "\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075" +
    "\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74" +
    "\116\uff74\123\uff74\132\uff74\133\uff74\134\uff74\135\uff74\137" +
    "\uff74\144\uff74\145\uff74\146\uff74\154\uff74\155\uff74\156\uff74" +
    "\157\uff74\160\uff74\162\uff74\001\002\000\044\015\207\025" +
    "\201\026\172\027\210\030\200\031\206\032\174\033\170" +
    "\057\204\144\177\145\175\154\173\155\176\156\203\157" +
    "\171\160\202\162\205\001\002\000\056\004\030\005\124" +
    "\006\007\007\070\010\076\014\165\016\160\035\157\105" +
    "\004\106\154\107\156\110\146\111\164\113\143\143\142" +
    "\155\155\156\161\163\140\164\150\165\162\166\141\167" +
    "\144\001\002\000\056\004\030\005\124\006\007\007\070" +
    "\010\076\014\165\016\160\035\157\105\004\106\154\107" +
    "\156\110\146\111\164\113\143\143\142\155\155\156\161" +
    "\163\140\164\150\165\162\166\141\167\144\001\002\000" +
    "\056\004\030\005\124\006\007\007\070\010\076\014\165" +
    "\016\160\035\157\105\004\106\154\107\156\110\146\111" +
    "\164\113\143\143\142\155\155\156\161\163\140\164\150" +
    "\165\162\166\141\167\144\001\002\000\056\004\030\005" +
    "\124\006\007\007\070\010\076\014\165\016\160\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\056\004\030\005\124\006\007\007" +
    "\070\010\076\014\165\016\160\035\157\105\004\106\154" +
    "\107\156\110\146\111\164\113\143\143\142\155\155\156" +
    "\161\163\140\164\150\165\162\166\141\167\144\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\056\004\030" +
    "\005\124\006\007\007\070\010\076\014\165\016\160\035" +
    "\157\105\004\106\154\107\156\110\146\111\164\113\143" +
    "\143\142\155\155\156\161\163\140\164\150\165\162\166" +
    "\141\167\144\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\056\004\030\005\124\006\007\007\070\010\076" +
    "\014\165\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\113\143\143\142\155\155\156\161\163\140" +
    "\164\150\165\162\166\141\167\144\001\002\000\056\004" +
    "\030\005\124\006\007\007\070\010\076\014\165\016\160" +
    "\035\157\105\004\106\154\107\156\110\146\111\164\113" +
    "\143\143\142\155\155\156\161\163\140\164\150\165\162" +
    "\166\141\167\144\001\002\000\056\004\030\005\124\006" +
    "\007\007\070\010\076\014\165\016\160\035\157\105\004" +
    "\106\154\107\156\110\146\111\164\113\143\143\142\155" +
    "\155\156\161\163\140\164\150\165\162\166\141\167\144" +
    "\001\002\000\056\004\030\005\124\006\007\007\070\010" +
    "\076\014\165\016\160\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\004" +
    "\016\214\001\002\000\056\004\030\005\124\006\007\007" +
    "\070\010\076\014\165\016\160\035\157\105\004\106\154" +
    "\107\156\110\146\111\164\113\143\143\142\155\155\156" +
    "\161\163\140\164\150\165\162\166\141\167\144\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\174\002\uff78" +
    "\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011" +
    "\uff78\013\uff78\015\uff78\016\uff78\020\uff78\022\uff78\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\037\uff78\045\uff78\051\uff78\053\uff78\054\uff78" +
    "\056\uff78\057\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070" +
    "\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075\uff78\100\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\116\uff78\123" +
    "\uff78\132\uff78\133\uff78\134\uff78\135\uff78\137\uff78\144\uff78" +
    "\145\uff78\146\uff78\154\uff78\155\uff78\156\uff78\157\uff78\160" +
    "\uff78\162\uff78\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\174\002\uff8d\003\uff8d\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\013\uff8d\015\uff8d\016\uff8d\020" +
    "\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\170\034\uff8d\037\uff8d\045\uff8d\051" +
    "\uff8d\053\uff8d\054\uff8d\056\uff8d\057\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\116\uff8d\123\uff8d\132\uff8d\133\uff8d\134\uff8d\135" +
    "\uff8d\137\uff8d\144\uff8d\145\uff8d\146\uff8d\154\173\155\176" +
    "\156\203\157\171\160\uff8d\162\205\001\002\000\174\002" +
    "\uff8a\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\013\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\033\170\034\uff8a\037\uff8a\045\uff8a\051\uff8a\053\uff8a\054" +
    "\uff8a\056\uff8a\057\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\100" +
    "\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\116\uff8a" +
    "\123\uff8a\132\uff8a\133\uff8a\134\uff8a\135\uff8a\137\uff8a\144" +
    "\uff8a\145\uff8a\146\uff8a\154\173\155\176\156\203\157\171" +
    "\160\uff8a\162\205\001\002\000\174\002\uff85\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\013\uff85" +
    "\015\uff85\016\uff85\020\uff85\022\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\170\034\uff85" +
    "\037\uff85\045\uff85\051\uff85\053\uff85\054\uff85\056\uff85\057" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\072\uff85\073\uff85\074\uff85\075\uff85\100\uff85\101\uff85\102" +
    "\uff85\103\uff85\104\uff85\105\uff85\116\uff85\123\uff85\132\uff85" +
    "\133\uff85\134\uff85\135\uff85\137\uff85\144\uff85\145\uff85\146" +
    "\uff85\154\uff85\155\uff85\156\uff85\157\uff85\160\uff85\162\uff85" +
    "\001\002\000\174\002\uff91\003\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\013\uff91\015\uff91\016\uff91" +
    "\020\uff91\022\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\034\uff91\037\uff91\045\uff91" +
    "\051\uff91\053\uff91\054\uff91\056\uff91\057\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\074\uff91\075\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\105\uff91\116\uff91\123\uff91\132\uff91\133\uff91\134\uff91" +
    "\135\uff91\137\uff91\144\uff91\145\uff91\146\uff91\154\uff91\155" +
    "\uff91\156\uff91\157\uff91\160\uff91\162\uff91\001\002\000\174" +
    "\002\uff87\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\013\uff87\015\uff87\016\uff87\020\uff87\022\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\170\034\uff87\037\uff87\045\uff87\051\uff87\053\uff87" +
    "\054\uff87\056\uff87\057\uff87\064\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\116" +
    "\uff87\123\uff87\132\uff87\133\uff87\134\uff87\135\uff87\137\uff87" +
    "\144\uff87\145\uff87\146\uff87\154\uff87\155\uff87\156\uff87\157" +
    "\uff87\160\uff87\162\uff87\001\002\000\174\002\uff92\003\uff92" +
    "\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\013" +
    "\uff92\015\uff92\016\uff92\020\uff92\022\uff92\024\uff92\025\201" +
    "\026\172\027\210\030\200\031\206\032\174\033\170\034" +
    "\uff92\037\uff92\045\uff92\051\uff92\053\uff92\054\uff92\056\uff92" +
    "\057\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071" +
    "\uff92\072\uff92\073\uff92\074\uff92\075\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\116\uff92\123\uff92\132" +
    "\uff92\133\uff92\134\uff92\135\uff92\137\uff92\144\uff92\145\uff92" +
    "\146\uff92\154\173\155\176\156\203\157\171\160\uff92\162" +
    "\205\001\002\000\174\002\uff8f\003\uff8f\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\013\uff8f\015\uff8f\016" +
    "\uff8f\020\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\027\210" +
    "\030\200\031\206\032\174\033\170\034\uff8f\037\uff8f\045" +
    "\uff8f\051\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\064\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\075\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\105\uff8f\116\uff8f\123\uff8f\132\uff8f\133\uff8f\134" +
    "\uff8f\135\uff8f\137\uff8f\144\uff8f\145\uff8f\146\uff8f\154\173" +
    "\155\176\156\203\157\171\160\uff8f\162\205\001\002\000" +
    "\174\002\uff8b\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\013\uff8b\015\uff8b\016\uff8b\020\uff8b\022" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\170\034\uff8b\037\uff8b\045\uff8b\051\uff8b\053" +
    "\uff8b\054\uff8b\056\uff8b\057\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\116\uff8b\123\uff8b\132\uff8b\133\uff8b\134\uff8b\135\uff8b\137" +
    "\uff8b\144\uff8b\145\uff8b\146\uff8b\154\173\155\176\156\203" +
    "\157\171\160\uff8b\162\205\001\002\000\174\002\uff94\003" +
    "\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\013\uff94\015\uff94\016\uff94\020\uff94\022\uff94\024\uff94\025" +
    "\201\026\172\027\210\030\200\031\206\032\174\033\170" +
    "\034\uff94\037\uff94\045\uff94\051\uff94\053\uff94\054\uff94\056" +
    "\uff94\057\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94" +
    "\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\100\uff94\101" +
    "\uff94\102\uff94\103\uff94\104\uff94\105\uff94\116\uff94\123\uff94" +
    "\132\uff94\133\uff94\134\uff94\135\uff94\137\uff94\144\uff94\145" +
    "\uff94\146\uff94\154\173\155\176\156\203\157\171\160\202" +
    "\162\205\001\002\000\174\002\uff88\003\uff88\004\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\011\uff88\013\uff88\015\uff88" +
    "\016\uff88\020\uff88\022\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\170\034\uff88\037\uff88" +
    "\045\uff88\051\uff88\053\uff88\054\uff88\056\uff88\057\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\100\uff88\101\uff88\102\uff88\103" +
    "\uff88\104\uff88\105\uff88\116\uff88\123\uff88\132\uff88\133\uff88" +
    "\134\uff88\135\uff88\137\uff88\144\uff88\145\uff88\146\uff88\154" +
    "\uff88\155\uff88\156\203\157\171\160\uff88\162\205\001\002" +
    "\000\174\002\uff93\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\013\uff93\015\uff93\016\uff93\020\uff93" +
    "\022\uff93\024\uff93\025\201\026\172\027\210\030\200\031" +
    "\206\032\174\033\170\034\uff93\037\uff93\045\uff93\051\uff93" +
    "\053\uff93\054\uff93\056\uff93\057\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105" +
    "\uff93\116\uff93\123\uff93\132\uff93\133\uff93\134\uff93\135\uff93" +
    "\137\uff93\144\177\145\uff93\146\uff93\154\173\155\176\156" +
    "\203\157\171\160\202\162\205\001\002\000\174\002\uff8c" +
    "\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\013\uff8c\015\uff8c\016\uff8c\020\uff8c\022\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\170\034\uff8c\037\uff8c\045\uff8c\051\uff8c\053\uff8c\054\uff8c" +
    "\056\uff8c\057\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\100\uff8c" +
    "\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\116\uff8c\123" +
    "\uff8c\132\uff8c\133\uff8c\134\uff8c\135\uff8c\137\uff8c\144\uff8c" +
    "\145\uff8c\146\uff8c\154\173\155\176\156\203\157\171\160" +
    "\uff8c\162\205\001\002\000\174\002\uff89\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\013\uff89\015" +
    "\uff89\016\uff89\020\uff89\022\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\170\034\uff89\037" +
    "\uff89\045\uff89\051\uff89\053\uff89\054\uff89\056\uff89\057\uff89" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072" +
    "\uff89\073\uff89\074\uff89\075\uff89\100\uff89\101\uff89\102\uff89" +
    "\103\uff89\104\uff89\105\uff89\116\uff89\123\uff89\132\uff89\133" +
    "\uff89\134\uff89\135\uff89\137\uff89\144\uff89\145\uff89\146\uff89" +
    "\154\uff89\155\uff89\156\203\157\171\160\uff89\162\205\001" +
    "\002\000\174\002\uff8e\003\uff8e\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\013\uff8e\015\uff8e\016\uff8e\020" +
    "\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\210\030\200" +
    "\031\206\032\174\033\170\034\uff8e\037\uff8e\045\uff8e\051" +
    "\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e" +
    "\105\uff8e\116\uff8e\123\uff8e\132\uff8e\133\uff8e\134\uff8e\135" +
    "\uff8e\137\uff8e\144\uff8e\145\uff8e\146\uff8e\154\173\155\176" +
    "\156\203\157\171\160\uff8e\162\205\001\002\000\174\002" +
    "\uff86\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\013\uff86\015\uff86\016\uff86\020\uff86\022\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\170\034\uff86\037\uff86\045\uff86\051\uff86\053\uff86\054" +
    "\uff86\056\uff86\057\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\100" +
    "\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86\116\uff86" +
    "\123\uff86\132\uff86\133\uff86\134\uff86\135\uff86\137\uff86\144" +
    "\uff86\145\uff86\146\uff86\154\uff86\155\uff86\156\uff86\157\uff86" +
    "\160\uff86\162\uff86\001\002\000\174\002\uff84\003\uff84\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\013\uff84" +
    "\015\uff84\016\uff84\020\uff84\022\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\037\uff84\045\uff84\051\uff84\053\uff84\054\uff84\056\uff84\057" +
    "\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84" +
    "\072\uff84\073\uff84\074\uff84\075\uff84\100\uff84\101\uff84\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\116\uff84\123\uff84\132\uff84" +
    "\133\uff84\134\uff84\135\uff84\137\uff84\144\uff84\145\uff84\146" +
    "\uff84\154\uff84\155\uff84\156\uff84\157\uff84\160\uff84\162\uff84" +
    "\001\002\000\004\016\232\001\002\000\004\015\233\001" +
    "\002\000\174\002\uff75\003\uff75\004\uff75\005\uff75\006\uff75" +
    "\007\uff75\010\uff75\011\uff75\013\uff75\015\uff75\016\uff75\020" +
    "\uff75\022\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\037\uff75\045\uff75\051" +
    "\uff75\053\uff75\054\uff75\056\uff75\057\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074" +
    "\uff75\075\uff75\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75" +
    "\105\uff75\116\uff75\123\uff75\132\uff75\133\uff75\134\uff75\135" +
    "\uff75\137\uff75\144\uff75\145\uff75\146\uff75\154\uff75\155\uff75" +
    "\156\uff75\157\uff75\160\uff75\162\uff75\001\002\000\206\002" +
    "\uff68\003\uff68\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\013\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021" +
    "\uff68\022\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\033\uff68\034\uff68\037\uff68\045\uff68\051" +
    "\uff68\053\uff68\054\uff68\056\uff68\057\uff68\064\uff68\065\uff68" +
    "\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074" +
    "\uff68\075\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68" +
    "\105\uff68\116\uff68\123\uff68\132\uff68\133\uff68\134\uff68\135" +
    "\uff68\137\uff68\140\uff68\141\uff68\142\uff68\144\uff68\145\uff68" +
    "\146\uff68\154\uff68\155\uff68\156\uff68\157\uff68\160\uff68\162" +
    "\uff68\001\002\000\176\002\uff79\003\uff79\004\uff79\005\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\013\uff79\015\uff79\016" +
    "\uff79\020\uff79\022\uff79\024\uff79\025\uff79\026\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\037\uff79\045" +
    "\uff79\051\uff79\053\uff79\054\uff79\056\uff79\057\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073" +
    "\uff79\074\uff79\075\uff79\100\uff79\101\uff79\102\uff79\103\uff79" +
    "\104\uff79\105\uff79\116\uff79\123\uff79\132\uff79\133\uff79\134" +
    "\uff79\135\uff79\137\uff79\142\236\144\uff79\145\uff79\146\uff79" +
    "\154\uff79\155\uff79\156\uff79\157\uff79\160\uff79\162\uff79\001" +
    "\002\000\016\004\030\005\124\006\007\007\070\010\076" +
    "\016\234\001\002\000\206\002\uff6d\003\uff6d\004\uff6d\005" +
    "\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\013\uff6d\015\uff6d" +
    "\016\uff6d\017\240\020\uff6d\021\uff6d\022\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d" +
    "\034\uff6d\037\uff6d\045\uff6d\051\uff6d\053\uff6d\054\uff6d\056" +
    "\uff6d\057\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d" +
    "\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\100\uff6d\101" +
    "\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\116\uff6d\123\uff6d" +
    "\132\uff6d\133\uff6d\134\uff6d\135\uff6d\137\uff6d\140\uff6d\141" +
    "\uff6d\142\uff6d\144\uff6d\145\uff6d\146\uff6d\154\uff6d\155\uff6d" +
    "\156\uff6d\157\uff6d\160\uff6d\162\uff6d\001\002\000\056\004" +
    "\030\005\124\006\007\007\070\010\076\014\165\016\160" +
    "\035\157\105\004\106\154\107\156\110\146\111\164\113" +
    "\143\143\142\155\155\156\161\163\140\164\150\165\162" +
    "\166\141\167\144\001\002\000\206\002\uff6a\003\uff6a\004" +
    "\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\013\uff6a" +
    "\015\uff6a\016\uff6a\017\242\020\uff6a\021\uff6a\022\uff6a\024" +
    "\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\037\uff6a\045\uff6a\051\uff6a\053\uff6a\054" +
    "\uff6a\056\uff6a\057\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\100" +
    "\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\116\uff6a" +
    "\123\uff6a\132\uff6a\133\uff6a\134\uff6a\135\uff6a\137\uff6a\140" +
    "\uff6a\141\uff6a\142\uff6a\144\uff6a\145\uff6a\146\uff6a\154\uff6a" +
    "\155\uff6a\156\uff6a\157\uff6a\160\uff6a\162\uff6a\001\002\000" +
    "\056\004\030\005\124\006\007\007\070\010\076\014\165" +
    "\016\160\035\157\105\004\106\154\107\156\110\146\111" +
    "\164\113\143\143\142\155\155\156\161\163\140\164\150" +
    "\165\162\166\141\167\144\001\002\000\044\020\244\025" +
    "\201\026\172\027\210\030\200\031\206\032\174\033\170" +
    "\057\204\144\177\145\175\154\173\155\176\156\203\157" +
    "\171\160\202\162\205\001\002\000\206\002\uff96\003\uff96" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\013" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\037\uff96\045\uff96\051\uff96\053\uff96" +
    "\054\uff96\056\uff96\057\uff96\064\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96" +
    "\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\116" +
    "\uff96\123\uff96\132\uff96\133\uff96\134\uff96\135\uff96\137\uff96" +
    "\140\uff96\141\uff96\142\uff96\144\uff96\145\uff96\146\uff96\154" +
    "\uff96\155\uff96\156\uff96\157\uff96\160\uff96\162\uff96\001\002" +
    "\000\044\020\246\025\201\026\172\027\210\030\200\031" +
    "\206\032\174\033\170\057\204\144\177\145\175\154\173" +
    "\155\176\156\203\157\171\160\202\162\205\001\002\000" +
    "\206\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\013\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\037\uff95\045" +
    "\uff95\051\uff95\053\uff95\054\uff95\056\uff95\057\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\100\uff95\101\uff95\102\uff95\103\uff95" +
    "\104\uff95\105\uff95\116\uff95\123\uff95\132\uff95\133\uff95\134" +
    "\uff95\135\uff95\137\uff95\140\uff95\141\uff95\142\uff95\144\uff95" +
    "\145\uff95\146\uff95\154\uff95\155\uff95\156\uff95\157\uff95\160" +
    "\uff95\162\uff95\001\002\000\060\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\015\uff9f\016\160\035\157\105" +
    "\004\106\154\107\156\110\146\111\164\113\143\143\142" +
    "\155\155\156\161\163\140\164\150\165\162\166\141\167" +
    "\144\001\002\000\004\015\255\001\002\000\046\015\uff9d" +
    "\024\uff9d\025\201\026\172\027\210\030\200\031\206\032" +
    "\174\033\170\057\204\144\177\145\175\154\173\155\176" +
    "\156\203\157\171\160\202\162\205\001\002\000\006\015" +
    "\uffa0\024\253\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\046\015\uff9e\024\uff9e\025\201\026\172\027\210" +
    "\030\200\031\206\032\174\033\170\057\204\144\177\145" +
    "\175\154\173\155\176\156\203\157\171\160\202\162\205" +
    "\001\002\000\174\002\uff4a\003\uff4a\004\uff4a\005\uff4a\006" +
    "\uff4a\007\uff4a\010\uff4a\011\uff4a\013\uff4a\015\uff4a\016\uff4a" +
    "\020\uff4a\022\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\030" +
    "\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\037\uff4a\045\uff4a" +
    "\051\uff4a\053\uff4a\054\uff4a\056\uff4a\057\uff4a\064\uff4a\065" +
    "\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a" +
    "\074\uff4a\075\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a\104" +
    "\uff4a\105\uff4a\116\uff4a\123\uff4a\132\uff4a\133\uff4a\134\uff4a" +
    "\135\uff4a\137\uff4a\144\uff4a\145\uff4a\146\uff4a\154\uff4a\155" +
    "\uff4a\156\uff4a\157\uff4a\160\uff4a\162\uff4a\001\002\000\056" +
    "\004\030\005\124\006\007\007\070\010\076\014\165\016" +
    "\160\035\157\105\004\106\154\107\156\110\146\111\164" +
    "\113\143\143\142\155\155\156\161\163\140\164\150\165" +
    "\162\166\141\167\144\001\002\000\044\015\260\025\201" +
    "\026\172\027\210\030\200\031\206\032\174\033\170\057" +
    "\204\144\177\145\175\154\173\155\176\156\203\157\171" +
    "\160\202\162\205\001\002\000\174\002\uff73\003\uff73\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\013\uff73" +
    "\015\uff73\016\uff73\020\uff73\022\uff73\024\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\037\uff73\045\uff73\051\uff73\053\uff73\054\uff73\056\uff73\057" +
    "\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73" +
    "\072\uff73\073\uff73\074\uff73\075\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\116\uff73\123\uff73\132\uff73" +
    "\133\uff73\134\uff73\135\uff73\137\uff73\144\uff73\145\uff73\146" +
    "\uff73\154\uff73\155\uff73\156\uff73\157\uff73\160\uff73\162\uff73" +
    "\001\002\000\174\002\uff83\003\uff83\004\uff83\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\011\uff83\013\uff83\015\uff83\016\uff83" +
    "\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\170\034\uff83\037\uff83\045\uff83" +
    "\051\uff83\053\uff83\054\uff83\056\uff83\057\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\075\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\116\uff83\123\uff83\132\uff83\133\uff83\134\uff83" +
    "\135\uff83\137\uff83\144\uff83\145\uff83\146\uff83\154\uff83\155" +
    "\uff83\156\203\157\171\160\uff83\162\205\001\002\000\056" +
    "\004\030\005\124\006\007\007\070\010\076\014\165\016" +
    "\160\035\157\105\004\106\154\107\156\110\146\111\164" +
    "\113\143\143\142\155\155\156\161\163\140\164\150\165" +
    "\162\166\141\167\144\001\002\000\044\015\264\025\201" +
    "\026\172\027\210\030\200\031\206\032\174\033\170\057" +
    "\204\144\177\145\175\154\173\155\176\156\203\157\171" +
    "\160\202\162\205\001\002\000\174\002\uff77\003\uff77\004" +
    "\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\013\uff77" +
    "\015\uff77\016\uff77\020\uff77\022\uff77\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
    "\037\uff77\045\uff77\051\uff77\053\uff77\054\uff77\056\uff77\057" +
    "\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77" +
    "\072\uff77\073\uff77\074\uff77\075\uff77\100\uff77\101\uff77\102" +
    "\uff77\103\uff77\104\uff77\105\uff77\116\uff77\123\uff77\132\uff77" +
    "\133\uff77\134\uff77\135\uff77\137\uff77\144\uff77\145\uff77\146" +
    "\uff77\154\uff77\155\uff77\156\uff77\157\uff77\160\uff77\162\uff77" +
    "\001\002\000\056\004\030\005\124\006\007\007\070\010" +
    "\076\014\165\016\160\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\004" +
    "\011\uffee\001\002\000\046\015\uff98\024\uff98\025\201\026" +
    "\172\027\210\030\200\031\206\032\174\033\170\057\204" +
    "\144\177\145\175\154\173\155\176\156\203\157\171\160" +
    "\202\162\205\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\044\015\272\025\201\026\172\027\210\030\200" +
    "\031\206\032\174\033\170\057\204\144\177\145\175\154" +
    "\173\155\176\156\203\157\171\160\202\162\205\001\002" +
    "\000\174\002\uff72\003\uff72\004\uff72\005\uff72\006\uff72\007" +
    "\uff72\010\uff72\011\uff72\013\uff72\015\uff72\016\uff72\020\uff72" +
    "\022\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\037\uff72\045\uff72\051\uff72" +
    "\053\uff72\054\uff72\056\uff72\057\uff72\064\uff72\065\uff72\066" +
    "\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72" +
    "\075\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105" +
    "\uff72\116\uff72\123\uff72\132\uff72\133\uff72\134\uff72\135\uff72" +
    "\137\uff72\144\uff72\145\uff72\146\uff72\154\uff72\155\uff72\156" +
    "\uff72\157\uff72\160\uff72\162\uff72\001\002\000\016\004\030" +
    "\005\124\006\007\007\070\010\076\016\276\001\002\000" +
    "\174\002\uff6f\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f" +
    "\010\uff6f\011\uff6f\013\uff6f\015\uff6f\016\uff6f\020\uff6f\022" +
    "\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\037\uff6f\045\uff6f\051\uff6f\053" +
    "\uff6f\054\uff6f\056\uff6f\057\uff6f\064\uff6f\065\uff6f\066\uff6f" +
    "\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075" +
    "\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f" +
    "\116\uff6f\123\uff6f\132\uff6f\133\uff6f\134\uff6f\135\uff6f\137" +
    "\uff6f\144\uff6f\145\uff6f\146\uff6f\154\uff6f\155\uff6f\156\uff6f" +
    "\157\uff6f\160\uff6f\162\uff6f\001\002\000\174\002\uff6e\003" +
    "\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\013\uff6e\015\uff6e\016\uff6e\020\uff6e\022\uff6e\024\uff6e\025" +
    "\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e" +
    "\034\uff6e\037\uff6e\045\uff6e\051\uff6e\053\uff6e\054\uff6e\056" +
    "\uff6e\057\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e" +
    "\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\100\uff6e\101" +
    "\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\116\uff6e\123\uff6e" +
    "\132\uff6e\133\uff6e\134\uff6e\135\uff6e\137\uff6e\144\uff6e\145" +
    "\uff6e\146\uff6e\154\uff6e\155\uff6e\156\uff6e\157\uff6e\160\uff6e" +
    "\162\uff6e\001\002\000\210\002\uff68\003\uff68\004\uff68\005" +
    "\uff68\006\uff68\007\uff68\010\uff68\011\uff68\013\uff68\014\277" +
    "\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\037\uff68\045\uff68\051\uff68\053\uff68\054" +
    "\uff68\056\uff68\057\uff68\064\uff68\065\uff68\066\uff68\067\uff68" +
    "\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\100" +
    "\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\116\uff68" +
    "\123\uff68\132\uff68\133\uff68\134\uff68\135\uff68\137\uff68\140" +
    "\uff68\141\uff68\142\uff68\144\uff68\145\uff68\146\uff68\154\uff68" +
    "\155\uff68\156\uff68\157\uff68\160\uff68\162\uff68\001\002\000" +
    "\060\004\030\005\124\006\007\007\070\010\076\014\165" +
    "\015\uff9f\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\113\143\143\142\155\155\156\161\163\140" +
    "\164\150\165\162\166\141\167\144\001\002\000\004\015" +
    "\301\001\002\000\174\002\uff4b\003\uff4b\004\uff4b\005\uff4b" +
    "\006\uff4b\007\uff4b\010\uff4b\011\uff4b\013\uff4b\015\uff4b\016" +
    "\uff4b\020\uff4b\022\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b" +
    "\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\037\uff4b\045" +
    "\uff4b\051\uff4b\053\uff4b\054\uff4b\056\uff4b\057\uff4b\064\uff4b" +
    "\065\uff4b\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\073" +
    "\uff4b\074\uff4b\075\uff4b\100\uff4b\101\uff4b\102\uff4b\103\uff4b" +
    "\104\uff4b\105\uff4b\116\uff4b\123\uff4b\132\uff4b\133\uff4b\134" +
    "\uff4b\135\uff4b\137\uff4b\144\uff4b\145\uff4b\146\uff4b\154\uff4b" +
    "\155\uff4b\156\uff4b\157\uff4b\160\uff4b\162\uff4b\001\002\000" +
    "\056\004\030\005\124\006\007\007\070\010\076\014\165" +
    "\016\160\035\157\105\004\106\154\107\156\110\146\111" +
    "\164\113\143\143\142\155\155\156\161\163\140\164\150" +
    "\165\162\166\141\167\144\001\002\000\044\024\304\025" +
    "\201\026\172\027\210\030\200\031\206\032\174\033\170" +
    "\057\204\144\177\145\175\154\173\155\176\156\203\157" +
    "\171\160\202\162\205\001\002\000\056\004\030\005\124" +
    "\006\007\007\070\010\076\014\165\016\160\035\157\105" +
    "\004\106\154\107\156\110\146\111\164\113\143\143\142" +
    "\155\155\156\161\163\140\164\150\165\162\166\141\167" +
    "\144\001\002\000\044\015\306\025\201\026\172\027\210" +
    "\030\200\031\206\032\174\033\170\057\204\144\177\145" +
    "\175\154\173\155\176\156\203\157\171\160\202\162\205" +
    "\001\002\000\174\002\uff71\003\uff71\004\uff71\005\uff71\006" +
    "\uff71\007\uff71\010\uff71\011\uff71\013\uff71\015\uff71\016\uff71" +
    "\020\uff71\022\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\037\uff71\045\uff71" +
    "\051\uff71\053\uff71\054\uff71\056\uff71\057\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71" +
    "\074\uff71\075\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104" +
    "\uff71\105\uff71\116\uff71\123\uff71\132\uff71\133\uff71\134\uff71" +
    "\135\uff71\137\uff71\144\uff71\145\uff71\146\uff71\154\uff71\155" +
    "\uff71\156\uff71\157\uff71\160\uff71\162\uff71\001\002\000\174" +
    "\002\uff90\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\013\uff90\015\uff90\016\uff90\020\uff90\022\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\034\uff90\037\uff90\045\uff90\051\uff90\053\uff90" +
    "\054\uff90\056\uff90\057\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\116" +
    "\uff90\123\uff90\132\uff90\133\uff90\134\uff90\135\uff90\137\uff90" +
    "\144\uff90\145\uff90\146\uff90\154\uff90\155\uff90\156\uff90\157" +
    "\uff90\160\uff90\162\uff90\001\002\000\122\002\uffd3\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\016" +
    "\uffd3\022\uffd3\034\uffd3\037\uffd3\041\uffd3\044\uffd3\045\uffd3" +
    "\051\uffd3\053\uffd3\054\uffd3\064\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\100\uffd3\101\uffd3\102\uffd3\104\uffd3\105\uffd3\116\uffd3\123" +
    "\uffd3\132\uffd3\133\uffd3\134\uffd3\135\uffd3\146\uffd3\001\002" +
    "\000\122\002\uff5d\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007" +
    "\uff5d\010\uff5d\013\uff5d\016\uff5d\022\uff5d\034\uff5d\037\uff5d" +
    "\041\uff5d\044\uff5d\045\uff5d\051\uff5d\053\uff5d\054\uff5d\064" +
    "\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d" +
    "\073\uff5d\074\uff5d\075\uff5d\100\uff5d\101\uff5d\102\uff5d\104" +
    "\uff5d\105\uff5d\116\uff5d\123\uff5d\132\uff5d\133\uff5d\134\uff5d" +
    "\135\uff5d\146\uff5d\001\002\000\114\003\106\004\030\005" +
    "\124\006\007\007\070\010\076\013\314\016\042\022\006" +
    "\034\014\037\100\045\120\051\033\053\073\054\104\064" +
    "\044\065\053\066\016\067\047\070\103\071\121\072\043" +
    "\073\026\074\032\075\132\100\046\101\051\102\017\104" +
    "\024\105\004\116\063\123\107\132\022\133\122\134\020" +
    "\135\112\146\116\001\002\000\114\003\106\004\030\005" +
    "\124\006\007\007\070\010\076\013\315\016\042\022\006" +
    "\034\014\037\100\045\120\051\033\053\073\054\104\064" +
    "\044\065\053\066\016\067\047\070\103\071\121\072\043" +
    "\073\026\074\032\075\132\100\046\101\051\102\017\104" +
    "\024\105\004\116\063\123\107\132\022\133\122\134\020" +
    "\135\112\146\116\001\002\000\126\002\uff58\003\uff58\004" +
    "\uff58\005\uff58\006\uff58\007\uff58\010\uff58\013\uff58\016\uff58" +
    "\022\uff58\034\uff58\037\uff58\041\uff58\044\uff58\045\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\064\uff58\065\uff58\066\uff58" +
    "\067\uff58\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075" +
    "\uff58\100\uff58\101\uff58\102\uff58\104\uff58\105\uff58\116\uff58" +
    "\123\uff58\132\uff58\133\uff58\134\uff58\135\uff58\146\uff58\150" +
    "\uff58\001\002\000\126\002\uff59\003\uff59\004\uff59\005\uff59" +
    "\006\uff59\007\uff59\010\uff59\013\uff59\016\uff59\022\uff59\034" +
    "\uff59\037\uff59\041\uff59\044\uff59\045\uff59\051\uff59\052\uff59" +
    "\053\uff59\054\uff59\064\uff59\065\uff59\066\uff59\067\uff59\070" +
    "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\100\uff59" +
    "\101\uff59\102\uff59\104\uff59\105\uff59\116\uff59\123\uff59\132" +
    "\uff59\133\uff59\134\uff59\135\uff59\146\uff59\150\uff59\001\002" +
    "\000\122\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\013\uffec\016\uffec\022\uffec\034\uffec\037\uffec" +
    "\041\uffec\044\uffec\045\uffec\051\uffec\053\uffec\054\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\100\uffec\101\uffec\102\uffec\104" +
    "\uffec\105\uffec\116\uffec\123\uffec\132\uffec\133\uffec\134\uffec" +
    "\135\uffec\146\uffec\001\002\000\122\002\uffe4\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\016\uffe4" +
    "\022\uffe4\034\uffe4\037\uffe4\041\uffe4\044\uffe4\045\uffe4\051" +
    "\uffe4\053\uffe4\054\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\104\uffe4\105\uffe4\116\uffe4\123\uffe4" +
    "\132\uffe4\133\uffe4\134\uffe4\135\uffe4\146\uffe4\001\002\000" +
    "\122\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\013\uffcd\016\uffcd\022\uffcd\034\uffcd\037\uffcd\041" +
    "\uffcd\044\uffcd\045\uffcd\051\uffcd\053\uffcd\054\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\100\uffcd\101\uffcd\102\uffcd\104\uffcd" +
    "\105\uffcd\116\uffcd\123\uffcd\132\uffcd\133\uffcd\134\uffcd\135" +
    "\uffcd\146\uffcd\001\002\000\122\002\uffe6\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\016\uffe6\022" +
    "\uffe6\034\uffe6\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6" +
    "\053\uffe6\054\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\100\uffe6" +
    "\101\uffe6\102\uffe6\104\uffe6\105\uffe6\116\uffe6\123\uffe6\132" +
    "\uffe6\133\uffe6\134\uffe6\135\uffe6\146\uffe6\001\002\000\016" +
    "\004\030\005\124\006\007\007\070\010\076\016\234\001" +
    "\002\000\006\021\u0106\142\236\001\002\000\004\011\u010b" +
    "\001\002\000\004\011\372\001\002\000\012\016\331\017" +
    "\uff6b\021\uff6b\142\uff6b\001\002\000\006\011\uffb6\024\uffb6" +
    "\001\002\000\006\011\uffb8\024\370\001\002\000\012\011" +
    "\uffb5\017\333\021\334\024\uffb5\001\002\000\010\011\uffb3" +
    "\021\351\024\uffb3\001\002\000\060\004\030\005\124\006" +
    "\007\007\070\010\076\014\165\016\160\020\350\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\060\004\030\005\124\006\007\007" +
    "\070\010\076\014\165\016\160\035\157\105\004\106\154" +
    "\107\156\110\146\111\164\112\344\113\143\143\142\155" +
    "\155\156\161\163\140\164\150\165\162\166\141\167\144" +
    "\001\002\000\014\011\uffaf\015\uffaf\017\337\021\uffaf\024" +
    "\uffaf\001\002\000\014\011\uffae\015\uffae\017\242\021\uffae" +
    "\024\uffae\001\002\000\004\020\340\001\002\000\016\011" +
    "\uffad\015\uffad\016\uffad\017\uffad\021\uffad\024\uffad\001\002" +
    "\000\006\011\uffb4\024\uffb4\001\002\000\166\002\uffa3\003" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\015\uffa3\016\uffa3\022\uffa3\024\uffa3\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\034\uffa3\037\uffa3" +
    "\045\uffa3\051\uffa3\053\uffa3\054\uffa3\056\uffa3\057\204\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\100\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\116\uffa3\123\uffa3\132\uffa3\133\uffa3" +
    "\134\uffa3\135\uffa3\144\177\145\175\146\uffa3\154\173\155" +
    "\176\156\203\157\171\160\202\162\205\001\002\000\126" +
    "\002\uffa2\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\015\uffa2\016\uffa2\022\uffa2\024\uffa2\034\uffa2" +
    "\037\uffa2\045\uffa2\051\uffa2\053\uffa2\054\uffa2\056\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\100\uffa2\101\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\116\uffa2\123\uffa2\132\uffa2\133\uffa2" +
    "\134\uffa2\135\uffa2\146\uffa2\001\002\000\004\014\345\001" +
    "\002\000\056\004\030\005\124\006\007\007\070\010\076" +
    "\014\165\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\113\143\143\142\155\155\156\161\163\140" +
    "\164\150\165\162\166\141\167\144\001\002\000\044\015" +
    "\347\025\201\026\172\027\210\030\200\031\206\032\174" +
    "\033\170\057\204\144\177\145\175\154\173\155\176\156" +
    "\203\157\171\160\202\162\205\001\002\000\126\002\uffa1" +
    "\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\015\uffa1\016\uffa1\022\uffa1\024\uffa1\034\uffa1\037\uffa1" +
    "\045\uffa1\051\uffa1\053\uffa1\054\uffa1\056\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\105\uffa1\116\uffa1\123\uffa1\132\uffa1\133\uffa1\134\uffa1" +
    "\135\uffa1\146\uffa1\001\002\000\016\011\uffac\015\uffac\016" +
    "\uffac\017\uffac\021\uffac\024\uffac\001\002\000\060\004\030" +
    "\005\124\006\007\007\070\010\076\012\355\014\165\016" +
    "\160\035\157\105\004\106\154\107\156\110\146\111\164" +
    "\113\143\143\142\155\155\156\161\163\140\164\150\165" +
    "\162\166\141\167\144\001\002\000\006\011\uffb1\024\uffb1" +
    "\001\002\000\006\011\uffb2\024\uffb2\001\002\000\046\011" +
    "\uffb0\024\uffb0\025\201\026\172\027\210\030\200\031\206" +
    "\032\174\033\170\057\204\144\177\145\175\154\173\155" +
    "\176\156\203\157\171\160\202\162\205\001\002\000\062" +
    "\004\030\005\124\006\007\007\070\010\076\012\357\014" +
    "\165\016\160\017\240\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\006" +
    "\013\365\024\366\001\002\000\060\004\030\005\124\006" +
    "\007\007\070\010\076\012\357\014\165\016\160\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\046\013\uffa7\024\uffa7\025\201\026" +
    "\172\027\210\030\200\031\206\032\174\033\170\057\204" +
    "\144\177\145\175\154\173\155\176\156\203\157\171\160" +
    "\202\162\205\001\002\000\006\013\364\017\242\001\002" +
    "\000\006\013\uffa6\024\uffa6\001\002\000\006\013\uffa8\024" +
    "\uffa8\001\002\000\124\002\uffab\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\016\uffab\022\uffab\024" +
    "\uffab\034\uffab\037\uffab\045\uffab\051\uffab\053\uffab\054\uffab" +
    "\056\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\105\uffab\116\uffab\123\uffab\132" +
    "\uffab\133\uffab\134\uffab\135\uffab\146\uffab\001\002\000\010" +
    "\011\uffaa\013\uffaa\024\uffaa\001\002\000\060\004\030\005" +
    "\124\006\007\007\070\010\076\012\357\014\165\016\160" +
    "\035\157\105\004\106\154\107\156\110\146\111\164\113" +
    "\143\143\142\155\155\156\161\163\140\164\150\165\162" +
    "\166\141\167\144\001\002\000\006\013\uffa9\024\uffa9\001" +
    "\002\000\004\016\331\001\002\000\006\011\uffb7\024\uffb7" +
    "\001\002\000\056\004\030\005\124\006\007\007\070\010" +
    "\076\014\165\016\160\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\044" +
    "\011\374\025\201\026\172\027\210\030\200\031\206\032" +
    "\174\033\170\057\204\144\177\145\175\154\173\155\176" +
    "\156\203\157\171\160\202\162\205\001\002\000\016\004" +
    "\030\005\124\006\007\007\070\010\076\016\376\001\002" +
    "\000\004\015\uff3d\001\002\000\014\017\240\021\uff68\140" +
    "\uff68\141\uff68\142\uff68\001\002\000\004\015\uff3a\001\002" +
    "\000\012\021\u0106\140\274\141\275\142\236\001\002\000" +
    "\004\015\u0104\001\002\000\004\015\uff3b\001\002\000\004" +
    "\015\uff3c\001\002\000\004\012\312\001\002\000\122\002" +
    "\uff3e\003\uff3e\004\uff3e\005\uff3e\006\uff3e\007\uff3e\010\uff3e" +
    "\013\uff3e\016\uff3e\022\uff3e\034\uff3e\037\uff3e\041\uff3e\044" +
    "\uff3e\045\uff3e\051\uff3e\053\uff3e\054\uff3e\064\uff3e\065\uff3e" +
    "\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073\uff3e\074" +
    "\uff3e\075\uff3e\100\uff3e\101\uff3e\102\uff3e\104\uff3e\105\uff3e" +
    "\116\uff3e\123\uff3e\132\uff3e\133\uff3e\134\uff3e\135\uff3e\146" +
    "\uff3e\001\002\000\060\004\030\005\124\006\007\007\070" +
    "\010\076\014\165\016\160\035\157\105\004\106\154\107" +
    "\156\110\146\111\164\112\344\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\006\011\uffa5\015\uffa5\001\002\000\006\017\242" +
    "\021\u0109\001\002\000\056\004\030\005\124\006\007\007" +
    "\070\010\076\014\165\016\160\035\157\105\004\106\154" +
    "\107\156\110\146\111\164\113\143\143\142\155\155\156" +
    "\161\163\140\164\150\165\162\166\141\167\144\001\002" +
    "\000\046\011\uffa4\015\uffa4\025\201\026\172\027\210\030" +
    "\200\031\206\032\174\033\170\057\204\144\177\145\175" +
    "\154\173\155\176\156\203\157\171\160\202\162\205\001" +
    "\002\000\056\004\030\005\124\006\007\007\070\010\076" +
    "\014\165\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\113\143\143\142\155\155\156\161\163\140" +
    "\164\150\165\162\166\141\167\144\001\002\000\044\011" +
    "\u010d\025\201\026\172\027\210\030\200\031\206\032\174" +
    "\033\170\057\204\144\177\145\175\154\173\155\176\156" +
    "\203\157\171\160\202\162\205\001\002\000\016\004\030" +
    "\005\124\006\007\007\070\010\076\016\376\001\002\000" +
    "\004\015\u010f\001\002\000\004\012\312\001\002\000\122" +
    "\002\uff3f\003\uff3f\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010" +
    "\uff3f\013\uff3f\016\uff3f\022\uff3f\034\uff3f\037\uff3f\041\uff3f" +
    "\044\uff3f\045\uff3f\051\uff3f\053\uff3f\054\uff3f\064\uff3f\065" +
    "\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f" +
    "\074\uff3f\075\uff3f\100\uff3f\101\uff3f\102\uff3f\104\uff3f\105" +
    "\uff3f\116\uff3f\123\uff3f\132\uff3f\133\uff3f\134\uff3f\135\uff3f" +
    "\146\uff3f\001\002\000\004\011\ufff3\001\002\000\004\052" +
    "\u0113\001\002\000\004\014\u0114\001\002\000\056\004\030" +
    "\005\124\006\007\007\070\010\076\014\165\016\160\035" +
    "\157\105\004\106\154\107\156\110\146\111\164\113\143" +
    "\143\142\155\155\156\161\163\140\164\150\165\162\166" +
    "\141\167\144\001\002\000\044\015\u0116\025\201\026\172" +
    "\027\210\030\200\031\206\032\174\033\170\057\204\144" +
    "\177\145\175\154\173\155\176\156\203\157\171\160\202" +
    "\162\205\001\002\000\004\011\uff40\001\002\000\056\004" +
    "\030\005\124\006\007\007\070\010\076\014\165\016\160" +
    "\035\157\105\004\106\154\107\156\110\146\111\164\113" +
    "\143\143\142\155\155\156\161\163\140\164\150\165\162" +
    "\166\141\167\144\001\002\000\044\015\u0119\025\201\026" +
    "\172\027\210\030\200\031\206\032\174\033\170\057\204" +
    "\144\177\145\175\154\173\155\176\156\203\157\171\160" +
    "\202\162\205\001\002\000\004\012\312\001\002\000\124" +
    "\002\uff4f\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\013\uff4f\016\uff4f\022\uff4f\034\uff4f\037\uff4f\041\uff4f" +
    "\044\uff4f\045\uff4f\051\uff4f\053\uff4f\054\uff4f\064\uff4f\065" +
    "\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073\uff4f" +
    "\074\uff4f\075\uff4f\100\uff4f\101\uff4f\102\uff4f\104\uff4f\105" +
    "\uff4f\116\uff4f\123\uff4f\132\uff4f\133\uff4f\134\uff4f\135\uff4f" +
    "\146\uff4f\150\u011b\001\002\000\006\012\312\146\116\001" +
    "\002\000\122\002\uff4e\003\uff4e\004\uff4e\005\uff4e\006\uff4e" +
    "\007\uff4e\010\uff4e\013\uff4e\016\uff4e\022\uff4e\034\uff4e\037" +
    "\uff4e\041\uff4e\044\uff4e\045\uff4e\051\uff4e\053\uff4e\054\uff4e" +
    "\064\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072" +
    "\uff4e\073\uff4e\074\uff4e\075\uff4e\100\uff4e\101\uff4e\102\uff4e" +
    "\104\uff4e\105\uff4e\116\uff4e\123\uff4e\132\uff4e\133\uff4e\134" +
    "\uff4e\135\uff4e\146\uff4e\001\002\000\122\002\uff4c\003\uff4c" +
    "\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\013\uff4c\016" +
    "\uff4c\022\uff4c\034\uff4c\037\uff4c\041\uff4c\044\uff4c\045\uff4c" +
    "\051\uff4c\053\uff4c\054\uff4c\064\uff4c\065\uff4c\066\uff4c\067" +
    "\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c" +
    "\100\uff4c\101\uff4c\102\uff4c\104\uff4c\105\uff4c\116\uff4c\123" +
    "\uff4c\132\uff4c\133\uff4c\134\uff4c\135\uff4c\146\uff4c\001\002" +
    "\000\122\002\uff4d\003\uff4d\004\uff4d\005\uff4d\006\uff4d\007" +
    "\uff4d\010\uff4d\013\uff4d\016\uff4d\022\uff4d\034\uff4d\037\uff4d" +
    "\041\uff4d\044\uff4d\045\uff4d\051\uff4d\053\uff4d\054\uff4d\064" +
    "\uff4d\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d" +
    "\073\uff4d\074\uff4d\075\uff4d\100\uff4d\101\uff4d\102\uff4d\104" +
    "\uff4d\105\uff4d\116\uff4d\123\uff4d\132\uff4d\133\uff4d\134\uff4d" +
    "\135\uff4d\146\uff4d\001\002\000\122\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\016\uffdb" +
    "\022\uffdb\034\uffdb\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051" +
    "\uffdb\053\uffdb\054\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\104\uffdb\105\uffdb\116\uffdb\123\uffdb" +
    "\132\uffdb\133\uffdb\134\uffdb\135\uffdb\146\uffdb\001\002\000" +
    "\122\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\013\ufff8\016\ufff8\022\ufff8\034\ufff8\037\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\051\ufff8\053\ufff8\054\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\100\ufff8\101\ufff8\102\ufff8\104\ufff8" +
    "\105\ufff8\116\ufff8\123\ufff8\132\ufff8\133\ufff8\134\ufff8\135" +
    "\ufff8\146\ufff8\001\002\000\056\004\030\005\124\006\007" +
    "\007\070\010\076\014\165\016\160\035\157\105\004\106" +
    "\154\107\156\110\146\111\164\113\143\143\142\155\155" +
    "\156\161\163\140\164\150\165\162\166\141\167\144\001" +
    "\002\000\044\015\u0123\025\201\026\172\027\210\030\200" +
    "\031\206\032\174\033\170\057\204\144\177\145\175\154" +
    "\173\155\176\156\203\157\171\160\202\162\205\001\002" +
    "\000\004\012\u0124\001\002\000\004\041\u0126\001\002\000" +
    "\010\013\u012b\041\u0126\044\u012d\001\002\000\056\004\030" +
    "\005\124\006\007\007\070\010\076\014\165\016\160\035" +
    "\157\105\004\106\154\107\156\110\146\111\164\113\143" +
    "\143\142\155\155\156\161\163\140\164\150\165\162\166" +
    "\141\167\144\001\002\000\010\013\uff43\041\uff43\044\uff43" +
    "\001\002\000\044\025\201\026\172\027\210\030\200\031" +
    "\206\032\174\033\170\057\204\137\u0129\144\177\145\175" +
    "\154\173\155\176\156\203\157\171\160\202\162\205\001" +
    "\002\000\112\003\106\004\030\005\124\006\007\007\070" +
    "\010\076\016\042\022\006\034\014\037\100\045\120\051" +
    "\033\053\073\054\104\064\044\065\053\066\016\067\047" +
    "\070\103\071\121\072\043\073\026\074\032\075\132\100" +
    "\046\101\051\102\017\104\024\105\004\116\063\123\107" +
    "\132\022\133\122\134\020\135\112\146\116\001\002\000" +
    "\120\003\106\004\030\005\124\006\007\007\070\010\076" +
    "\013\uff42\016\042\022\006\034\014\037\100\041\uff42\044" +
    "\uff42\045\120\051\033\053\073\054\104\064\044\065\053" +
    "\066\016\067\047\070\103\071\121\072\043\073\026\074" +
    "\032\075\132\100\046\101\051\102\017\104\024\105\004" +
    "\116\063\123\107\132\022\133\122\134\020\135\112\146" +
    "\116\001\002\000\122\002\uff46\003\uff46\004\uff46\005\uff46" +
    "\006\uff46\007\uff46\010\uff46\013\uff46\016\uff46\022\uff46\034" +
    "\uff46\037\uff46\041\uff46\044\uff46\045\uff46\051\uff46\053\uff46" +
    "\054\uff46\064\uff46\065\uff46\066\uff46\067\uff46\070\uff46\071" +
    "\uff46\072\uff46\073\uff46\074\uff46\075\uff46\100\uff46\101\uff46" +
    "\102\uff46\104\uff46\105\uff46\116\uff46\123\uff46\132\uff46\133" +
    "\uff46\134\uff46\135\uff46\146\uff46\001\002\000\004\013\u0131" +
    "\001\002\000\004\137\u012f\001\002\000\010\013\uff44\041" +
    "\uff44\044\uff44\001\002\000\112\003\106\004\030\005\124" +
    "\006\007\007\070\010\076\016\042\022\006\034\014\037" +
    "\100\045\120\051\033\053\073\054\104\064\044\065\053" +
    "\066\016\067\047\070\103\071\121\072\043\073\026\074" +
    "\032\075\132\100\046\101\051\102\017\104\024\105\004" +
    "\116\063\123\107\132\022\133\122\134\020\135\112\146" +
    "\116\001\002\000\114\003\106\004\030\005\124\006\007" +
    "\007\070\010\076\013\uff41\016\042\022\006\034\014\037" +
    "\100\045\120\051\033\053\073\054\104\064\044\065\053" +
    "\066\016\067\047\070\103\071\121\072\043\073\026\074" +
    "\032\075\132\100\046\101\051\102\017\104\024\105\004" +
    "\116\063\123\107\132\022\133\122\134\020\135\112\146" +
    "\116\001\002\000\122\002\uff45\003\uff45\004\uff45\005\uff45" +
    "\006\uff45\007\uff45\010\uff45\013\uff45\016\uff45\022\uff45\034" +
    "\uff45\037\uff45\041\uff45\044\uff45\045\uff45\051\uff45\053\uff45" +
    "\054\uff45\064\uff45\065\uff45\066\uff45\067\uff45\070\uff45\071" +
    "\uff45\072\uff45\073\uff45\074\uff45\075\uff45\100\uff45\101\uff45" +
    "\102\uff45\104\uff45\105\uff45\116\uff45\123\uff45\132\uff45\133" +
    "\uff45\134\uff45\135\uff45\146\uff45\001\002\000\122\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\013" +
    "\ufffb\016\ufffb\022\ufffb\034\ufffb\037\ufffb\041\ufffb\044\ufffb" +
    "\045\ufffb\051\ufffb\053\ufffb\054\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\100\ufffb\101\ufffb\102\ufffb\104\ufffb\105\ufffb\116" +
    "\ufffb\123\ufffb\132\ufffb\133\ufffb\134\ufffb\135\ufffb\146\ufffb" +
    "\001\002\000\056\004\030\005\124\006\007\007\070\010" +
    "\076\014\165\016\160\035\157\105\004\106\154\107\156" +
    "\110\146\111\164\113\143\143\142\155\155\156\161\163" +
    "\140\164\150\165\162\166\141\167\144\001\002\000\044" +
    "\015\u0135\025\201\026\172\027\210\030\200\031\206\032" +
    "\174\033\170\057\204\144\177\145\175\154\173\155\176" +
    "\156\203\157\171\160\202\162\205\001\002\000\004\011" +
    "\uffc5\001\002\000\004\011\ufff4\001\002\000\122\002\uffe9" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013" +
    "\uffe9\016\uffe9\022\uffe9\034\uffe9\037\uffe9\041\uffe9\044\uffe9" +
    "\045\uffe9\051\uffe9\053\uffe9\054\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\100\uffe9\101\uffe9\102\uffe9\104\uffe9\105\uffe9\116" +
    "\uffe9\123\uffe9\132\uffe9\133\uffe9\134\uffe9\135\uffe9\146\uffe9" +
    "\001\002\000\122\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\013\uffd4\016\uffd4\022\uffd4\034\uffd4" +
    "\037\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\053\uffd4\054" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\075\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\104\uffd4\105\uffd4\116\uffd4\123\uffd4\132\uffd4\133\uffd4" +
    "\134\uffd4\135\uffd4\146\uffd4\001\002\000\056\004\030\005" +
    "\124\006\007\007\070\010\076\014\165\016\160\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\044\024\u013b\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\057\204\144\177" +
    "\145\175\154\173\155\176\156\203\157\171\160\202\162" +
    "\205\001\002\000\004\016\u013c\001\002\000\004\015\u013d" +
    "\001\002\000\004\011\uffc7\001\002\000\122\002\uffea\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\013\uffea" +
    "\016\uffea\022\uffea\034\uffea\037\uffea\041\uffea\044\uffea\045" +
    "\uffea\051\uffea\053\uffea\054\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\100\uffea\101\uffea\102\uffea\104\uffea\105\uffea\116\uffea" +
    "\123\uffea\132\uffea\133\uffea\134\uffea\135\uffea\146\uffea\001" +
    "\002\000\122\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\013\uffde\016\uffde\022\uffde\034\uffde\037" +
    "\uffde\041\uffde\044\uffde\045\uffde\051\uffde\053\uffde\054\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072" +
    "\uffde\073\uffde\074\uffde\075\uffde\100\uffde\101\uffde\102\uffde" +
    "\104\uffde\105\uffde\116\uffde\123\uffde\132\uffde\133\uffde\134" +
    "\uffde\135\uffde\146\uffde\001\002\000\122\002\uffe7\003\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\016" +
    "\uffe7\022\uffe7\034\uffe7\037\uffe7\041\uffe7\044\uffe7\045\uffe7" +
    "\051\uffe7\053\uffe7\054\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\104\uffe7\105\uffe7\116\uffe7\123" +
    "\uffe7\132\uffe7\133\uffe7\134\uffe7\135\uffe7\146\uffe7\001\002" +
    "\000\004\163\u0142\001\002\000\006\015\u0144\024\u0143\001" +
    "\002\000\056\004\030\005\124\006\007\007\070\010\076" +
    "\014\165\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\113\143\143\142\155\155\156\161\163\140" +
    "\164\150\165\162\166\141\167\144\001\002\000\004\011" +
    "\uffc3\001\002\000\006\015\u0146\024\265\001\002\000\004" +
    "\011\uffc2\001\002\000\122\002\uffe0\003\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\013\uffe0\016\uffe0\022\uffe0" +
    "\034\uffe0\037\uffe0\041\uffe0\044\uffe0\045\uffe0\051\uffe0\053" +
    "\uffe0\054\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\100\uffe0\101" +
    "\uffe0\102\uffe0\104\uffe0\105\uffe0\116\uffe0\123\uffe0\132\uffe0" +
    "\133\uffe0\134\uffe0\135\uffe0\146\uffe0\001\002\000\114\002" +
    "\000\003\106\004\030\005\124\006\007\007\070\010\076" +
    "\016\042\022\006\034\014\037\100\045\120\051\033\053" +
    "\073\054\104\064\044\065\053\066\016\067\047\070\103" +
    "\071\121\072\043\073\026\074\032\075\132\100\046\101" +
    "\051\102\017\104\024\105\004\116\063\123\107\132\022" +
    "\133\122\134\020\135\112\146\116\001\002\000\120\002" +
    "\uffbf\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\016\uffbf\022\uffbf\034\uffbf\037\uffbf\045\uffbf\051\uffbf\053" +
    "\uffbf\054\uffbf\056\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\116\uffbf" +
    "\123\uffbf\132\uffbf\133\uffbf\134\uffbf\135\uffbf\146\uffbf\001" +
    "\002\000\120\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\016\uffc0\022\uffc0\034\uffc0\037\uffc0\045" +
    "\uffc0\051\uffc0\053\uffc0\054\uffc0\056\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\116\uffc0\123\uffc0\132\uffc0\133\uffc0\134\uffc0\135" +
    "\uffc0\146\uffc0\001\002\000\122\002\uffd6\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\016\uffd6\022" +
    "\uffd6\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\100\uffd6" +
    "\101\uffd6\102\uffd6\104\uffd6\105\uffd6\116\uffd6\123\uffd6\132" +
    "\uffd6\133\uffd6\134\uffd6\135\uffd6\146\uffd6\001\002\000\122" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\013\uffe5\016\uffe5\022\uffe5\034\uffe5\037\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\051\uffe5\053\uffe5\054\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\100\uffe5\101\uffe5\102\uffe5\104\uffe5\105" +
    "\uffe5\116\uffe5\123\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5" +
    "\146\uffe5\001\002\000\122\002\uffdc\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\016\uffdc\022\uffdc" +
    "\034\uffdc\037\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\053" +
    "\uffdc\054\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\104\uffdc\105\uffdc\116\uffdc\123\uffdc\132\uffdc" +
    "\133\uffdc\134\uffdc\135\uffdc\146\uffdc\001\002\000\004\015" +
    "\u014f\001\002\000\004\011\uffc6\001\002\000\122\002\uffd7" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\013" +
    "\uffd7\016\uffd7\022\uffd7\034\uffd7\037\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\051\uffd7\053\uffd7\054\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\100\uffd7\101\uffd7\102\uffd7\104\uffd7\105\uffd7\116" +
    "\uffd7\123\uffd7\132\uffd7\133\uffd7\134\uffd7\135\uffd7\146\uffd7" +
    "\001\002\000\122\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\013\uffd8\016\uffd8\022\uffd8\034\uffd8" +
    "\037\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\053\uffd8\054" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\075\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\104\uffd8\105\uffd8\116\uffd8\123\uffd8\132\uffd8\133\uffd8" +
    "\134\uffd8\135\uffd8\146\uffd8\001\002\000\120\002\uffbc\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\016\uffbc" +
    "\022\uffbc\034\uffbc\037\uffbc\045\uffbc\051\uffbc\053\uffbc\054" +
    "\uffbc\056\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\116\uffbc\123\uffbc" +
    "\132\uffbc\133\uffbc\134\uffbc\135\uffbc\146\uffbc\001\002\000" +
    "\062\004\030\005\124\006\007\007\070\010\076\012\u0155" +
    "\014\165\016\160\035\157\105\004\106\154\107\156\110" +
    "\146\111\164\112\344\113\143\143\142\155\155\156\161" +
    "\163\140\164\150\165\162\166\141\167\144\001\002\000" +
    "\120\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\016\uffba\022\uffba\034\uffba\037\uffba\045\uffba\051" +
    "\uffba\053\uffba\054\uffba\056\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba" +
    "\116\uffba\123\uffba\132\uffba\133\uffba\134\uffba\135\uffba\146" +
    "\uffba\001\002\000\004\017\240\001\002\000\120\002\uffb9" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\016" +
    "\uffb9\022\uffb9\034\uffb9\037\uffb9\045\uffb9\051\uffb9\053\uffb9" +
    "\054\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\116\uffb9\123" +
    "\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9\146\uffb9\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\044\024\u0159" +
    "\025\201\026\172\027\210\030\200\031\206\032\174\033" +
    "\170\057\204\144\177\145\175\154\173\155\176\156\203" +
    "\157\171\160\202\162\205\001\002\000\056\004\030\005" +
    "\124\006\007\007\070\010\076\014\165\016\160\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\044\015\u015b\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\057\204\144\177" +
    "\145\175\154\173\155\176\156\203\157\171\160\202\162" +
    "\205\001\002\000\004\011\uffc1\001\002\000\004\020\350" +
    "\001\002\000\006\016\u0168\017\337\001\002\000\014\011" +
    "\uffb5\014\u015f\017\333\021\334\024\uffb5\001\002\000\022" +
    "\004\030\005\124\006\007\007\070\010\076\015\uff52\016" +
    "\234\024\uff52\001\002\000\006\015\uff53\024\uff53\001\002" +
    "\000\004\016\u0166\001\002\000\006\015\u0164\024\u0163\001" +
    "\002\000\016\004\030\005\124\006\007\007\070\010\076" +
    "\016\234\001\002\000\004\012\uff5c\001\002\000\006\015" +
    "\uff54\024\uff54\001\002\000\010\015\uff51\017\333\024\uff51" +
    "\001\002\000\006\015\uff50\024\uff50\001\002\000\004\014" +
    "\u0169\001\002\000\022\004\030\005\124\006\007\007\070" +
    "\010\076\015\uff52\016\234\024\uff52\001\002\000\006\015" +
    "\u016b\024\u0163\001\002\000\004\012\uff5b\001\002\000\056" +
    "\004\030\005\124\006\007\007\070\010\076\014\165\016" +
    "\160\035\157\105\004\106\154\107\156\110\146\111\164" +
    "\113\143\143\142\155\155\156\161\163\140\164\150\165" +
    "\162\166\141\167\144\001\002\000\044\024\u016e\025\201" +
    "\026\172\027\210\030\200\031\206\032\174\033\170\057" +
    "\204\144\177\145\175\154\173\155\176\156\203\157\171" +
    "\160\202\162\205\001\002\000\056\004\030\005\124\006" +
    "\007\007\070\010\076\014\165\016\160\035\157\105\004" +
    "\106\154\107\156\110\146\111\164\113\143\143\142\155" +
    "\155\156\161\163\140\164\150\165\162\166\141\167\144" +
    "\001\002\000\044\015\u0170\025\201\026\172\027\210\030" +
    "\200\031\206\032\174\033\170\057\204\144\177\145\175" +
    "\154\173\155\176\156\203\157\171\160\202\162\205\001" +
    "\002\000\004\011\uffc8\001\002\000\004\011\ufff5\001\002" +
    "\000\004\016\u0173\001\002\000\004\015\u0174\001\002\000" +
    "\004\011\uffed\001\002\000\122\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\013\ufffd\016\ufffd\022" +
    "\ufffd\034\ufffd\037\ufffd\041\ufffd\044\ufffd\045\ufffd\051\ufffd" +
    "\053\ufffd\054\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\100\ufffd" +
    "\101\ufffd\102\ufffd\104\ufffd\105\ufffd\116\ufffd\123\ufffd\132" +
    "\ufffd\133\ufffd\134\ufffd\135\ufffd\146\ufffd\001\002\000\004" +
    "\011\u0179\001\002\000\044\011\uff55\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\057\204\144\177" +
    "\145\175\154\173\155\176\156\203\157\171\160\202\162" +
    "\205\001\002\000\122\002\uff56\003\uff56\004\uff56\005\uff56" +
    "\006\uff56\007\uff56\010\uff56\013\uff56\016\uff56\022\uff56\034" +
    "\uff56\037\uff56\041\uff56\044\uff56\045\uff56\051\uff56\053\uff56" +
    "\054\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071" +
    "\uff56\072\uff56\073\uff56\074\uff56\075\uff56\100\uff56\101\uff56" +
    "\102\uff56\104\uff56\105\uff56\116\uff56\123\uff56\132\uff56\133" +
    "\uff56\134\uff56\135\uff56\146\uff56\001\002\000\122\002\uff57" +
    "\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\013" +
    "\uff57\016\uff57\022\uff57\034\uff57\037\uff57\041\uff57\044\uff57" +
    "\045\uff57\051\uff57\053\uff57\054\uff57\064\uff57\065\uff57\066" +
    "\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57" +
    "\075\uff57\100\uff57\101\uff57\102\uff57\104\uff57\105\uff57\116" +
    "\uff57\123\uff57\132\uff57\133\uff57\134\uff57\135\uff57\146\uff57" +
    "\001\002\000\004\011\ufff2\001\002\000\122\002\uffd9\003" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\013\uffd9" +
    "\016\uffd9\022\uffd9\034\uffd9\037\uffd9\041\uffd9\044\uffd9\045" +
    "\uffd9\051\uffd9\053\uffd9\054\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\100\uffd9\101\uffd9\102\uffd9\104\uffd9\105\uffd9\116\uffd9" +
    "\123\uffd9\132\uffd9\133\uffd9\134\uffd9\135\uffd9\146\uffd9\001" +
    "\002\000\122\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\013\uffcb\016\uffcb\022\uffcb\034\uffcb\037" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\100\uffcb\101\uffcb\102\uffcb" +
    "\104\uffcb\105\uffcb\116\uffcb\123\uffcb\132\uffcb\133\uffcb\134" +
    "\uffcb\135\uffcb\146\uffcb\001\002\000\122\002\uffd1\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\013\uffd1\016" +
    "\uffd1\022\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\051\uffd1\053\uffd1\054\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\104\uffd1\105\uffd1\116\uffd1\123" +
    "\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1\146\uffd1\001\002" +
    "\000\122\002\uffd0\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\013\uffd0\016\uffd0\022\uffd0\034\uffd0\037\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\051\uffd0\053\uffd0\054\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\100\uffd0\101\uffd0\102\uffd0\104" +
    "\uffd0\105\uffd0\116\uffd0\123\uffd0\132\uffd0\133\uffd0\134\uffd0" +
    "\135\uffd0\146\uffd0\001\002\000\122\002\uffe8\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\016\uffe8" +
    "\022\uffe8\034\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\100" +
    "\uffe8\101\uffe8\102\uffe8\104\uffe8\105\uffe8\116\uffe8\123\uffe8" +
    "\132\uffe8\133\uffe8\134\uffe8\135\uffe8\146\uffe8\001\002\000" +
    "\004\163\u0181\001\002\000\006\015\u0183\024\u0182\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\004\011\uff9a" +
    "\001\002\000\006\015\u0185\024\265\001\002\000\004\011" +
    "\uff99\001\002\000\004\011\ufff0\001\002\000\122\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\013" +
    "\ufffa\016\ufffa\022\ufffa\034\ufffa\037\ufffa\041\ufffa\044\ufffa" +
    "\045\ufffa\051\ufffa\053\ufffa\054\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\100\ufffa\101\ufffa\102\ufffa\104\ufffa\105\ufffa\116" +
    "\ufffa\123\ufffa\132\ufffa\133\ufffa\134\ufffa\135\ufffa\146\ufffa" +
    "\001\002\000\004\011\ufff1\001\002\000\004\012\u018a\001" +
    "\002\000\020\004\030\005\124\006\007\007\070\010\076" +
    "\013\u018c\016\234\001\002\000\020\004\030\005\124\006" +
    "\007\007\070\010\076\013\u0191\016\234\001\002\000\004" +
    "\011\uff61\001\002\000\004\011\u0190\001\002\000\004\016" +
    "\331\001\002\000\006\011\uff5e\024\370\001\002\000\020" +
    "\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\013\uff5f\016" +
    "\uff5f\001\002\000\004\011\uff62\001\002\000\004\011\u0193" +
    "\001\002\000\020\004\uff60\005\uff60\006\uff60\007\uff60\010" +
    "\uff60\013\uff60\016\uff60\001\002\000\122\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\013\ufff9\016" +
    "\ufff9\022\ufff9\034\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9" +
    "\051\ufff9\053\ufff9\054\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\100\ufff9\101\ufff9\102\ufff9\104\ufff9\105\ufff9\116\ufff9\123" +
    "\ufff9\132\ufff9\133\ufff9\134\ufff9\135\ufff9\146\ufff9\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\044\015\u0197" +
    "\025\201\026\172\027\210\030\200\031\206\032\174\033" +
    "\170\057\204\144\177\145\175\154\173\155\176\156\203" +
    "\157\171\160\202\162\205\001\002\000\004\012\312\001" +
    "\002\000\122\002\uff49\003\uff49\004\uff49\005\uff49\006\uff49" +
    "\007\uff49\010\uff49\013\uff49\016\uff49\022\uff49\034\uff49\037" +
    "\uff49\041\uff49\044\uff49\045\uff49\051\uff49\053\uff49\054\uff49" +
    "\064\uff49\065\uff49\066\uff49\067\uff49\070\uff49\071\uff49\072" +
    "\uff49\073\uff49\074\uff49\075\uff49\100\uff49\101\uff49\102\uff49" +
    "\104\uff49\105\uff49\116\uff49\123\uff49\132\uff49\133\uff49\134" +
    "\uff49\135\uff49\146\uff49\001\002\000\004\163\u019a\001\002" +
    "\000\004\015\u019b\001\002\000\004\011\uffc9\001\002\000" +
    "\056\004\030\005\124\006\007\007\070\010\076\014\165" +
    "\016\160\035\157\105\004\106\154\107\156\110\146\111" +
    "\164\113\143\143\142\155\155\156\161\163\140\164\150" +
    "\165\162\166\141\167\144\001\002\000\044\015\u019e\025" +
    "\201\026\172\027\210\030\200\031\206\032\174\033\170" +
    "\057\204\144\177\145\175\154\173\155\176\156\203\157" +
    "\171\160\202\162\205\001\002\000\004\011\uffc4\001\002" +
    "\000\004\002\001\001\002\000\006\014\u01a1\137\u01a2\001" +
    "\002\000\022\004\030\005\124\006\007\007\070\010\076" +
    "\015\uff52\016\234\024\uff52\001\002\000\006\076\u01a4\077" +
    "\u01a3\001\002\000\004\014\u01a8\001\002\000\004\014\u01a5" +
    "\001\002\000\004\015\u01a6\001\002\000\004\012\312\001" +
    "\002\000\122\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\013\ufff7\016\ufff7\022\ufff7\034\ufff7\037" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\053\ufff7\054\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\104\ufff7\105\ufff7\116\ufff7\123\ufff7\132\ufff7\133\ufff7\134" +
    "\ufff7\135\ufff7\146\ufff7\001\002\000\004\015\u01a9\001\002" +
    "\000\004\012\312\001\002\000\122\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\016\ufff6" +
    "\022\ufff6\034\ufff6\037\ufff6\041\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\053\ufff6\054\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\104\ufff6\105\ufff6\116\ufff6\123\ufff6" +
    "\132\ufff6\133\ufff6\134\ufff6\135\ufff6\146\ufff6\001\002\000" +
    "\006\015\u01ac\024\u0163\001\002\000\004\012\uff5a\001\002" +
    "\000\122\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\013\ufffc\016\ufffc\022\ufffc\034\ufffc\037\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\051\ufffc\053\ufffc\054\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\100\ufffc\101\ufffc\102\ufffc\104" +
    "\ufffc\105\ufffc\116\ufffc\123\ufffc\132\ufffc\133\ufffc\134\ufffc" +
    "\135\ufffc\146\ufffc\001\002\000\122\002\uffd5\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\013\uffd5\016\uffd5" +
    "\022\uffd5\034\uffd5\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051" +
    "\uffd5\053\uffd5\054\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\100" +
    "\uffd5\101\uffd5\102\uffd5\104\uffd5\105\uffd5\116\uffd5\123\uffd5" +
    "\132\uffd5\133\uffd5\134\uffd5\135\uffd5\146\uffd5\001\002\000" +
    "\120\002\uffbb\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\016\uffbb\022\uffbb\034\uffbb\037\uffbb\045\uffbb\051" +
    "\uffbb\053\uffbb\054\uffbb\056\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb" +
    "\116\uffbb\123\uffbb\132\uffbb\133\uffbb\134\uffbb\135\uffbb\146" +
    "\uffbb\001\002\000\004\163\u01b1\001\002\000\006\015\u01b3" +
    "\024\u01b2\001\002\000\056\004\030\005\124\006\007\007" +
    "\070\010\076\014\165\016\160\035\157\105\004\106\154" +
    "\107\156\110\146\111\164\113\143\143\142\155\155\156" +
    "\161\163\140\164\150\165\162\166\141\167\144\001\002" +
    "\000\004\011\uff9c\001\002\000\006\015\u01b5\024\265\001" +
    "\002\000\004\011\uff9b\001\002\000\122\002\uffd2\003\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\013\uffd2\016" +
    "\uffd2\022\uffd2\034\uffd2\037\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\051\uffd2\053\uffd2\054\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\104\uffd2\105\uffd2\116\uffd2\123" +
    "\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\146\uffd2\001\002" +
    "\000\056\004\030\005\124\006\007\007\070\010\076\014" +
    "\165\016\160\035\157\105\004\106\154\107\156\110\146" +
    "\111\164\113\143\143\142\155\155\156\161\163\140\164" +
    "\150\165\162\166\141\167\144\001\002\000\044\024\u01b9" +
    "\025\201\026\172\027\210\030\200\031\206\032\174\033" +
    "\170\057\204\144\177\145\175\154\173\155\176\156\203" +
    "\157\171\160\202\162\205\001\002\000\056\004\030\005" +
    "\124\006\007\007\070\010\076\014\165\016\160\035\157" +
    "\105\004\106\154\107\156\110\146\111\164\113\143\143" +
    "\142\155\155\156\161\163\140\164\150\165\162\166\141" +
    "\167\144\001\002\000\044\015\u01bb\025\201\026\172\027" +
    "\210\030\200\031\206\032\174\033\170\057\204\144\177" +
    "\145\175\154\173\155\176\156\203\157\171\160\202\162" +
    "\205\001\002\000\174\002\uff70\003\uff70\004\uff70\005\uff70" +
    "\006\uff70\007\uff70\010\uff70\011\uff70\013\uff70\015\uff70\016" +
    "\uff70\020\uff70\022\uff70\024\uff70\025\uff70\026\uff70\027\uff70" +
    "\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\037\uff70\045" +
    "\uff70\051\uff70\053\uff70\054\uff70\056\uff70\057\uff70\064\uff70" +
    "\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073" +
    "\uff70\074\uff70\075\uff70\100\uff70\101\uff70\102\uff70\103\uff70" +
    "\104\uff70\105\uff70\116\uff70\123\uff70\132\uff70\133\uff70\134" +
    "\uff70\135\uff70\137\uff70\144\uff70\145\uff70\146\uff70\154\uff70" +
    "\155\uff70\156\uff70\157\uff70\160\uff70\162\uff70\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\144\004\020\005\070\006\056\007\033\011" +
    "\037\012\060\013\014\014\054\015\076\016\101\020\122" +
    "\021\047\022\074\023\063\024\113\025\114\027\057\037" +
    "\073\043\051\052\055\055\024\056\127\057\112\060\007" +
    "\061\116\062\110\063\071\066\061\070\065\073\125\074" +
    "\030\075\126\100\040\101\066\102\130\103\100\104\011" +
    "\105\004\106\012\107\104\110\026\111\022\112\107\114" +
    "\044\115\064\116\035\117\034\120\124\121\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\132\006\315\007\033\011\037\012\060\014\054\015" +
    "\076\016\101\020\122\021\047\022\074\023\063\024\113" +
    "\025\114\027\057\037\073\043\051\052\055\055\024\056" +
    "\127\057\112\060\007\062\110\063\071\066\061\070\065" +
    "\073\125\074\030\075\126\101\066\102\130\103\100\104" +
    "\011\105\004\106\012\107\104\110\026\111\022\112\107" +
    "\114\044\115\064\116\035\117\034\120\124\121\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0107\001\001\000\002\001\001\000\026\010" +
    "\u0176\011\152\012\162\014\054\030\u0175\043\151\063\136" +
    "\066\165\074\144\075\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\u015c\044\327\045\326\001\001\000" +
    "\002\001\001\000\004\046\u0151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\140\004\u0147\006\056\007\033" +
    "\011\037\012\060\014\054\015\076\016\101\020\122\021" +
    "\047\022\074\023\063\024\113\025\114\027\057\037\073" +
    "\043\051\052\055\055\024\056\127\057\112\060\007\061" +
    "\u0149\062\110\063\071\066\061\070\065\073\125\074\030" +
    "\075\126\100\u0148\101\066\102\130\103\100\104\011\105" +
    "\004\106\012\107\104\110\026\111\022\112\107\114\044" +
    "\115\064\116\035\117\034\120\124\121\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\240\001\001\000\004\002\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\150\011\152\012\162\014\054\036" +
    "\146\043\151\063\136\066\165\074\144\075\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\306\011\152\012\162\014\054" +
    "\043\151\063\136\066\165\074\144\075\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\260\011\152\012\162\014\054\043\151\063" +
    "\136\066\165\074\144\075\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\054\043" +
    "\151\074\234\075\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\166\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\227\011\152\012\162\014\054\043\151\063\136\066\165" +
    "\074\144\075\126\001\001\000\024\010\226\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\024\010\225\011\152\012\162\014\054\043" +
    "\151\063\136\066\165\074\144\075\126\001\001\000\024" +
    "\010\224\011\152\012\162\014\054\043\151\063\136\066" +
    "\165\074\144\075\126\001\001\000\024\010\223\011\152" +
    "\012\162\014\054\043\151\063\136\066\165\074\144\075" +
    "\126\001\001\000\024\010\222\011\152\012\162\014\054" +
    "\043\151\063\136\066\165\074\144\075\126\001\001\000" +
    "\024\010\221\011\152\012\162\014\054\043\151\063\136" +
    "\066\165\074\144\075\126\001\001\000\024\010\220\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\024\010\217\011\152\012\162\014" +
    "\054\043\151\063\136\066\165\074\144\075\126\001\001" +
    "\000\024\010\216\011\152\012\162\014\054\043\151\063" +
    "\136\066\165\074\144\075\126\001\001\000\024\010\215" +
    "\011\152\012\162\014\054\043\151\063\136\066\165\074" +
    "\144\075\126\001\001\000\024\010\214\011\152\012\162" +
    "\014\054\043\151\063\136\066\165\074\144\075\126\001" +
    "\001\000\002\001\001\000\024\010\212\011\152\012\162" +
    "\014\054\043\151\063\136\066\165\074\144\075\126\001" +
    "\001\000\024\010\211\011\152\012\162\014\054\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\024\010\210\011\152\012\162\014\054\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\054\043\151\075\236\001\001" +
    "\000\004\035\240\001\001\000\024\010\244\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\024\010\242\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\250\011\152\012\162" +
    "\014\054\043\151\063\136\064\247\065\251\066\165\074" +
    "\144\075\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\253\011\152\012\162\014" +
    "\054\043\151\063\136\066\165\074\144\075\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\256\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\262\011\152\012\162\014\054" +
    "\043\151\063\136\066\165\074\144\075\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\266\011\152" +
    "\012\162\014\054\043\151\063\136\066\165\074\144\075" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\270\011\152\012\162\014\054\043\151\063\136\066" +
    "\165\074\144\075\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\054\043\151\075\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\250\011\152\012\162\014\054\043\151\063\136\064" +
    "\277\065\251\066\165\074\144\075\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\302\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\024\010\304\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\134\004\312" +
    "\006\056\007\033\011\037\012\060\014\054\015\076\016" +
    "\101\020\122\021\047\022\074\023\063\024\113\025\114" +
    "\027\057\037\073\043\051\052\055\055\024\056\127\057" +
    "\112\060\007\062\110\063\071\066\061\070\065\073\125" +
    "\074\030\075\126\101\066\102\130\103\100\104\011\105" +
    "\004\106\012\107\104\110\026\111\022\112\107\114\044" +
    "\115\064\116\035\117\034\120\124\121\036\001\001\000" +
    "\132\006\315\007\033\011\037\012\060\014\054\015\076" +
    "\016\101\020\122\021\047\022\074\023\063\024\113\025" +
    "\114\027\057\037\073\043\051\052\055\055\024\056\127" +
    "\057\112\060\007\062\110\063\071\066\061\070\065\073" +
    "\125\074\030\075\126\101\066\102\130\103\100\104\011" +
    "\105\004\106\012\107\104\110\026\111\022\112\107\114" +
    "\044\115\064\116\035\117\034\120\124\121\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\323\014\054\020\324\043\325\074\322\075\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\327\045\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\331\033\334\035\335\001\001" +
    "\000\002\001\001\000\024\010\244\011\152\012\162\014" +
    "\054\043\151\063\136\066\165\074\144\075\126\001\001" +
    "\000\030\010\341\011\152\012\162\014\054\043\151\063" +
    "\136\066\165\074\144\075\126\076\342\077\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\345\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\353\011\152\012\162\014\054\042\351" +
    "\043\151\063\136\066\165\072\352\074\144\075\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\357\011\152\012\162\014\054\035\360\040" +
    "\362\041\355\042\361\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\032\010\357\011" +
    "\152\012\162\014\054\040\362\041\355\042\361\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\357\011" +
    "\152\012\162\014\054\040\366\042\361\043\151\063\136" +
    "\066\165\074\144\075\126\001\001\000\002\001\001\000" +
    "\004\045\370\001\001\000\002\001\001\000\024\010\372" +
    "\011\152\012\162\014\054\043\151\063\136\066\165\074" +
    "\144\075\126\001\001\000\002\001\001\000\024\011\374" +
    "\012\u0102\014\054\020\u0101\031\u0100\037\376\043\151\074" +
    "\377\075\126\001\001\000\002\001\001\000\004\035\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0104" +
    "\001\001\000\002\001\001\000\030\010\341\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\076\342\077\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\u0109\011\152\012\162\014\054\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\024\010\u010b\011\152\012\162\014\054\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\024\011\374\012\u0102\014\054\020\u0101\031\u010d" +
    "\037\376\043\151\074\377\075\126\001\001\000\002\001" +
    "\001\000\004\002\u010f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\u0114\011\152\012\162\014\054\043\151\063\136\066\165" +
    "\074\144\075\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\u0117\011\152\012\162\014\054\043\151" +
    "\063\136\066\165\074\144\075\126\001\001\000\002\001" +
    "\001\000\004\002\u0119\001\001\000\002\001\001\000\010" +
    "\002\u011c\025\u011d\026\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\u0121\011\152\012\162\014\054\043" +
    "\151\063\136\066\165\074\144\075\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\u0126\051\u0124\001" +
    "\001\000\006\047\u012d\050\u012b\001\001\000\024\010\u0127" +
    "\011\152\012\162\014\054\043\151\063\136\066\165\074" +
    "\144\075\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\134\004\u0129\006\056\007\033\011\037\012\060\014" +
    "\054\015\076\016\101\020\122\021\047\022\074\023\063" +
    "\024\113\025\114\027\057\037\073\043\051\052\055\055" +
    "\024\056\127\057\112\060\007\062\110\063\071\066\061" +
    "\070\065\073\125\074\030\075\126\101\066\102\130\103" +
    "\100\104\011\105\004\106\012\107\104\110\026\111\022" +
    "\112\107\114\044\115\064\116\035\117\034\120\124\121" +
    "\036\001\001\000\132\006\315\007\033\011\037\012\060" +
    "\014\054\015\076\016\101\020\122\021\047\022\074\023" +
    "\063\024\113\025\114\027\057\037\073\043\051\052\055" +
    "\055\024\056\127\057\112\060\007\062\110\063\071\066" +
    "\061\070\065\073\125\074\030\075\126\101\066\102\130" +
    "\103\100\104\011\105\004\106\012\107\104\110\026\111" +
    "\022\112\107\114\044\115\064\116\035\117\034\120\124" +
    "\121\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\134\004\u012f\006\056" +
    "\007\033\011\037\012\060\014\054\015\076\016\101\020" +
    "\122\021\047\022\074\023\063\024\113\025\114\027\057" +
    "\037\073\043\051\052\055\055\024\056\127\057\112\060" +
    "\007\062\110\063\071\066\061\070\065\073\125\074\030" +
    "\075\126\101\066\102\130\103\100\104\011\105\004\106" +
    "\012\107\104\110\026\111\022\112\107\114\044\115\064" +
    "\116\035\117\034\120\124\121\036\001\001\000\132\006" +
    "\315\007\033\011\037\012\060\014\054\015\076\016\101" +
    "\020\122\021\047\022\074\023\063\024\113\025\114\027" +
    "\057\037\073\043\051\052\055\055\024\056\127\057\112" +
    "\060\007\062\110\063\071\066\061\070\065\073\125\074" +
    "\030\075\126\101\066\102\130\103\100\104\011\105\004" +
    "\106\012\107\104\110\026\111\022\112\107\114\044\115" +
    "\064\116\035\117\034\120\124\121\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\u0133\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\u0139" +
    "\011\152\012\162\014\054\043\151\063\136\066\165\074" +
    "\144\075\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\150\011\152\012\162\014\054\036" +
    "\u0144\043\151\063\136\066\165\074\144\075\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\132\006\315\007\033\011\037\012\060" +
    "\014\054\015\076\016\101\020\122\021\047\022\074\023" +
    "\063\024\113\025\114\027\057\037\073\043\051\052\055" +
    "\055\024\056\127\057\112\060\007\062\110\063\071\066" +
    "\061\070\065\073\125\074\030\075\126\101\066\102\130" +
    "\103\100\104\011\105\004\106\012\107\104\110\026\111" +
    "\022\112\107\114\044\115\064\116\035\117\034\120\124" +
    "\121\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\010\341\011\152\012\162" +
    "\014\054\043\151\063\136\066\165\072\u0153\074\144\075" +
    "\126\076\342\077\u0155\001\001\000\002\001\001\000\004" +
    "\035\360\001\001\000\002\001\001\000\024\010\u0157\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\024\010\u0159\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\331\033\334" +
    "\035\335\001\001\000\012\014\054\043\u0160\053\u015f\054" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\054\043\u0160\053\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\u0166\033\334" +
    "\035\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\054\043\u0160\053\u015f\054\u0169\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\u016c\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\024\010\u016e\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\150\011\152\012\162\014\054\036\u0183\043" +
    "\151\063\136\066\165\074\144\075\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\054\043\u018d\067\u018c\071\u018a\001\001\000" +
    "\010\014\054\043\u018d\067\u0191\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u018e\045\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\u0195\011\152\012\162\014\054\043\151\063\136\066\165" +
    "\074\144\075\126\001\001\000\002\001\001\000\004\002" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\u019c\011\152\012" +
    "\162\014\054\043\151\063\136\066\165\074\144\075\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\054\043\u0160\053\u015f" +
    "\054\u01aa\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\u01a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\150\011\152" +
    "\012\162\014\054\036\u01b3\043\151\063\136\066\165\074" +
    "\144\075\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\u01b7\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\024\010\u01b9\011" +
    "\152\012\162\014\054\043\151\063\136\066\165\074\144" +
    "\075\126\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONSTANTES LINST 
            {
              Object RESULT =null;
		int constantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> constantes = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                for(Nodo n: lista)
                {
                    constantes.add(n);
                }  
                raiz = new AST(constantes);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CONSTANTES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GUICOMPONENTE ::= ETIQUETA puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GUICOMPONENTE ::= TEXTO puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GUICOMPONENTE ::= TEXTOAREA puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GUICOMPONENTE ::= TEXTOPASS puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GUICOMPONENTE ::= TEXTONUM puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GUICOMPONENTE ::= BOTON puntocoma 
            {
              Instruccion RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionComponente comp = (DeclaracionComponente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = comp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GUICOMPONENTE",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALINICIAR ::= tvoid id dospuntos tiniciarventana pari pard BLOQUE 
            {
              Iniciar_Ventana RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		             
            ArrayList<ParametroFormal> lf = new ArrayList<ParametroFormal>();
            RESULT  = new Iniciar_Ventana( new ArrayList<String>(),new Tipo("erickVentana"),Utilidades.Singlenton.pilaArchivos.getLast(), lf, resright,resleft ); 
            RESULT.setInstrucciones(instrucciones);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINICIAR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALCLICK ::= tvoid id dospuntos tclick pari pard BLOQUE 
            {
              AlClick RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AlClick(nombre, bloque, posright, posleft);                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALCLICK",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ETIQUETA ::= tetiqueta id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.ETIQUETA );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TEXTO ::= ttexto id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.TEXT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TEXTOAREA ::= ttextoArea id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTAREA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOAREA",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TEXTOPASS ::= ttextoPass id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTPASS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOPASS",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TEXTONUM ::= ttextoNum id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft, Componente.tipoComponente.TEXTNUM);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTONUM",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BOTON ::= tboton id 
            {
              DeclaracionComponente RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionComponente(nombre,pright,pleft,Componente.tipoComponente.BOTON);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RMENSAJE ::= tmensaje pari cadena pard 
            {
              RMensaje RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new RMensaje(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RMENSAJE",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RMENSAJE ::= tmensaje pari cadena coma LVALORES pard 
            {
              RMensaje RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new RMensaje(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RMENSAJE",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTANCIARGUI ::= tnuevogui pari id pard 
            {
              InstanciarGui RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InstanciarGui(nombre, posright,posleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIARGUI",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= BREAK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= CONTINUE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= CONCATENAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Concatenar inst = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= SETESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetEscribir inst = (SetEscribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= SETAPPEND puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetApend inst = (SetApend)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= CLOSEARCHIVO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CerrarArchivo inst = (CerrarArchivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= ESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Escribir inst = (Escribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= READ puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Read inst = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= SETALTOANCHO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetAltoAncho inst = (SetAltoAncho)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST ::= RMENSAJE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RMensaje inst = (RMensaje)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST ::= ALCLICK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AlClick inst = (AlClick)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST ::= ALINICIAR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Iniciar_Ventana inst = (Iniciar_Ventana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST ::= INSTANCIARGUI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstanciarGui inst = (InstanciarGui)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST ::= GUICOMPONENTE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST ::= ABRIRVENTANA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbrirVentana inst = (AbrirVentana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ABRIRVENTANA ::= tabrirventana pari cadena pard 
            {
              AbrirVentana RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AbrirVentana(id, posright, posleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ABRIRVENTANA",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SETALTOANCHO ::= tanchoalto pari EXP coma EXP pard 
            {
              SetAltoAncho RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion v1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion v2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SetAltoAncho(v1, v2, posright, posleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETALTOANCHO",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // READ ::= tread pari EXP coma id pard 
            {
              Read RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Read(e1,e2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READ",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CLOSEARCHIVO ::= tclose pari pard 
            {
              CerrarArchivo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CerrarArchivo(tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSEARCHIVO",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SETESCRIBIR ::= escritura pari EXP pard 
            {
              SetEscribir RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetEscribir(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETESCRIBIR",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SETAPPEND ::= tapend pari EXP pard 
            {
              SetApend RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetApend(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETAPPEND",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESCRIBIR ::= escribir pari cadena pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESCRIBIR ::= escribir pari cadena coma LVALORES pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONSTANTES ::= CONSTANTES DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l ; RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONSTANTES ::= CONSTANTES IMPORTAR 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Importar inst = (Importar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l ; RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONSTANTES ::= DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONSTANTES ::= IMPORTAR 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Importar inst = (Importar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IMPORTAR ::= importar cadena 
            {
              Importar RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Importar(nombre, orright, orleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NDIM ::= LEXP 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= multi ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= tatexto pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aTexto(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= CONCATENAR 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Concatenar v = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXP ::= taentero pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aEntero(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXP ::= tadecimal pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aDecimal(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP ::= teql pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Equals(expresion1, expresion2, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONCATENAR ::= tconcatenar pari EXP coma EXP pard 
            {
              Concatenar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Concatenar(exp1,exp2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENAR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AUMENTO ::= ACCESO aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECREMENTO ::= ACCESO decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ORIGEN ::= TIPO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo id = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id.nombreTipo(), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CABECERAMET ::= TIPO NDIMVACIO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONTINUE ::= continuar 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BREAK ::= romper 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DOWHILE ::= hacer BLOQUE donde pari EXP pard 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ACTUALIZACION ::= AUMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ACTUALIZACION ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ACTUALIZACION ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ACTUALIZACION ::= ASIGV 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
