
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.InputOutput.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\013\004\000\002\013" +
    "\003\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\113\010" +
    "\000\002\111\005\000\002\107\006\000\002\112\006\000" +
    "\002\110\006\000\002\110\010\000\002\101\010\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\065" +
    "\004\000\002\106\004\000\002\047\004\000\002\047\004" +
    "\000\002\006\004\000\002\045\005\000\002\045\003\000" +
    "\002\046\003\000\002\046\005\000\002\046\004\000\002" +
    "\046\006\000\002\046\006\000\002\046\006\000\002\033" +
    "\003\000\002\033\003\000\002\034\005\000\002\034\004" +
    "\000\002\100\005\000\002\043\005\000\002\042\005\000" +
    "\002\042\003\000\002\041\003\000\002\041\003\000\002" +
    "\020\005\000\002\040\006\000\002\105\003\000\002\105" +
    "\003\000\002\104\006\000\002\071\003\000\002\071\002" +
    "\000\002\072\005\000\002\072\003\000\002\015\006\000" +
    "\002\015\010\000\002\016\006\000\002\016\010\000\002" +
    "\037\005\000\002\037\003\000\002\036\006\000\002\036" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\005" +
    "\000\002\007\006\000\002\007\003\000\002\007\006\000" +
    "\002\007\003\000\002\007\006\000\002\007\006\000\002" +
    "\007\010\000\002\073\010\000\002\010\004\000\002\011" +
    "\004\000\002\102\005\000\002\102\003\000\002\103\003" +
    "\000\002\103\004\000\002\044\003\000\002\044\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\075\007\000\002\075" +
    "\006\000\002\077\005\000\002\077\004\000\002\074\004" +
    "\000\002\063\004\000\002\064\007\000\002\064\010\000" +
    "\002\064\007\000\002\002\005\000\002\002\004\000\002" +
    "\066\005\000\002\066\004\000\002\031\003\000\002\062" +
    "\005\000\002\062\003\000\002\062\002\000\002\061\004" +
    "\000\002\061\005\000\002\061\005\000\002\061\006\000" +
    "\002\025\007\000\002\025\011\000\002\026\003\000\002" +
    "\026\003\000\002\067\010\000\002\067\006\000\002\021" +
    "\007\000\002\024\003\000\002\023\003\000\002\054\011" +
    "\000\002\054\012\000\002\053\004\000\002\053\003\000" +
    "\002\051\006\000\002\052\005\000\002\022\010\000\002" +
    "\030\013\000\002\030\013\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017b\000\072\003\042\004\021\005\076\006\103\007" +
    "\017\010\044\016\056\022\074\034\037\037\052\045\062" +
    "\051\057\053\024\054\015\056\030\064\077\065\027\066" +
    "\051\067\031\070\046\071\043\102\054\107\014\116\025" +
    "\117\040\120\006\121\005\132\023\001\002\000\004\011" +
    "\u017d\001\002\000\004\011\uff62\001\002\000\004\011\uff61" +
    "\001\002\000\016\016\u0175\017\u0173\021\uff87\124\uff87\125" +
    "\uff87\126\uff87\001\002\000\076\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\013\ufff5\016\ufff5\022" +
    "\ufff5\034\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5\051\ufff5" +
    "\053\ufff5\054\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5\071" +
    "\ufff5\102\ufff5\107\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5" +
    "\132\ufff5\001\002\000\070\002\uffff\003\042\004\021\005" +
    "\076\006\103\007\017\010\044\016\056\022\074\034\037" +
    "\037\052\045\062\051\057\053\024\054\015\064\077\065" +
    "\027\066\051\070\046\071\043\102\054\107\014\116\025" +
    "\117\040\120\006\121\005\132\023\001\002\000\004\011" +
    "\u0172\001\002\000\004\011\u0171\001\002\000\004\014\u0160" +
    "\001\002\000\004\014\u015d\001\002\000\076\002\uffef\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\013\uffef" +
    "\016\uffef\022\uffef\034\uffef\037\uffef\041\uffef\044\uffef\045" +
    "\uffef\051\uffef\053\uffef\054\uffef\064\uffef\065\uffef\066\uffef" +
    "\070\uffef\071\uffef\102\uffef\107\uffef\116\uffef\117\uffef\120" +
    "\uffef\121\uffef\132\uffef\001\002\000\156\003\uff80\004\uff80" +
    "\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\013\uff80\015" +
    "\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\037\uff80\045\uff80\051\uff80\053\uff80\054\uff80" +
    "\057\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\uff80\102\uff80\107\uff80\116\uff80\117\uff80\120\uff80\121\uff80" +
    "\123\uff80\124\uff80\125\uff80\126\uff80\130\uff80\131\uff80\132" +
    "\uff80\140\uff80\141\uff80\142\uff80\143\uff80\144\uff80\146\uff80" +
    "\001\002\000\004\011\u015c\001\002\000\156\003\uff83\004" +
    "\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\037\uff83\045\uff83\051\uff83\053\uff83\054" +
    "\uff83\057\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83" +
    "\071\uff83\102\uff83\107\uff83\116\uff83\117\uff83\120\uff83\121" +
    "\uff83\123\uff83\124\uff83\125\uff83\126\uff83\130\uff83\131\uff83" +
    "\132\uff83\140\uff83\141\uff83\142\uff83\143\uff83\144\uff83\146" +
    "\uff83\001\002\000\070\003\042\004\021\005\076\006\103" +
    "\007\017\010\044\016\056\022\074\034\037\037\052\045" +
    "\062\051\057\053\024\054\015\064\077\065\027\066\051" +
    "\067\031\070\046\071\043\102\054\107\014\116\025\117" +
    "\040\120\006\121\005\132\023\001\002\000\004\014\u0152" +
    "\001\002\000\004\014\u014c\001\002\000\004\014\u0148\001" +
    "\002\000\004\011\u0147\001\002\000\004\014\u0142\001\002" +
    "\000\004\147\u0141\001\002\000\004\016\u013d\001\002\000" +
    "\070\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\016\uffd9\022\uffd9\034\uffd9\037\uffd9\045\uffd9\051\uffd9\053" +
    "\uffd9\054\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\071\uffd9\102\uffd9\107\uffd9\116\uffd9\117\uffd9\120\uffd9\121" +
    "\uffd9\132\uffd9\001\002\000\076\002\ufff4\003\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\013\ufff4\016\ufff4\022" +
    "\ufff4\034\ufff4\037\ufff4\041\ufff4\044\ufff4\045\ufff4\051\ufff4" +
    "\053\ufff4\054\ufff4\064\ufff4\065\ufff4\066\ufff4\070\ufff4\071" +
    "\ufff4\102\ufff4\107\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4" +
    "\132\ufff4\001\002\000\076\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\016\ufff3\022\ufff3" +
    "\034\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\053" +
    "\ufff3\054\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071\ufff3" +
    "\102\ufff3\107\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\132" +
    "\ufff3\001\002\000\004\011\u013b\001\002\000\004\011\u013a" +
    "\001\002\000\004\016\u012c\001\002\000\004\014\u0114\001" +
    "\002\000\004\011\u0113\001\002\000\076\002\uffe3\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013\uffe3\016" +
    "\uffe3\022\uffe3\034\uffe3\037\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\051\uffe3\053\uffe3\054\uffe3\064\uffe3\065\uffe3\066\uffe3\070" +
    "\uffe3\071\uffe3\102\uffe3\107\uffe3\116\uffe3\117\uffe3\120\uffe3" +
    "\121\uffe3\132\uffe3\001\002\000\004\014\u010e\001\002\000" +
    "\156\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\013\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\033\uff7f\034\uff7f\037\uff7f\045\uff7f\051" +
    "\uff7f\053\uff7f\054\uff7f\057\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\102\uff7f\107\uff7f\116\uff7f\117" +
    "\uff7f\120\uff7f\121\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f" +
    "\130\uff7f\131\uff7f\132\uff7f\140\uff7f\141\uff7f\142\uff7f\143" +
    "\uff7f\144\uff7f\146\uff7f\001\002\000\156\003\uff85\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\013\uff85\015" +
    "\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\037\uff85\045\uff85\051\uff85\053\uff85\054\uff85" +
    "\057\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\102\uff85\107\uff85\116\uff85\117\uff85\120\uff85\121\uff85" +
    "\123\uff85\124\uff85\125\uff85\126\uff85\130\uff85\131\uff85\132" +
    "\uff85\140\uff85\141\uff85\142\uff85\143\uff85\144\uff85\146\uff85" +
    "\001\002\000\004\016\347\001\002\000\004\011\346\001" +
    "\002\000\004\011\345\001\002\000\004\014\342\001\002" +
    "\000\004\014\335\001\002\000\076\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\013\uffec\016\uffec" +
    "\022\uffec\034\uffec\037\uffec\041\uffec\044\uffec\045\uffec\051" +
    "\uffec\053\uffec\054\uffec\064\uffec\065\uffec\066\uffec\070\uffec" +
    "\071\uffec\102\uffec\107\uffec\116\uffec\117\uffec\120\uffec\121" +
    "\uffec\132\uffec\001\002\000\004\014\333\001\002\000\004" +
    "\011\332\001\002\000\020\014\224\016\uff84\017\215\021" +
    "\uff84\124\uff84\125\uff84\126\uff84\001\002\000\004\014\321" +
    "\001\002\000\004\011\320\001\002\000\004\011\317\001" +
    "\002\000\004\012\105\001\002\000\156\003\uff88\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\013\uff88\015" +
    "\uff88\016\uff88\017\215\020\uff88\021\uff88\022\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\037\uff88\045\uff88\051\uff88\053\uff88\054\uff88" +
    "\057\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\102\uff88\107\uff88\116\uff88\117\uff88\120\uff88\121\uff88" +
    "\123\uff88\124\uff88\125\uff88\126\uff88\130\uff88\131\uff88\132" +
    "\uff88\140\uff88\141\uff88\142\uff88\143\uff88\144\uff88\146\uff88" +
    "\001\002\000\004\011\311\001\002\000\004\011\310\001" +
    "\002\000\076\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\016\ufff1\022\ufff1\034\ufff1\037" +
    "\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\053\ufff1\054\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\070\ufff1\071\ufff1\102\ufff1\107" +
    "\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\132\ufff1\001\002" +
    "\000\012\021\300\124\246\125\247\126\245\001\002\000" +
    "\070\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\016\uffda\022\uffda\034\uffda\037\uffda\045\uffda\051\uffda\053" +
    "\uffda\054\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\102\uffda\107\uffda\116\uffda\117\uffda\120\uffda\121" +
    "\uffda\132\uffda\001\002\000\004\011\277\001\002\000\004" +
    "\011\276\001\002\000\004\011\275\001\002\000\004\014" +
    "\264\001\002\000\004\002\263\001\002\000\156\003\uff81" +
    "\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\013" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\037\uff81\045\uff81\051\uff81\053\uff81" +
    "\054\uff81\057\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070" +
    "\uff81\071\uff81\102\uff81\107\uff81\116\uff81\117\uff81\120\uff81" +
    "\121\uff81\123\uff81\124\uff81\125\uff81\126\uff81\130\uff81\131" +
    "\uff81\132\uff81\140\uff81\141\uff81\142\uff81\143\uff81\144\uff81" +
    "\146\uff81\001\002\000\060\004\021\005\076\006\103\007" +
    "\017\010\044\011\135\014\142\016\134\035\133\071\043" +
    "\072\130\073\132\074\123\075\141\077\117\127\116\141" +
    "\131\142\136\147\114\150\125\151\137\152\115\153\121" +
    "\001\002\000\076\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\013\ufffd\016\ufffd\022\ufffd\034\ufffd" +
    "\037\ufffd\041\ufffd\044\ufffd\045\ufffd\051\ufffd\053\ufffd\054" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\070\ufffd\071\ufffd\102\ufffd" +
    "\107\ufffd\116\ufffd\117\ufffd\120\ufffd\121\ufffd\132\ufffd\001" +
    "\002\000\004\011\112\001\002\000\004\012\105\001\002" +
    "\000\156\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\011\uff82\013\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\037\uff82\045\uff82" +
    "\051\uff82\053\uff82\054\uff82\057\uff82\064\uff82\065\uff82\066" +
    "\uff82\067\uff82\070\uff82\071\uff82\102\uff82\107\uff82\116\uff82" +
    "\117\uff82\120\uff82\121\uff82\123\uff82\124\uff82\125\uff82\126" +
    "\uff82\130\uff82\131\uff82\132\uff82\140\uff82\141\uff82\142\uff82" +
    "\143\uff82\144\uff82\146\uff82\001\002\000\076\002\uff79\003" +
    "\uff79\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\013\uff79" +
    "\016\uff79\022\uff79\034\uff79\037\uff79\041\uff79\044\uff79\045" +
    "\uff79\051\uff79\053\uff79\054\uff79\064\uff79\065\uff79\066\uff79" +
    "\070\uff79\071\uff79\102\uff79\107\uff79\116\uff79\117\uff79\120" +
    "\uff79\121\uff79\132\uff79\001\002\000\070\003\042\004\021" +
    "\005\076\006\103\007\017\010\044\013\107\016\056\022" +
    "\074\034\037\037\052\045\062\051\057\053\024\054\015" +
    "\064\077\065\027\066\051\070\046\071\043\102\054\107" +
    "\014\116\025\117\040\120\006\121\005\132\023\001\002" +
    "\000\070\003\042\004\021\005\076\006\103\007\017\010" +
    "\044\013\110\016\056\022\074\034\037\037\052\045\062" +
    "\051\057\053\024\054\015\064\077\065\027\066\051\070" +
    "\046\071\043\102\054\107\014\116\025\117\040\120\006" +
    "\121\005\132\023\001\002\000\102\002\uff74\003\uff74\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\010\uff74\013\uff74\016\uff74" +
    "\022\uff74\034\uff74\037\uff74\041\uff74\044\uff74\045\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\064\uff74\065\uff74\066\uff74" +
    "\070\uff74\071\uff74\102\uff74\107\uff74\116\uff74\117\uff74\120" +
    "\uff74\121\uff74\132\uff74\134\uff74\001\002\000\102\002\uff75" +
    "\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\013" +
    "\uff75\016\uff75\022\uff75\034\uff75\037\uff75\041\uff75\044\uff75" +
    "\045\uff75\051\uff75\052\uff75\053\uff75\054\uff75\064\uff75\065" +
    "\uff75\066\uff75\070\uff75\071\uff75\102\uff75\107\uff75\116\uff75" +
    "\117\uff75\120\uff75\121\uff75\132\uff75\134\uff75\001\002\000" +
    "\076\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\013\ufffe\016\ufffe\022\ufffe\034\ufffe\037\ufffe\041" +
    "\ufffe\044\ufffe\045\ufffe\051\ufffe\053\ufffe\054\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\070\ufffe\071\ufffe\102\ufffe\107\ufffe\116" +
    "\ufffe\117\ufffe\120\ufffe\121\ufffe\132\ufffe\001\002\000\076" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\013\ufffc\016\ufffc\022\ufffc\034\ufffc\037\ufffc\041\ufffc" +
    "\044\ufffc\045\ufffc\051\ufffc\053\ufffc\054\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\070\ufffc\071\ufffc\102\ufffc\107\ufffc\116\ufffc" +
    "\117\ufffc\120\ufffc\121\ufffc\132\ufffc\001\002\000\144\003" +
    "\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\013\uff9c\015\uff9c\016\uff9c\020\uff9c\022\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\037\uff9c\045\uff9c\051\uff9c\053\uff9c\054\uff9c\057" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\102\uff9c\107\uff9c\116\uff9c\117\uff9c\120\uff9c\121\uff9c\123" +
    "\uff9c\130\uff9c\131\uff9c\132\uff9c\140\uff9c\141\uff9c\142\uff9c" +
    "\143\uff9c\144\uff9c\146\uff9c\001\002\000\144\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\013\uff98" +
    "\015\uff98\016\uff98\020\uff98\022\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\037\uff98\045\uff98\051\uff98\053\uff98\054\uff98\057\uff98\064" +
    "\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\102\uff98" +
    "\107\uff98\116\uff98\117\uff98\120\uff98\121\uff98\123\uff98\130" +
    "\uff98\131\uff98\132\uff98\140\uff98\141\uff98\142\uff98\143\uff98" +
    "\144\uff98\146\uff98\001\002\000\144\003\uff9a\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\013\uff9a\015\uff9a" +
    "\016\uff9a\020\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\037\uff9a" +
    "\045\uff9a\051\uff9a\053\uff9a\054\uff9a\057\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\102\uff9a\107\uff9a" +
    "\116\uff9a\117\uff9a\120\uff9a\121\uff9a\123\uff9a\130\uff9a\131" +
    "\uff9a\132\uff9a\140\uff9a\141\uff9a\142\uff9a\143\uff9a\144\uff9a" +
    "\146\uff9a\001\002\000\056\004\021\005\076\006\103\007" +
    "\017\010\044\014\142\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\004\014\255\001\002\000\004\011\254\001\002\000" +
    "\144\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\013\uff99\015\uff99\016\uff99\020\uff99\022\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\037\uff99\045\uff99\051\uff99\053\uff99\054" +
    "\uff99\057\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\102\uff99\107\uff99\116\uff99\117\uff99\120\uff99\121" +
    "\uff99\123\uff99\130\uff99\131\uff99\132\uff99\140\uff99\141\uff99" +
    "\142\uff99\143\uff99\144\uff99\146\uff99\001\002\000\152\003" +
    "\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\013\uff96\015\uff96\016\uff96\020\uff96\022\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\037\uff96\045\uff96\051\uff96\053\uff96\054\uff96\057" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\102\uff96\107\uff96\116\uff96\117\uff96\120\uff96\121\uff96\123" +
    "\uff96\124\246\125\247\126\245\130\uff96\131\uff96\132\uff96" +
    "\140\uff96\141\uff96\142\uff96\143\uff96\144\uff96\146\uff96\001" +
    "\002\000\004\014\242\001\002\000\044\011\uff71\025\156" +
    "\026\147\027\165\030\155\031\164\032\151\033\145\057" +
    "\161\130\153\131\152\140\150\141\154\142\160\143\146" +
    "\144\157\146\162\001\002\000\144\003\uff97\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013\uff97\015\uff97" +
    "\016\uff97\020\uff97\022\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\037\uff97" +
    "\045\uff97\051\uff97\053\uff97\054\uff97\057\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\102\uff97\107\uff97" +
    "\116\uff97\117\uff97\120\uff97\121\uff97\123\uff97\130\uff97\131" +
    "\uff97\132\uff97\140\uff97\141\uff97\142\uff97\143\uff97\144\uff97" +
    "\146\uff97\001\002\000\156\003\uff87\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\011\uff87\013\uff87\015\uff87\016\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\037\uff87\045\uff87\051\uff87\053\uff87\054\uff87\057\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\102\uff87" +
    "\107\uff87\116\uff87\117\uff87\120\uff87\121\uff87\123\uff87\124" +
    "\uff87\125\uff87\126\uff87\130\uff87\131\uff87\132\uff87\140\uff87" +
    "\141\uff87\142\uff87\143\uff87\144\uff87\146\uff87\001\002\000" +
    "\144\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\013\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\037\uff9e\045\uff9e\051\uff9e\053\uff9e\054" +
    "\uff9e\057\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\102\uff9e\107\uff9e\116\uff9e\117\uff9e\120\uff9e\121" +
    "\uff9e\123\uff9e\130\uff9e\131\uff9e\132\uff9e\140\uff9e\141\uff9e" +
    "\142\uff9e\143\uff9e\144\uff9e\146\uff9e\001\002\000\004\014" +
    "\237\001\002\000\056\004\021\005\076\006\103\007\017" +
    "\010\044\014\142\016\134\035\133\071\043\072\130\073" +
    "\132\074\123\075\141\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\004\014\233\001\002\000\144\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\013\uff92\015\uff92\016" +
    "\uff92\020\uff92\022\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\037\uff92\045" +
    "\uff92\051\uff92\053\uff92\054\uff92\057\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\071\uff92\102\uff92\107\uff92\116" +
    "\uff92\117\uff92\120\uff92\121\uff92\123\uff92\130\uff92\131\uff92" +
    "\132\uff92\140\uff92\141\uff92\142\uff92\143\uff92\144\uff92\146" +
    "\uff92\001\002\000\156\003\uff84\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\013\uff84\014\224\015\uff84\016" +
    "\uff84\017\uff84\020\uff84\022\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\037" +
    "\uff84\045\uff84\051\uff84\053\uff84\054\uff84\057\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\102\uff84\107" +
    "\uff84\116\uff84\117\uff84\120\uff84\121\uff84\123\uff84\124\uff84" +
    "\125\uff84\126\uff84\130\uff84\131\uff84\132\uff84\140\uff84\141" +
    "\uff84\142\uff84\143\uff84\144\uff84\146\uff84\001\002\000\076" +
    "\002\uff72\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010" +
    "\uff72\013\uff72\016\uff72\022\uff72\034\uff72\037\uff72\041\uff72" +
    "\044\uff72\045\uff72\051\uff72\053\uff72\054\uff72\064\uff72\065" +
    "\uff72\066\uff72\070\uff72\071\uff72\102\uff72\107\uff72\116\uff72" +
    "\117\uff72\120\uff72\121\uff72\132\uff72\001\002\000\016\004" +
    "\021\005\076\006\103\007\017\010\044\016\211\001\002" +
    "\000\144\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\013\uff9b\015\uff9b\016\uff9b\020\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\037\uff9b\045\uff9b\051\uff9b\053\uff9b" +
    "\054\uff9b\057\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\102\uff9b\107\uff9b\116\uff9b\117\uff9b\120\uff9b" +
    "\121\uff9b\123\uff9b\130\uff9b\131\uff9b\132\uff9b\140\uff9b\141" +
    "\uff9b\142\uff9b\143\uff9b\144\uff9b\146\uff9b\001\002\000\144" +
    "\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\013\uff9d\015\uff9d\016\uff9d\020\uff9d\022\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\037\uff9d\045\uff9d\051\uff9d\053\uff9d\054\uff9d" +
    "\057\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\102\uff9d\107\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d" +
    "\123\uff9d\130\uff9d\131\uff9d\132\uff9d\140\uff9d\141\uff9d\142" +
    "\uff9d\143\uff9d\144\uff9d\146\uff9d\001\002\000\004\014\206" +
    "\001\002\000\056\004\021\005\076\006\103\007\017\010" +
    "\044\014\142\016\134\035\133\071\043\072\130\073\132" +
    "\074\123\075\141\077\117\127\116\141\131\142\136\147" +
    "\114\150\125\151\137\152\115\153\121\001\002\000\144" +
    "\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011" +
    "\uff90\013\uff90\015\uff90\016\uff90\020\uff90\022\uff90\024\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\037\uff90\045\uff90\051\uff90\053\uff90\054\uff90" +
    "\057\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\102\uff90\107\uff90\116\uff90\117\uff90\120\uff90\121\uff90" +
    "\123\uff90\130\uff90\131\uff90\132\uff90\140\uff90\141\uff90\142" +
    "\uff90\143\uff90\144\uff90\146\uff90\001\002\000\044\015\163" +
    "\025\156\026\147\027\165\030\155\031\164\032\151\033" +
    "\145\057\161\130\153\131\152\140\150\141\154\142\160" +
    "\143\146\144\157\146\162\001\002\000\056\004\021\005" +
    "\076\006\103\007\017\010\044\014\142\016\134\035\133" +
    "\071\043\072\130\073\132\074\123\075\141\077\117\127" +
    "\116\141\131\142\136\147\114\150\125\151\137\152\115" +
    "\153\121\001\002\000\056\004\021\005\076\006\103\007" +
    "\017\010\044\014\142\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\056\004\021\005\076\006\103\007\017\010\044\014" +
    "\142\016\134\035\133\071\043\072\130\073\132\074\123" +
    "\075\141\077\117\127\116\141\131\142\136\147\114\150" +
    "\125\151\137\152\115\153\121\001\002\000\056\004\021" +
    "\005\076\006\103\007\017\010\044\014\142\016\134\035" +
    "\133\071\043\072\130\073\132\074\123\075\141\077\117" +
    "\127\116\141\131\142\136\147\114\150\125\151\137\152" +
    "\115\153\121\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\056\004" +
    "\021\005\076\006\103\007\017\010\044\014\142\016\134" +
    "\035\133\071\043\072\130\073\132\074\123\075\141\077" +
    "\117\127\116\141\131\142\136\147\114\150\125\151\137" +
    "\152\115\153\121\001\002\000\056\004\021\005\076\006" +
    "\103\007\017\010\044\014\142\016\134\035\133\071\043" +
    "\072\130\073\132\074\123\075\141\077\117\127\116\141" +
    "\131\142\136\147\114\150\125\151\137\152\115\153\121" +
    "\001\002\000\056\004\021\005\076\006\103\007\017\010" +
    "\044\014\142\016\134\035\133\071\043\072\130\073\132" +
    "\074\123\075\141\077\117\127\116\141\131\142\136\147" +
    "\114\150\125\151\137\152\115\153\121\001\002\000\056" +
    "\004\021\005\076\006\103\007\017\010\044\014\142\016" +
    "\134\035\133\071\043\072\130\073\132\074\123\075\141" +
    "\077\117\127\116\141\131\142\136\147\114\150\125\151" +
    "\137\152\115\153\121\001\002\000\056\004\021\005\076" +
    "\006\103\007\017\010\044\014\142\016\134\035\133\071" +
    "\043\072\130\073\132\074\123\075\141\077\117\127\116" +
    "\141\131\142\136\147\114\150\125\151\137\152\115\153" +
    "\121\001\002\000\056\004\021\005\076\006\103\007\017" +
    "\010\044\014\142\016\134\035\133\071\043\072\130\073" +
    "\132\074\123\075\141\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\004\016\171\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\144\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\013\uff94\015\uff94\016\uff94\020\uff94\022" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\037\uff94\045\uff94\051\uff94\053" +
    "\uff94\054\uff94\057\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\102\uff94\107\uff94\116\uff94\117\uff94\120" +
    "\uff94\121\uff94\123\uff94\130\uff94\131\uff94\132\uff94\140\uff94" +
    "\141\uff94\142\uff94\143\uff94\144\uff94\146\uff94\001\002\000" +
    "\056\004\021\005\076\006\103\007\017\010\044\014\142" +
    "\016\134\035\133\071\043\072\130\073\132\074\123\075" +
    "\141\077\117\127\116\141\131\142\136\147\114\150\125" +
    "\151\137\152\115\153\121\001\002\000\056\004\021\005" +
    "\076\006\103\007\017\010\044\014\142\016\134\035\133" +
    "\071\043\072\130\073\132\074\123\075\141\077\117\127" +
    "\116\141\131\142\136\147\114\150\125\151\137\152\115" +
    "\153\121\001\002\000\144\003\uffa9\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\015\uffa9\016\uffa9" +
    "\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\145\034\uffa9\037\uffa9\045\uffa9" +
    "\051\uffa9\053\uffa9\054\uffa9\057\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\102\uffa9\107\uffa9\116\uffa9" +
    "\117\uffa9\120\uffa9\121\uffa9\123\uffa9\130\uffa9\131\uffa9\132" +
    "\uffa9\140\150\141\154\142\160\143\146\144\uffa9\146\162" +
    "\001\002\000\144\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\013\uffa6\015\uffa6\016\uffa6\020\uffa6" +
    "\022\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\145\034\uffa6\037\uffa6\045\uffa6\051\uffa6" +
    "\053\uffa6\054\uffa6\057\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\102\uffa6\107\uffa6\116\uffa6\117\uffa6" +
    "\120\uffa6\121\uffa6\123\uffa6\130\uffa6\131\uffa6\132\uffa6\140" +
    "\150\141\154\142\160\143\146\144\uffa6\146\162\001\002" +
    "\000\144\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\013\uffa1\015\uffa1\016\uffa1\020\uffa1\022\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\145\034\uffa1\037\uffa1\045\uffa1\051\uffa1\053\uffa1" +
    "\054\uffa1\057\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\102\uffa1\107\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\121\uffa1\123\uffa1\130\uffa1\131\uffa1\132\uffa1\140\uffa1\141" +
    "\uffa1\142\uffa1\143\uffa1\144\uffa1\146\uffa1\001\002\000\144" +
    "\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\013\uffad\015\uffad\016\uffad\020\uffad\022\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\037\uffad\045\uffad\051\uffad\053\uffad\054\uffad" +
    "\057\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\102\uffad\107\uffad\116\uffad\117\uffad\120\uffad\121\uffad" +
    "\123\uffad\130\uffad\131\uffad\132\uffad\140\uffad\141\uffad\142" +
    "\uffad\143\uffad\144\uffad\146\uffad\001\002\000\144\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013" +
    "\uffa3\015\uffa3\016\uffa3\020\uffa3\022\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\145\034" +
    "\uffa3\037\uffa3\045\uffa3\051\uffa3\053\uffa3\054\uffa3\057\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\102" +
    "\uffa3\107\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\123\uffa3" +
    "\130\uffa3\131\uffa3\132\uffa3\140\uffa3\141\uffa3\142\uffa3\143" +
    "\uffa3\144\uffa3\146\uffa3\001\002\000\144\003\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\013\uffae\015" +
    "\uffae\016\uffae\020\uffae\022\uffae\024\uffae\025\156\026\147" +
    "\027\165\030\155\031\164\032\151\033\145\034\uffae\037" +
    "\uffae\045\uffae\051\uffae\053\uffae\054\uffae\057\uffae\064\uffae" +
    "\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\102\uffae\107" +
    "\uffae\116\uffae\117\uffae\120\uffae\121\uffae\123\uffae\130\uffae" +
    "\131\uffae\132\uffae\140\150\141\154\142\160\143\146\144" +
    "\uffae\146\162\001\002\000\144\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab\015\uffab\016" +
    "\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\165" +
    "\030\155\031\164\032\151\033\145\034\uffab\037\uffab\045" +
    "\uffab\051\uffab\053\uffab\054\uffab\057\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\070\uffab\071\uffab\102\uffab\107\uffab\116" +
    "\uffab\117\uffab\120\uffab\121\uffab\123\uffab\130\uffab\131\uffab" +
    "\132\uffab\140\150\141\154\142\160\143\146\144\uffab\146" +
    "\162\001\002\000\144\003\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\013\uffa7\015\uffa7\016\uffa7\020" +
    "\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\145\034\uffa7\037\uffa7\045\uffa7\051" +
    "\uffa7\053\uffa7\054\uffa7\057\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\102\uffa7\107\uffa7\116\uffa7\117" +
    "\uffa7\120\uffa7\121\uffa7\123\uffa7\130\uffa7\131\uffa7\132\uffa7" +
    "\140\150\141\154\142\160\143\146\144\uffa7\146\162\001" +
    "\002\000\144\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\013\uffa4\015\uffa4\016\uffa4\020\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\145\034\uffa4\037\uffa4\045\uffa4\051\uffa4\053" +
    "\uffa4\054\uffa4\057\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\102\uffa4\107\uffa4\116\uffa4\117\uffa4\120" +
    "\uffa4\121\uffa4\123\uffa4\130\uffa4\131\uffa4\132\uffa4\140\uffa4" +
    "\141\uffa4\142\160\143\146\144\uffa4\146\162\001\002\000" +
    "\144\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\013\uffb0\015\uffb0\016\uffb0\020\uffb0\022\uffb0\024" +
    "\uffb0\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\034\uffb0\037\uffb0\045\uffb0\051\uffb0\053\uffb0\054" +
    "\uffb0\057\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0" +
    "\071\uffb0\102\uffb0\107\uffb0\116\uffb0\117\uffb0\120\uffb0\121" +
    "\uffb0\123\uffb0\130\uffb0\131\uffb0\132\uffb0\140\150\141\154" +
    "\142\160\143\146\144\157\146\162\001\002\000\144\003" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\013\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025" +
    "\156\026\147\027\165\030\155\031\164\032\151\033\145" +
    "\034\uffaf\037\uffaf\045\uffaf\051\uffaf\053\uffaf\054\uffaf\057" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\102\uffaf\107\uffaf\116\uffaf\117\uffaf\120\uffaf\121\uffaf\123" +
    "\uffaf\130\153\131\uffaf\132\uffaf\140\150\141\154\142\160" +
    "\143\146\144\157\146\162\001\002\000\144\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8" +
    "\015\uffa8\016\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\145\034\uffa8" +
    "\037\uffa8\045\uffa8\051\uffa8\053\uffa8\054\uffa8\057\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\102\uffa8" +
    "\107\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\123\uffa8\130" +
    "\uffa8\131\uffa8\132\uffa8\140\150\141\154\142\160\143\146" +
    "\144\uffa8\146\162\001\002\000\144\003\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5\015\uffa5" +
    "\016\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\145\034\uffa5\037\uffa5" +
    "\045\uffa5\051\uffa5\053\uffa5\054\uffa5\057\uffa5\064\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\102\uffa5\107\uffa5" +
    "\116\uffa5\117\uffa5\120\uffa5\121\uffa5\123\uffa5\130\uffa5\131" +
    "\uffa5\132\uffa5\140\uffa5\141\uffa5\142\160\143\146\144\uffa5" +
    "\146\162\001\002\000\144\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\165\030" +
    "\155\031\164\032\151\033\145\034\uffaa\037\uffaa\045\uffaa" +
    "\051\uffaa\053\uffaa\054\uffaa\057\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\102\uffaa\107\uffaa\116\uffaa" +
    "\117\uffaa\120\uffaa\121\uffaa\123\uffaa\130\uffaa\131\uffaa\132" +
    "\uffaa\140\150\141\154\142\160\143\146\144\uffaa\146\162" +
    "\001\002\000\144\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\013\uffa2\015\uffa2\016\uffa2\020\uffa2" +
    "\022\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\145\034\uffa2\037\uffa2\045\uffa2\051\uffa2" +
    "\053\uffa2\054\uffa2\057\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\102\uffa2\107\uffa2\116\uffa2\117\uffa2" +
    "\120\uffa2\121\uffa2\123\uffa2\130\uffa2\131\uffa2\132\uffa2\140" +
    "\uffa2\141\uffa2\142\uffa2\143\uffa2\144\uffa2\146\uffa2\001\002" +
    "\000\144\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\013\uffa0\015\uffa0\016\uffa0\020\uffa0\022\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\037\uffa0\045\uffa0\051\uffa0\053\uffa0" +
    "\054\uffa0\057\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\102\uffa0\107\uffa0\116\uffa0\117\uffa0\120\uffa0" +
    "\121\uffa0\123\uffa0\130\uffa0\131\uffa0\132\uffa0\140\uffa0\141" +
    "\uffa0\142\uffa0\143\uffa0\144\uffa0\146\uffa0\001\002\000\004" +
    "\016\207\001\002\000\004\015\210\001\002\000\144\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\013\uff91\015\uff91\016\uff91\020\uff91\022\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\034\uff91\037\uff91\045\uff91\051\uff91\053\uff91\054\uff91\057" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91" +
    "\102\uff91\107\uff91\116\uff91\117\uff91\120\uff91\121\uff91\123" +
    "\uff91\130\uff91\131\uff91\132\uff91\140\uff91\141\uff91\142\uff91" +
    "\143\uff91\144\uff91\146\uff91\001\002\000\156\003\uff84\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\013\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\033\uff84\034\uff84\037\uff84\045\uff84\051\uff84\053\uff84\054" +
    "\uff84\057\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84" +
    "\071\uff84\102\uff84\107\uff84\116\uff84\117\uff84\120\uff84\121" +
    "\uff84\123\uff84\124\uff84\125\uff84\126\uff84\130\uff84\131\uff84" +
    "\132\uff84\140\uff84\141\uff84\142\uff84\143\uff84\144\uff84\146" +
    "\uff84\001\002\000\146\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\013\uff95\015\uff95\016\uff95\020" +
    "\uff95\022\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\037\uff95\045\uff95\051" +
    "\uff95\053\uff95\054\uff95\057\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\070\uff95\071\uff95\102\uff95\107\uff95\116\uff95\117" +
    "\uff95\120\uff95\121\uff95\123\uff95\126\213\130\uff95\131\uff95" +
    "\132\uff95\140\uff95\141\uff95\142\uff95\143\uff95\144\uff95\146" +
    "\uff95\001\002\000\016\004\021\005\076\006\103\007\017" +
    "\010\044\016\211\001\002\000\156\003\uff89\004\uff89\005" +
    "\uff89\006\uff89\007\uff89\010\uff89\011\uff89\013\uff89\015\uff89" +
    "\016\uff89\017\215\020\uff89\021\uff89\022\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\037\uff89\045\uff89\051\uff89\053\uff89\054\uff89\057" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89" +
    "\102\uff89\107\uff89\116\uff89\117\uff89\120\uff89\121\uff89\123" +
    "\uff89\124\uff89\125\uff89\126\uff89\130\uff89\131\uff89\132\uff89" +
    "\140\uff89\141\uff89\142\uff89\143\uff89\144\uff89\146\uff89\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\156\003" +
    "\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\013\uff86\015\uff86\016\uff86\017\217\020\uff86\021\uff86\022" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\037\uff86\045\uff86\051\uff86\053" +
    "\uff86\054\uff86\057\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\102\uff86\107\uff86\116\uff86\117\uff86\120" +
    "\uff86\121\uff86\123\uff86\124\uff86\125\uff86\126\uff86\130\uff86" +
    "\131\uff86\132\uff86\140\uff86\141\uff86\142\uff86\143\uff86\144" +
    "\uff86\146\uff86\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\044\020\221\025\156\026\147\027\165\030\155" +
    "\031\164\032\151\033\145\057\161\130\153\131\152\140" +
    "\150\141\154\142\160\143\146\144\157\146\162\001\002" +
    "\000\156\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\037\uffb2\045\uffb2" +
    "\051\uffb2\053\uffb2\054\uffb2\057\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\102\uffb2\107\uffb2\116\uffb2" +
    "\117\uffb2\120\uffb2\121\uffb2\123\uffb2\124\uffb2\125\uffb2\126" +
    "\uffb2\130\uffb2\131\uffb2\132\uffb2\140\uffb2\141\uffb2\142\uffb2" +
    "\143\uffb2\144\uffb2\146\uffb2\001\002\000\044\020\223\025" +
    "\156\026\147\027\165\030\155\031\164\032\151\033\145" +
    "\057\161\130\153\131\152\140\150\141\154\142\160\143" +
    "\146\144\157\146\162\001\002\000\156\003\uffb1\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\037\uffb1\045\uffb1\051\uffb1\053\uffb1\054\uffb1" +
    "\057\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\102\uffb1\107\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1" +
    "\123\uffb1\124\uffb1\125\uffb1\126\uffb1\130\uffb1\131\uffb1\132" +
    "\uffb1\140\uffb1\141\uffb1\142\uffb1\143\uffb1\144\uffb1\146\uffb1" +
    "\001\002\000\060\004\021\005\076\006\103\007\017\010" +
    "\044\014\142\015\uffbb\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\004\015\232\001\002\000\046\015\uffb9\024\uffb9\025" +
    "\156\026\147\027\165\030\155\031\164\032\151\033\145" +
    "\057\161\130\153\131\152\140\150\141\154\142\160\143" +
    "\146\144\157\146\162\001\002\000\006\015\uffbc\024\230" +
    "\001\002\000\056\004\021\005\076\006\103\007\017\010" +
    "\044\014\142\016\134\035\133\071\043\072\130\073\132" +
    "\074\123\075\141\077\117\127\116\141\131\142\136\147" +
    "\114\150\125\151\137\152\115\153\121\001\002\000\046" +
    "\015\uffba\024\uffba\025\156\026\147\027\165\030\155\031" +
    "\164\032\151\033\145\057\161\130\153\131\152\140\150" +
    "\141\154\142\160\143\146\144\157\146\162\001\002\000" +
    "\144\003\uff64\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64" +
    "\011\uff64\013\uff64\015\uff64\016\uff64\020\uff64\022\uff64\024" +
    "\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64" +
    "\033\uff64\034\uff64\037\uff64\045\uff64\051\uff64\053\uff64\054" +
    "\uff64\057\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64" +
    "\071\uff64\102\uff64\107\uff64\116\uff64\117\uff64\120\uff64\121" +
    "\uff64\123\uff64\130\uff64\131\uff64\132\uff64\140\uff64\141\uff64" +
    "\142\uff64\143\uff64\144\uff64\146\uff64\001\002\000\056\004" +
    "\021\005\076\006\103\007\017\010\044\014\142\016\134" +
    "\035\133\071\043\072\130\073\132\074\123\075\141\077" +
    "\117\127\116\141\131\142\136\147\114\150\125\151\137" +
    "\152\115\153\121\001\002\000\044\015\235\025\156\026" +
    "\147\027\165\030\155\031\164\032\151\033\145\057\161" +
    "\130\153\131\152\140\150\141\154\142\160\143\146\144" +
    "\157\146\162\001\002\000\144\003\uff8f\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\013\uff8f\015\uff8f\016" +
    "\uff8f\020\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\037\uff8f\045" +
    "\uff8f\051\uff8f\053\uff8f\054\uff8f\057\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\071\uff8f\102\uff8f\107\uff8f\116" +
    "\uff8f\117\uff8f\120\uff8f\121\uff8f\123\uff8f\130\uff8f\131\uff8f" +
    "\132\uff8f\140\uff8f\141\uff8f\142\uff8f\143\uff8f\144\uff8f\146" +
    "\uff8f\001\002\000\144\003\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\013\uff9f\015\uff9f\016\uff9f\020" +
    "\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\145\034\uff9f\037\uff9f\045\uff9f\051" +
    "\uff9f\053\uff9f\054\uff9f\057\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\070\uff9f\071\uff9f\102\uff9f\107\uff9f\116\uff9f\117" +
    "\uff9f\120\uff9f\121\uff9f\123\uff9f\130\uff9f\131\uff9f\132\uff9f" +
    "\140\uff9f\141\uff9f\142\160\143\146\144\uff9f\146\162\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\044\015" +
    "\241\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\057\161\130\153\131\152\140\150\141\154\142" +
    "\160\143\146\144\157\146\162\001\002\000\144\003\uff93" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\013" +
    "\uff93\015\uff93\016\uff93\020\uff93\022\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\037\uff93\045\uff93\051\uff93\053\uff93\054\uff93\057\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\102" +
    "\uff93\107\uff93\116\uff93\117\uff93\120\uff93\121\uff93\123\uff93" +
    "\130\uff93\131\uff93\132\uff93\140\uff93\141\uff93\142\uff93\143" +
    "\uff93\144\uff93\146\uff93\001\002\000\056\004\021\005\076" +
    "\006\103\007\017\010\044\014\142\016\134\035\133\071" +
    "\043\072\130\073\132\074\123\075\141\077\117\127\116" +
    "\141\131\142\136\147\114\150\125\151\137\152\115\153" +
    "\121\001\002\000\044\015\244\025\156\026\147\027\165" +
    "\030\155\031\164\032\151\033\145\057\161\130\153\131" +
    "\152\140\150\141\154\142\160\143\146\144\157\146\162" +
    "\001\002\000\144\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\013\uff8e\015\uff8e\016\uff8e\020\uff8e" +
    "\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\037\uff8e\045\uff8e\051\uff8e" +
    "\053\uff8e\054\uff8e\057\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\102\uff8e\107\uff8e\116\uff8e\117\uff8e" +
    "\120\uff8e\121\uff8e\123\uff8e\130\uff8e\131\uff8e\132\uff8e\140" +
    "\uff8e\141\uff8e\142\uff8e\143\uff8e\144\uff8e\146\uff8e\001\002" +
    "\000\016\004\021\005\076\006\103\007\017\010\044\016" +
    "\250\001\002\000\144\003\uff8b\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\013\uff8b\015\uff8b\016\uff8b\020" +
    "\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\037\uff8b\045\uff8b\051" +
    "\uff8b\053\uff8b\054\uff8b\057\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\071\uff8b\102\uff8b\107\uff8b\116\uff8b\117" +
    "\uff8b\120\uff8b\121\uff8b\123\uff8b\130\uff8b\131\uff8b\132\uff8b" +
    "\140\uff8b\141\uff8b\142\uff8b\143\uff8b\144\uff8b\146\uff8b\001" +
    "\002\000\144\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\013\uff8a\015\uff8a\016\uff8a\020\uff8a\022" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\037\uff8a\045\uff8a\051\uff8a\053" +
    "\uff8a\054\uff8a\057\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\102\uff8a\107\uff8a\116\uff8a\117\uff8a\120" +
    "\uff8a\121\uff8a\123\uff8a\130\uff8a\131\uff8a\132\uff8a\140\uff8a" +
    "\141\uff8a\142\uff8a\143\uff8a\144\uff8a\146\uff8a\001\002\000" +
    "\160\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\013\uff84\014\251\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\037\uff84\045" +
    "\uff84\051\uff84\053\uff84\054\uff84\057\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\102\uff84\107\uff84\116" +
    "\uff84\117\uff84\120\uff84\121\uff84\123\uff84\124\uff84\125\uff84" +
    "\126\uff84\130\uff84\131\uff84\132\uff84\140\uff84\141\uff84\142" +
    "\uff84\143\uff84\144\uff84\146\uff84\001\002\000\060\004\021" +
    "\005\076\006\103\007\017\010\044\014\142\015\uffbb\016" +
    "\134\035\133\071\043\072\130\073\132\074\123\075\141" +
    "\077\117\127\116\141\131\142\136\147\114\150\125\151" +
    "\137\152\115\153\121\001\002\000\004\015\253\001\002" +
    "\000\144\003\uff65\004\uff65\005\uff65\006\uff65\007\uff65\010" +
    "\uff65\011\uff65\013\uff65\015\uff65\016\uff65\020\uff65\022\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032" +
    "\uff65\033\uff65\034\uff65\037\uff65\045\uff65\051\uff65\053\uff65" +
    "\054\uff65\057\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070" +
    "\uff65\071\uff65\102\uff65\107\uff65\116\uff65\117\uff65\120\uff65" +
    "\121\uff65\123\uff65\130\uff65\131\uff65\132\uff65\140\uff65\141" +
    "\uff65\142\uff65\143\uff65\144\uff65\146\uff65\001\002\000\076" +
    "\002\uff73\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\013\uff73\016\uff73\022\uff73\034\uff73\037\uff73\041\uff73" +
    "\044\uff73\045\uff73\051\uff73\053\uff73\054\uff73\064\uff73\065" +
    "\uff73\066\uff73\070\uff73\071\uff73\102\uff73\107\uff73\116\uff73" +
    "\117\uff73\120\uff73\121\uff73\132\uff73\001\002\000\056\004" +
    "\021\005\076\006\103\007\017\010\044\014\142\016\134" +
    "\035\133\071\043\072\130\073\132\074\123\075\141\077" +
    "\117\127\116\141\131\142\136\147\114\150\125\151\137" +
    "\152\115\153\121\001\002\000\044\024\257\025\156\026" +
    "\147\027\165\030\155\031\164\032\151\033\145\057\161" +
    "\130\153\131\152\140\150\141\154\142\160\143\146\144" +
    "\157\146\162\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\044\015\261\025\156\026\147\027\165\030\155" +
    "\031\164\032\151\033\145\057\161\130\153\131\152\140" +
    "\150\141\154\142\160\143\146\144\157\146\162\001\002" +
    "\000\144\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\013\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d" +
    "\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\037\uff8d\045\uff8d\051\uff8d\053\uff8d" +
    "\054\uff8d\057\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\102\uff8d\107\uff8d\116\uff8d\117\uff8d\120\uff8d" +
    "\121\uff8d\123\uff8d\130\uff8d\131\uff8d\132\uff8d\140\uff8d\141" +
    "\uff8d\142\uff8d\143\uff8d\144\uff8d\146\uff8d\001\002\000\144" +
    "\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\013\uffac\015\uffac\016\uffac\020\uffac\022\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\037\uffac\045\uffac\051\uffac\053\uffac\054\uffac" +
    "\057\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071" +
    "\uffac\102\uffac\107\uffac\116\uffac\117\uffac\120\uffac\121\uffac" +
    "\123\uffac\130\uffac\131\uffac\132\uffac\140\uffac\141\uffac\142" +
    "\uffac\143\uffac\144\uffac\146\uffac\001\002\000\004\002\001" +
    "\001\002\000\004\147\265\001\002\000\006\015\267\024" +
    "\266\001\002\000\056\004\021\005\076\006\103\007\017" +
    "\010\044\014\142\016\134\035\133\071\043\072\130\073" +
    "\132\074\123\075\141\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\004\011\uffb8\001\002\000\006\015\273\024\272\001\002" +
    "\000\046\015\uffb3\024\uffb3\025\156\026\147\027\165\030" +
    "\155\031\164\032\151\033\145\057\161\130\153\131\152" +
    "\140\150\141\154\142\160\143\146\144\157\146\162\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\004\011" +
    "\uffb7\001\002\000\046\015\uffb4\024\uffb4\025\156\026\147" +
    "\027\165\030\155\031\164\032\151\033\145\057\161\130" +
    "\153\131\152\140\150\141\154\142\160\143\146\144\157" +
    "\146\162\001\002\000\076\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7\016\ufff7\022\ufff7" +
    "\034\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\053" +
    "\ufff7\054\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7" +
    "\102\ufff7\107\ufff7\116\ufff7\117\ufff7\120\ufff7\121\ufff7\132" +
    "\ufff7\001\002\000\076\002\ufff2\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\013\ufff2\016\ufff2\022\ufff2\034" +
    "\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\053\ufff2" +
    "\054\ufff2\064\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2\102" +
    "\ufff2\107\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\132\ufff2" +
    "\001\002\000\076\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\013\uffe6\016\uffe6\022\uffe6\034\uffe6" +
    "\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\070\uffe6\071\uffe6\102\uffe6" +
    "\107\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\132\uffe6\001" +
    "\002\000\060\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\076\304\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\006\011\uffc1\015\uffc1\001\002\000\136\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\015\uffbf\016" +
    "\uffbf\022\uffbf\024\uffbf\025\156\026\147\027\165\030\155" +
    "\031\164\032\151\033\145\034\uffbf\037\uffbf\045\uffbf\051" +
    "\uffbf\053\uffbf\054\uffbf\057\161\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\102\uffbf\107\uffbf\116\uffbf\117" +
    "\uffbf\120\uffbf\121\uffbf\130\153\131\152\132\uffbf\140\150" +
    "\141\154\142\160\143\146\144\157\146\162\001\002\000" +
    "\076\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\015\uffbe\016\uffbe\022\uffbe\024\uffbe\034\uffbe\037" +
    "\uffbe\045\uffbe\051\uffbe\053\uffbe\054\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\102\uffbe\107\uffbe\116" +
    "\uffbe\117\uffbe\120\uffbe\121\uffbe\132\uffbe\001\002\000\004" +
    "\014\305\001\002\000\056\004\021\005\076\006\103\007" +
    "\017\010\044\014\142\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\044\015\307\025\156\026\147\027\165\030\155\031" +
    "\164\032\151\033\145\057\161\130\153\131\152\140\150" +
    "\141\154\142\160\143\146\144\157\146\162\001\002\000" +
    "\076\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\015\uffbd\016\uffbd\022\uffbd\024\uffbd\034\uffbd\037" +
    "\uffbd\045\uffbd\051\uffbd\053\uffbd\054\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\102\uffbd\107\uffbd\116" +
    "\uffbd\117\uffbd\120\uffbd\121\uffbd\132\uffbd\001\002\000\076" +
    "\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\013\ufff9\016\ufff9\022\ufff9\034\ufff9\037\ufff9\041\ufff9" +
    "\044\ufff9\045\ufff9\051\ufff9\053\ufff9\054\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\070\ufff9\071\ufff9\102\ufff9\107\ufff9\116\ufff9" +
    "\117\ufff9\120\ufff9\121\ufff9\132\ufff9\001\002\000\076\002" +
    "\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\013\uffe4\016\uffe4\022\uffe4\034\uffe4\037\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\051\uffe4\053\uffe4\054\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\070\uffe4\071\uffe4\102\uffe4\107\uffe4\116\uffe4\117" +
    "\uffe4\120\uffe4\121\uffe4\132\uffe4\001\002\000\004\052\313" +
    "\001\002\000\004\014\314\001\002\000\056\004\021\005" +
    "\076\006\103\007\017\010\044\014\142\016\134\035\133" +
    "\071\043\072\130\073\132\074\123\075\141\077\117\127" +
    "\116\141\131\142\136\147\114\150\125\151\137\152\115" +
    "\153\121\001\002\000\044\015\316\025\156\026\147\027" +
    "\165\030\155\031\164\032\151\033\145\057\161\130\153" +
    "\131\152\140\150\141\154\142\160\143\146\144\157\146" +
    "\162\001\002\000\004\011\uff5a\001\002\000\076\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\013" +
    "\uffe8\016\uffe8\022\uffe8\034\uffe8\037\uffe8\041\uffe8\044\uffe8" +
    "\045\uffe8\051\uffe8\053\uffe8\054\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\070\uffe8\071\uffe8\102\uffe8\107\uffe8\116\uffe8\117\uffe8" +
    "\120\uffe8\121\uffe8\132\uffe8\001\002\000\076\002\ufff0\003" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0" +
    "\016\ufff0\022\ufff0\034\ufff0\037\ufff0\041\ufff0\044\ufff0\045" +
    "\ufff0\051\ufff0\053\ufff0\054\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\070\ufff0\071\ufff0\102\ufff0\107\ufff0\116\ufff0\117\ufff0\120" +
    "\ufff0\121\ufff0\132\ufff0\001\002\000\004\147\322\001\002" +
    "\000\006\015\324\024\323\001\002\000\056\004\021\005" +
    "\076\006\103\007\017\010\044\014\142\016\134\035\133" +
    "\071\043\072\130\073\132\074\123\075\141\077\117\127" +
    "\116\141\131\142\136\147\114\150\125\151\137\152\115" +
    "\153\121\001\002\000\004\011\uffb6\001\002\000\006\015" +
    "\326\024\272\001\002\000\004\011\uffb5\001\002\000\006" +
    "\017\217\021\330\001\002\000\056\004\021\005\076\006" +
    "\103\007\017\010\044\014\142\016\134\035\133\071\043" +
    "\072\130\073\132\074\123\075\141\077\117\127\116\141" +
    "\131\142\136\147\114\150\125\151\137\152\115\153\121" +
    "\001\002\000\046\011\uffc0\015\uffc0\025\156\026\147\027" +
    "\165\030\155\031\164\032\151\033\145\057\161\130\153" +
    "\131\152\140\150\141\154\142\160\143\146\144\157\146" +
    "\162\001\002\000\076\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\013\ufffa\016\ufffa\022\ufffa\034" +
    "\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\053\ufffa" +
    "\054\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa\071\ufffa\102" +
    "\ufffa\107\ufffa\116\ufffa\117\ufffa\120\ufffa\121\ufffa\132\ufffa" +
    "\001\002\000\004\015\334\001\002\000\004\011\uffe1\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\044\024" +
    "\337\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\057\161\130\153\131\152\140\150\141\154\142" +
    "\160\143\146\144\157\146\162\001\002\000\004\016\340" +
    "\001\002\000\004\015\341\001\002\000\004\011\uffe2\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\044\015" +
    "\344\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\057\161\130\153\131\152\140\150\141\154\142" +
    "\160\143\146\144\157\146\162\001\002\000\004\011\uffdf" +
    "\001\002\000\076\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\013\uffe9\016\uffe9\022\uffe9\034\uffe9" +
    "\037\uffe9\041\uffe9\044\uffe9\045\uffe9\051\uffe9\053\uffe9\054" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071\uffe9\102\uffe9" +
    "\107\uffe9\116\uffe9\117\uffe9\120\uffe9\121\uffe9\132\uffe9\001" +
    "\002\000\076\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\013\uffee\016\uffee\022\uffee\034\uffee\037" +
    "\uffee\041\uffee\044\uffee\045\uffee\051\uffee\053\uffee\054\uffee" +
    "\064\uffee\065\uffee\066\uffee\070\uffee\071\uffee\102\uffee\107" +
    "\uffee\116\uffee\117\uffee\120\uffee\121\uffee\132\uffee\001\002" +
    "\000\004\012\350\001\002\000\020\004\021\005\076\006" +
    "\103\007\017\010\044\013\352\016\211\001\002\000\020" +
    "\004\021\005\076\006\103\007\017\010\044\013\u010b\016" +
    "\211\001\002\000\004\011\uff7d\001\002\000\004\016\360" +
    "\001\002\000\004\011\355\001\002\000\020\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\013\uff7b\016\uff7b\001\002" +
    "\000\006\011\uffd2\024\uffd2\001\002\000\006\011\uff7a\024" +
    "\u0109\001\002\000\012\011\uffd1\017\362\021\363\024\uffd1" +
    "\001\002\000\010\011\uffcf\021\372\024\uffcf\001\002\000" +
    "\060\004\021\005\076\006\103\007\017\010\044\014\142" +
    "\016\134\020\371\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\060\004" +
    "\021\005\076\006\103\007\017\010\044\014\142\016\134" +
    "\035\133\071\043\072\130\073\132\074\123\075\141\076" +
    "\304\077\117\127\116\141\131\142\136\147\114\150\125" +
    "\151\137\152\115\153\121\001\002\000\014\011\uffcb\015" +
    "\uffcb\017\366\021\uffcb\024\uffcb\001\002\000\014\011\uffca" +
    "\015\uffca\017\217\021\uffca\024\uffca\001\002\000\004\020" +
    "\367\001\002\000\016\011\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\024\uffc9\001\002\000\006\011\uffd0\024\uffd0\001" +
    "\002\000\016\011\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\024\uffc8\001\002\000\060\004\021\005\076\006\103\007" +
    "\017\010\044\012\376\014\142\016\134\035\133\071\043" +
    "\072\130\073\132\074\123\075\141\077\117\127\116\141" +
    "\131\142\136\147\114\150\125\151\137\152\115\153\121" +
    "\001\002\000\006\011\uffcd\024\uffcd\001\002\000\006\011" +
    "\uffce\024\uffce\001\002\000\046\011\uffcc\024\uffcc\025\156" +
    "\026\147\027\165\030\155\031\164\032\151\033\145\057" +
    "\161\130\153\131\152\140\150\141\154\142\160\143\146" +
    "\144\157\146\162\001\002\000\062\004\021\005\076\006" +
    "\103\007\017\010\044\012\u0100\014\142\016\134\017\215" +
    "\035\133\071\043\072\130\073\132\074\123\075\141\077" +
    "\117\127\116\141\131\142\136\147\114\150\125\151\137" +
    "\152\115\153\121\001\002\000\006\013\u0106\024\u0107\001" +
    "\002\000\060\004\021\005\076\006\103\007\017\010\044" +
    "\012\u0100\014\142\016\134\035\133\071\043\072\130\073" +
    "\132\074\123\075\141\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\046\013\uffc3\024\uffc3\025\156\026\147\027\165\030\155" +
    "\031\164\032\151\033\145\057\161\130\153\131\152\140" +
    "\150\141\154\142\160\143\146\144\157\146\162\001\002" +
    "\000\006\013\u0105\017\217\001\002\000\006\013\uffc2\024" +
    "\uffc2\001\002\000\006\013\uffc4\024\uffc4\001\002\000\074" +
    "\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\016\uffc7\022\uffc7\024\uffc7\034\uffc7\037\uffc7\045\uffc7" +
    "\051\uffc7\053\uffc7\054\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\102\uffc7\107\uffc7\116\uffc7\117\uffc7" +
    "\120\uffc7\121\uffc7\132\uffc7\001\002\000\010\011\uffc6\013" +
    "\uffc6\024\uffc6\001\002\000\060\004\021\005\076\006\103" +
    "\007\017\010\044\012\u0100\014\142\016\134\035\133\071" +
    "\043\072\130\073\132\074\123\075\141\077\117\127\116" +
    "\141\131\142\136\147\114\150\125\151\137\152\115\153" +
    "\121\001\002\000\006\013\uffc5\024\uffc5\001\002\000\004" +
    "\016\360\001\002\000\006\011\uffd3\024\uffd3\001\002\000" +
    "\004\011\uff7e\001\002\000\004\011\u010d\001\002\000\020" +
    "\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\013\uff7c\016" +
    "\uff7c\001\002\000\056\004\021\005\076\006\103\007\017" +
    "\010\044\014\142\016\134\035\133\071\043\072\130\073" +
    "\132\074\123\075\141\077\117\127\116\141\131\142\136" +
    "\147\114\150\125\151\137\152\115\153\121\001\002\000" +
    "\044\024\u0110\025\156\026\147\027\165\030\155\031\164" +
    "\032\151\033\145\057\161\130\153\131\152\140\150\141" +
    "\154\142\160\143\146\144\157\146\162\001\002\000\056" +
    "\004\021\005\076\006\103\007\017\010\044\014\142\016" +
    "\134\035\133\071\043\072\130\073\132\074\123\075\141" +
    "\077\117\127\116\141\131\142\136\147\114\150\125\151" +
    "\137\152\115\153\121\001\002\000\044\015\u0112\025\156" +
    "\026\147\027\165\030\155\031\164\032\151\033\145\057" +
    "\161\130\153\131\152\140\150\141\154\142\160\143\146" +
    "\144\157\146\162\001\002\000\144\003\uff8c\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\013\uff8c\015\uff8c" +
    "\016\uff8c\020\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\037\uff8c" +
    "\045\uff8c\051\uff8c\053\uff8c\054\uff8c\057\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\102\uff8c\107\uff8c" +
    "\116\uff8c\117\uff8c\120\uff8c\121\uff8c\123\uff8c\130\uff8c\131" +
    "\uff8c\132\uff8c\140\uff8c\141\uff8c\142\uff8c\143\uff8c\144\uff8c" +
    "\146\uff8c\001\002\000\076\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\013\uffea\016\uffea\022\uffea" +
    "\034\uffea\037\uffea\041\uffea\044\uffea\045\uffea\051\uffea\053" +
    "\uffea\054\uffea\064\uffea\065\uffea\066\uffea\070\uffea\071\uffea" +
    "\102\uffea\107\uffea\116\uffea\117\uffea\120\uffea\121\uffea\132" +
    "\uffea\001\002\000\016\004\021\005\076\006\103\007\017" +
    "\010\044\016\211\001\002\000\006\021\300\126\213\001" +
    "\002\000\004\011\u0126\001\002\000\004\011\u011a\001\002" +
    "\000\012\016\360\017\uff87\021\uff87\126\uff87\001\002\000" +
    "\006\011\uffd4\024\u0109\001\002\000\056\004\021\005\076" +
    "\006\103\007\017\010\044\014\142\016\134\035\133\071" +
    "\043\072\130\073\132\074\123\075\141\077\117\127\116" +
    "\141\131\142\136\147\114\150\125\151\137\152\115\153" +
    "\121\001\002\000\044\011\u011c\025\156\026\147\027\165" +
    "\030\155\031\164\032\151\033\145\057\161\130\153\131" +
    "\152\140\150\141\154\142\160\143\146\144\157\146\162" +
    "\001\002\000\016\004\021\005\076\006\103\007\017\010" +
    "\044\016\u011f\001\002\000\004\015\uff57\001\002\000\004" +
    "\015\uff54\001\002\000\014\017\215\021\uff84\124\uff84\125" +
    "\uff84\126\uff84\001\002\000\012\021\300\124\246\125\247" +
    "\126\213\001\002\000\004\015\u0124\001\002\000\004\015" +
    "\uff55\001\002\000\004\015\uff56\001\002\000\004\012\105" +
    "\001\002\000\076\002\uff58\003\uff58\004\uff58\005\uff58\006" +
    "\uff58\007\uff58\010\uff58\013\uff58\016\uff58\022\uff58\034\uff58" +
    "\037\uff58\041\uff58\044\uff58\045\uff58\051\uff58\053\uff58\054" +
    "\uff58\064\uff58\065\uff58\066\uff58\070\uff58\071\uff58\102\uff58" +
    "\107\uff58\116\uff58\117\uff58\120\uff58\121\uff58\132\uff58\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\044\011" +
    "\u0128\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\057\161\130\153\131\152\140\150\141\154\142" +
    "\160\143\146\144\157\146\162\001\002\000\016\004\021" +
    "\005\076\006\103\007\017\010\044\016\u011f\001\002\000" +
    "\004\015\u012a\001\002\000\004\012\105\001\002\000\076" +
    "\002\uff59\003\uff59\004\uff59\005\uff59\006\uff59\007\uff59\010" +
    "\uff59\013\uff59\016\uff59\022\uff59\034\uff59\037\uff59\041\uff59" +
    "\044\uff59\045\uff59\051\uff59\053\uff59\054\uff59\064\uff59\065" +
    "\uff59\066\uff59\070\uff59\071\uff59\102\uff59\107\uff59\116\uff59" +
    "\117\uff59\120\uff59\121\uff59\132\uff59\001\002\000\004\014" +
    "\u012d\001\002\000\024\004\021\005\076\006\103\007\017" +
    "\010\044\015\uff6e\016\211\024\uff6e\047\u0131\001\002\000" +
    "\006\015\uff6f\024\uff6f\001\002\000\006\015\u0138\024\u0137" +
    "\001\002\000\004\016\u0135\001\002\000\016\004\021\005" +
    "\076\006\103\007\017\010\044\016\211\001\002\000\004" +
    "\016\u0133\001\002\000\010\015\uff6c\017\362\024\uff6c\001" +
    "\002\000\006\015\uff6a\024\uff6a\001\002\000\010\015\uff6d" +
    "\017\362\024\uff6d\001\002\000\006\015\uff6b\024\uff6b\001" +
    "\002\000\020\004\021\005\076\006\103\007\017\010\044" +
    "\016\211\047\u0131\001\002\000\004\012\uff76\001\002\000" +
    "\006\015\uff70\024\uff70\001\002\000\076\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\013\ufff8\016" +
    "\ufff8\022\ufff8\034\ufff8\037\ufff8\041\ufff8\044\ufff8\045\ufff8" +
    "\051\ufff8\053\ufff8\054\ufff8\064\ufff8\065\ufff8\066\ufff8\070" +
    "\ufff8\071\ufff8\102\ufff8\107\ufff8\116\ufff8\117\ufff8\120\ufff8" +
    "\121\ufff8\132\ufff8\001\002\000\076\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\016\ufff6" +
    "\022\ufff6\034\ufff6\037\ufff6\041\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\053\ufff6\054\ufff6\064\ufff6\065\ufff6\066\ufff6\070\ufff6" +
    "\071\ufff6\102\ufff6\107\ufff6\116\ufff6\117\ufff6\120\ufff6\121" +
    "\ufff6\132\ufff6\001\002\000\070\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\016\uffd8\022\uffd8\034\uffd8\037" +
    "\uffd8\045\uffd8\051\uffd8\053\uffd8\054\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\070\uffd8\071\uffd8\102\uffd8\107\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\121\uffd8\132\uffd8\001\002\000\062" +
    "\004\021\005\076\006\103\007\017\010\044\012\u013f\014" +
    "\142\016\134\035\133\071\043\072\130\073\132\074\123" +
    "\075\141\076\304\077\117\127\116\141\131\142\136\147" +
    "\114\150\125\151\137\152\115\153\121\001\002\000\070" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\016" +
    "\uffd6\022\uffd6\034\uffd6\037\uffd6\045\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\102\uffd6\107\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6" +
    "\132\uffd6\001\002\000\004\017\215\001\002\000\070\003" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\016\uffd5" +
    "\022\uffd5\034\uffd5\037\uffd5\045\uffd5\051\uffd5\053\uffd5\054" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5" +
    "\102\uffd5\107\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\132" +
    "\uffd5\001\002\000\070\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\016\uffd7\022\uffd7\034\uffd7\037\uffd7\045" +
    "\uffd7\051\uffd7\053\uffd7\054\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\102\uffd7\107\uffd7\116\uffd7\117" +
    "\uffd7\120\uffd7\121\uffd7\132\uffd7\001\002\000\056\004\021" +
    "\005\076\006\103\007\017\010\044\014\142\016\134\035" +
    "\133\071\043\072\130\073\132\074\123\075\141\077\117" +
    "\127\116\141\131\142\136\147\114\150\125\151\137\152" +
    "\115\153\121\001\002\000\044\024\u0144\025\156\026\147" +
    "\027\165\030\155\031\164\032\151\033\145\057\161\130" +
    "\153\131\152\140\150\141\154\142\160\143\146\144\157" +
    "\146\162\001\002\000\056\004\021\005\076\006\103\007" +
    "\017\010\044\014\142\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\044\015\u0146\025\156\026\147\027\165\030\155\031" +
    "\164\032\151\033\145\057\161\130\153\131\152\140\150" +
    "\141\154\142\160\143\146\144\157\146\162\001\002\000" +
    "\004\011\uffdc\001\002\000\076\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\016\uffe5\022" +
    "\uffe5\034\uffe5\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051\uffe5" +
    "\053\uffe5\054\uffe5\064\uffe5\065\uffe5\066\uffe5\070\uffe5\071" +
    "\uffe5\102\uffe5\107\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5" +
    "\132\uffe5\001\002\000\056\004\021\005\076\006\103\007" +
    "\017\010\044\014\142\016\134\035\133\071\043\072\130" +
    "\073\132\074\123\075\141\077\117\127\116\141\131\142" +
    "\136\147\114\150\125\151\137\152\115\153\121\001\002" +
    "\000\044\015\u014a\025\156\026\147\027\165\030\155\031" +
    "\164\032\151\033\145\057\161\130\153\131\152\140\150" +
    "\141\154\142\160\143\146\144\157\146\162\001\002\000" +
    "\004\012\105\001\002\000\076\002\uff63\003\uff63\004\uff63" +
    "\005\uff63\006\uff63\007\uff63\010\uff63\013\uff63\016\uff63\022" +
    "\uff63\034\uff63\037\uff63\041\uff63\044\uff63\045\uff63\051\uff63" +
    "\053\uff63\054\uff63\064\uff63\065\uff63\066\uff63\070\uff63\071" +
    "\uff63\102\uff63\107\uff63\116\uff63\117\uff63\120\uff63\121\uff63" +
    "\132\uff63\001\002\000\004\147\u014d\001\002\000\006\015" +
    "\u014f\024\u014e\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\004\011\uffde\001\002\000\006\015\u0151\024\272" +
    "\001\002\000\004\011\uffdd\001\002\000\056\004\021\005" +
    "\076\006\103\007\017\010\044\014\142\016\134\035\133" +
    "\071\043\072\130\073\132\074\123\075\141\077\117\127" +
    "\116\141\131\142\136\147\114\150\125\151\137\152\115" +
    "\153\121\001\002\000\044\015\u0154\025\156\026\147\027" +
    "\165\030\155\031\164\032\151\033\145\057\161\130\153" +
    "\131\152\140\150\141\154\142\160\143\146\144\157\146" +
    "\162\001\002\000\004\012\105\001\002\000\100\002\uff69" +
    "\003\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69\013" +
    "\uff69\016\uff69\022\uff69\034\uff69\037\uff69\041\uff69\044\uff69" +
    "\045\uff69\051\uff69\053\uff69\054\uff69\064\uff69\065\uff69\066" +
    "\uff69\070\uff69\071\uff69\102\uff69\107\uff69\116\uff69\117\uff69" +
    "\120\uff69\121\uff69\132\uff69\134\u0156\001\002\000\006\012" +
    "\105\132\023\001\002\000\076\002\uff68\003\uff68\004\uff68" +
    "\005\uff68\006\uff68\007\uff68\010\uff68\013\uff68\016\uff68\022" +
    "\uff68\034\uff68\037\uff68\041\uff68\044\uff68\045\uff68\051\uff68" +
    "\053\uff68\054\uff68\064\uff68\065\uff68\066\uff68\070\uff68\071" +
    "\uff68\102\uff68\107\uff68\116\uff68\117\uff68\120\uff68\121\uff68" +
    "\132\uff68\001\002\000\076\002\uff66\003\uff66\004\uff66\005" +
    "\uff66\006\uff66\007\uff66\010\uff66\013\uff66\016\uff66\022\uff66" +
    "\034\uff66\037\uff66\041\uff66\044\uff66\045\uff66\051\uff66\053" +
    "\uff66\054\uff66\064\uff66\065\uff66\066\uff66\070\uff66\071\uff66" +
    "\102\uff66\107\uff66\116\uff66\117\uff66\120\uff66\121\uff66\132" +
    "\uff66\001\002\000\076\002\uff67\003\uff67\004\uff67\005\uff67" +
    "\006\uff67\007\uff67\010\uff67\013\uff67\016\uff67\022\uff67\034" +
    "\uff67\037\uff67\041\uff67\044\uff67\045\uff67\051\uff67\053\uff67" +
    "\054\uff67\064\uff67\065\uff67\066\uff67\070\uff67\071\uff67\102" +
    "\uff67\107\uff67\116\uff67\117\uff67\120\uff67\121\uff67\132\uff67" +
    "\001\002\000\070\002\000\003\042\004\021\005\076\006" +
    "\103\007\017\010\044\016\056\022\074\034\037\037\052" +
    "\045\062\051\057\053\024\054\015\064\077\065\027\066" +
    "\051\070\046\071\043\102\054\107\014\116\025\117\040" +
    "\120\006\121\005\132\023\001\002\000\070\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\016\uffdb\022\uffdb" +
    "\034\uffdb\037\uffdb\045\uffdb\051\uffdb\053\uffdb\054\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\102\uffdb" +
    "\107\uffdb\116\uffdb\117\uffdb\120\uffdb\121\uffdb\132\uffdb\001" +
    "\002\000\076\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\013\uffe7\016\uffe7\022\uffe7\034\uffe7\037" +
    "\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7\053\uffe7\054\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\070\uffe7\071\uffe7\102\uffe7\107" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\132\uffe7\001\002" +
    "\000\056\004\021\005\076\006\103\007\017\010\044\014" +
    "\142\016\134\035\133\071\043\072\130\073\132\074\123" +
    "\075\141\077\117\127\116\141\131\142\136\147\114\150" +
    "\125\151\137\152\115\153\121\001\002\000\044\015\u015f" +
    "\025\156\026\147\027\165\030\155\031\164\032\151\033" +
    "\145\057\161\130\153\131\152\140\150\141\154\142\160" +
    "\143\146\144\157\146\162\001\002\000\004\011\uffe0\001" +
    "\002\000\056\004\021\005\076\006\103\007\017\010\044" +
    "\014\142\016\134\035\133\071\043\072\130\073\132\074" +
    "\123\075\141\077\117\127\116\141\131\142\136\147\114" +
    "\150\125\151\137\152\115\153\121\001\002\000\044\015" +
    "\u0162\025\156\026\147\027\165\030\155\031\164\032\151" +
    "\033\145\057\161\130\153\131\152\140\150\141\154\142" +
    "\160\143\146\144\157\146\162\001\002\000\004\012\u0163" +
    "\001\002\000\004\041\u0165\001\002\000\010\013\u016a\041" +
    "\u0165\044\u016c\001\002\000\056\004\021\005\076\006\103" +
    "\007\017\010\044\014\142\016\134\035\133\071\043\072" +
    "\130\073\132\074\123\075\141\077\117\127\116\141\131" +
    "\142\136\147\114\150\125\151\137\152\115\153\121\001" +
    "\002\000\010\013\uff5d\041\uff5d\044\uff5d\001\002\000\044" +
    "\025\156\026\147\027\165\030\155\031\164\032\151\033" +
    "\145\057\161\123\u0168\130\153\131\152\140\150\141\154" +
    "\142\160\143\146\144\157\146\162\001\002\000\066\003" +
    "\042\004\021\005\076\006\103\007\017\010\044\016\056" +
    "\022\074\034\037\037\052\045\062\051\057\053\024\054" +
    "\015\064\077\065\027\066\051\070\046\071\043\102\054" +
    "\107\014\116\025\117\040\120\006\121\005\132\023\001" +
    "\002\000\074\003\042\004\021\005\076\006\103\007\017" +
    "\010\044\013\uff5c\016\056\022\074\034\037\037\052\041" +
    "\uff5c\044\uff5c\045\062\051\057\053\024\054\015\064\077" +
    "\065\027\066\051\070\046\071\043\102\054\107\014\116" +
    "\025\117\040\120\006\121\005\132\023\001\002\000\076" +
    "\002\uff60\003\uff60\004\uff60\005\uff60\006\uff60\007\uff60\010" +
    "\uff60\013\uff60\016\uff60\022\uff60\034\uff60\037\uff60\041\uff60" +
    "\044\uff60\045\uff60\051\uff60\053\uff60\054\uff60\064\uff60\065" +
    "\uff60\066\uff60\070\uff60\071\uff60\102\uff60\107\uff60\116\uff60" +
    "\117\uff60\120\uff60\121\uff60\132\uff60\001\002\000\004\013" +
    "\u0170\001\002\000\004\123\u016e\001\002\000\010\013\uff5e" +
    "\041\uff5e\044\uff5e\001\002\000\066\003\042\004\021\005" +
    "\076\006\103\007\017\010\044\016\056\022\074\034\037" +
    "\037\052\045\062\051\057\053\024\054\015\064\077\065" +
    "\027\066\051\070\046\071\043\102\054\107\014\116\025" +
    "\117\040\120\006\121\005\132\023\001\002\000\070\003" +
    "\042\004\021\005\076\006\103\007\017\010\044\013\uff5b" +
    "\016\056\022\074\034\037\037\052\045\062\051\057\053" +
    "\024\054\015\064\077\065\027\066\051\070\046\071\043" +
    "\102\054\107\014\116\025\117\040\120\006\121\005\132" +
    "\023\001\002\000\076\002\uff5f\003\uff5f\004\uff5f\005\uff5f" +
    "\006\uff5f\007\uff5f\010\uff5f\013\uff5f\016\uff5f\022\uff5f\034" +
    "\uff5f\037\uff5f\041\uff5f\044\uff5f\045\uff5f\051\uff5f\053\uff5f" +
    "\054\uff5f\064\uff5f\065\uff5f\066\uff5f\070\uff5f\071\uff5f\102" +
    "\uff5f\107\uff5f\116\uff5f\117\uff5f\120\uff5f\121\uff5f\132\uff5f" +
    "\001\002\000\076\002\uffed\003\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\013\uffed\016\uffed\022\uffed\034\uffed" +
    "\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed\053\uffed\054" +
    "\uffed\064\uffed\065\uffed\066\uffed\070\uffed\071\uffed\102\uffed" +
    "\107\uffed\116\uffed\117\uffed\120\uffed\121\uffed\132\uffed\001" +
    "\002\000\076\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\013\ufffb\016\ufffb\022\ufffb\034\ufffb\037" +
    "\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb\053\ufffb\054\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\070\ufffb\071\ufffb\102\ufffb\107" +
    "\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\132\ufffb\001\002" +
    "\000\004\020\371\001\002\000\006\016\u0179\017\366\001" +
    "\002\000\014\011\uffd1\014\u0176\017\362\021\363\024\uffd1" +
    "\001\002\000\024\004\021\005\076\006\103\007\017\010" +
    "\044\015\uff6e\016\211\024\uff6e\047\u0131\001\002\000\006" +
    "\015\u0178\024\u0137\001\002\000\004\012\uff78\001\002\000" +
    "\004\014\u017a\001\002\000\024\004\021\005\076\006\103" +
    "\007\017\010\044\015\uff6e\016\211\024\uff6e\047\u0131\001" +
    "\002\000\006\015\u017c\024\u0137\001\002\000\004\012\uff77" +
    "\001\002\000\076\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\013\uffeb\016\uffeb\022\uffeb\034\uffeb" +
    "\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\053\uffeb\054" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\070\uffeb\071\uffeb\102\uffeb" +
    "\107\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb\132\uffeb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017b\000\112\003\010\004\021\005\077\006\054\010" +
    "\003\011\040\013\074\014\044\015\100\016\011\020\035" +
    "\021\065\022\057\023\046\024\012\025\032\030\015\040" +
    "\064\044\006\054\052\063\007\064\101\065\067\066\033" +
    "\067\071\073\047\075\072\101\034\102\066\103\062\106" +
    "\031\107\060\110\025\111\070\112\017\113\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\u0173\045\u0118\046\355\001\001\000\002\001\001" +
    "\000\100\005\110\006\054\010\003\011\040\014\044\015" +
    "\100\016\011\020\035\021\065\022\057\023\046\024\012" +
    "\025\032\030\015\040\064\044\006\054\052\063\007\064" +
    "\101\066\033\067\071\073\047\075\072\101\034\102\066" +
    "\103\062\107\060\110\025\111\070\112\017\113\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\u0159\005\077" +
    "\006\054\010\003\011\040\014\044\015\100\016\011\020" +
    "\035\021\065\022\057\023\046\024\012\025\032\030\015" +
    "\040\064\044\006\054\052\063\007\064\101\065\u015a\066" +
    "\033\067\071\073\047\075\072\101\034\102\066\103\062" +
    "\107\060\110\025\111\070\112\017\113\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\311\001\001\000\004\036\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\123\010\126\011\137\014\044\031\117" +
    "\044\125\067\112\073\142\102\121\103\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\003\105\005" +
    "\077\006\054\010\003\011\040\014\044\015\100\016\011" +
    "\020\035\021\065\022\057\023\046\024\012\025\032\030" +
    "\015\040\064\044\006\054\052\063\007\064\101\066\033" +
    "\067\071\073\047\075\072\101\034\102\066\103\062\107" +
    "\060\110\025\111\070\112\017\113\063\001\001\000\100" +
    "\005\110\006\054\010\003\011\040\014\044\015\100\016" +
    "\011\020\035\021\065\022\057\023\046\024\012\025\032" +
    "\030\015\040\064\044\006\054\052\063\007\064\101\066" +
    "\033\067\071\073\047\075\072\101\034\102\066\103\062" +
    "\107\060\110\025\111\070\112\017\113\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\261\010\126\011\137\014\044\044\125" +
    "\067\112\073\142\102\121\103\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\235\010\126\011\137\014\044\044\125\067\112\073" +
    "\142\102\121\103\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\044\044\125\102\211\103\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\143\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\204\010\126\011\137\014\044\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\024\007\203\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\024\007\202\010\126\011\137\014" +
    "\044\044\125\067\112\073\142\102\121\103\062\001\001" +
    "\000\024\007\201\010\126\011\137\014\044\044\125\067" +
    "\112\073\142\102\121\103\062\001\001\000\024\007\200" +
    "\010\126\011\137\014\044\044\125\067\112\073\142\102" +
    "\121\103\062\001\001\000\024\007\177\010\126\011\137" +
    "\014\044\044\125\067\112\073\142\102\121\103\062\001" +
    "\001\000\024\007\176\010\126\011\137\014\044\044\125" +
    "\067\112\073\142\102\121\103\062\001\001\000\024\007" +
    "\175\010\126\011\137\014\044\044\125\067\112\073\142" +
    "\102\121\103\062\001\001\000\024\007\174\010\126\011" +
    "\137\014\044\044\125\067\112\073\142\102\121\103\062" +
    "\001\001\000\024\007\173\010\126\011\137\014\044\044" +
    "\125\067\112\073\142\102\121\103\062\001\001\000\024" +
    "\007\172\010\126\011\137\014\044\044\125\067\112\073" +
    "\142\102\121\103\062\001\001\000\024\007\171\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\002\001\001\000\024\007\167\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\002\001\001\000\024\007\166\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\024\007\165\010\126\011\137\014\044" +
    "\044\125\067\112\073\142\102\121\103\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\044\044\125\103\213" +
    "\001\001\000\004\036\215\001\001\000\024\007\221\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\024\007\217\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\225\010\126" +
    "\011\137\014\044\044\125\067\112\071\224\072\226\073" +
    "\142\102\121\103\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\230\010\126\011" +
    "\137\014\044\044\125\067\112\073\142\102\121\103\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\233\010\126\011\137\014\044\044\125\067\112\073\142" +
    "\102\121\103\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\237\010\126\011\137" +
    "\014\044\044\125\067\112\073\142\102\121\103\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\242" +
    "\010\126\011\137\014\044\044\125\067\112\073\142\102" +
    "\121\103\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\044\044\125\103\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\225" +
    "\010\126\011\137\014\044\044\125\067\112\071\251\072" +
    "\226\073\142\102\121\103\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\255\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\024\007\257\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\270\010\126\011\137\014\044\037" +
    "\267\044\125\067\112\073\142\102\121\103\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\273\010\126\011\137\014\044\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\301\010\126\011\137\014\044\044" +
    "\125\067\112\073\142\102\121\103\062\104\302\105\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\305\010\126\011\137" +
    "\014\044\044\125\067\112\073\142\102\121\103\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\314\010\126\011\137\014\044\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\270\010\126\011" +
    "\137\014\044\037\324\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\330\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\335\010\126\011" +
    "\137\014\044\044\125\067\112\073\142\102\121\103\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\342\010\126\011\137" +
    "\014\044\044\125\067\112\073\142\102\121\103\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\044\044" +
    "\352\074\353\077\350\001\001\000\010\014\044\044\352" +
    "\074\u010b\001\001\000\002\001\001\000\006\045\356\046" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\360\034\363\036" +
    "\364\001\001\000\002\001\001\000\024\007\221\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\030\007\301\010\126\011\137\014\044" +
    "\044\125\067\112\073\142\102\121\103\062\104\302\105" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\374\010\126\011\137\014\044\043\372" +
    "\044\125\067\112\073\142\100\373\102\121\103\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\u0100\010\126\011\137\014\044\036\u0101\041" +
    "\u0103\042\376\043\u0102\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\032\007\u0100\010" +
    "\126\011\137\014\044\041\u0103\042\376\043\u0102\044\125" +
    "\067\112\073\142\102\121\103\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\u0100\010" +
    "\126\011\137\014\044\041\u0107\043\u0102\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\002\001\001\000" +
    "\004\046\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\u010e\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\024\007\u0110\010" +
    "\126\011\137\014\044\044\125\067\112\073\142\102\121" +
    "\103\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\u0115\014\044\020\u0116\044\u0117" +
    "\102\u0114\103\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0118\046\355\001\001" +
    "\000\002\001\001\000\024\007\u011a\010\126\011\137\014" +
    "\044\044\125\067\112\073\142\102\121\103\062\001\001" +
    "\000\002\001\001\000\024\010\u011c\011\u0122\014\044\020" +
    "\u0121\032\u0120\040\u011d\044\125\102\u011f\103\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\u0124\001\001\000\002\001" +
    "\001\000\024\007\u0126\010\126\011\137\014\044\044\125" +
    "\067\112\073\142\102\121\103\062\001\001\000\002\001" +
    "\001\000\024\010\u011c\011\u0122\014\044\020\u0121\032\u0128" +
    "\040\u011d\044\125\102\u011f\103\062\001\001\000\002\001" +
    "\001\000\004\002\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\044\044\u012f\061\u012d\062\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\044\044\u0131\001\001\000\002\001\001\000" +
    "\010\033\u0133\034\363\036\364\001\001\000\002\001\001" +
    "\000\010\033\u0135\034\363\036\364\001\001\000\002\001" +
    "\001\000\010\014\044\044\u012f\061\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\301\010\126\011\137" +
    "\014\044\044\125\067\112\073\142\100\u013d\102\121\103" +
    "\062\104\302\105\u013f\001\001\000\002\001\001\000\004" +
    "\036\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\u0142\010\126\011\137\014\044\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\002\001\001\000" +
    "\024\007\u0144\010\126\011\137\014\044\044\125\067\112" +
    "\073\142\102\121\103\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\u0148\010\126" +
    "\011\137\014\044\044\125\067\112\073\142\102\121\103" +
    "\062\001\001\000\002\001\001\000\004\002\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\270\010\126\011\137\014\044\037\u014f\044\125" +
    "\067\112\073\142\102\121\103\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\u0152" +
    "\010\126\011\137\014\044\044\125\067\112\073\142\102" +
    "\121\103\062\001\001\000\002\001\001\000\004\002\u0154" +
    "\001\001\000\002\001\001\000\010\002\u0157\025\u0158\026" +
    "\u0156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\005\110\006\054\010\003\011\040\014" +
    "\044\015\100\016\011\020\035\021\065\022\057\023\046" +
    "\024\012\025\032\030\015\040\064\044\006\054\052\063" +
    "\007\064\101\066\033\067\071\073\047\075\072\101\034" +
    "\102\066\103\062\107\060\110\025\111\070\112\017\113" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\u015d\010\126\011\137\014\044\044\125\067\112\073" +
    "\142\102\121\103\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\u0160\010\126\011\137\014\044\044" +
    "\125\067\112\073\142\102\121\103\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u0165\053\u0163\001" +
    "\001\000\006\051\u016c\052\u016a\001\001\000\024\007\u0166" +
    "\010\126\011\137\014\044\044\125\067\112\073\142\102" +
    "\121\103\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\003\u0168\005\077\006\054\010\003\011\040\014" +
    "\044\015\100\016\011\020\035\021\065\022\057\023\046" +
    "\024\012\025\032\030\015\040\064\044\006\054\052\063" +
    "\007\064\101\066\033\067\071\073\047\075\072\101\034" +
    "\102\066\103\062\107\060\110\025\111\070\112\017\113" +
    "\063\001\001\000\100\005\110\006\054\010\003\011\040" +
    "\014\044\015\100\016\011\020\035\021\065\022\057\023" +
    "\046\024\012\025\032\030\015\040\064\044\006\054\052" +
    "\063\007\064\101\066\033\067\071\073\047\075\072\101" +
    "\034\102\066\103\062\107\060\110\025\111\070\112\017" +
    "\113\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\003\u016e\005\077" +
    "\006\054\010\003\011\040\014\044\015\100\016\011\020" +
    "\035\021\065\022\057\023\046\024\012\025\032\030\015" +
    "\040\064\044\006\054\052\063\007\064\101\066\033\067" +
    "\071\073\047\075\072\101\034\102\066\103\062\107\060" +
    "\110\025\111\070\112\017\113\063\001\001\000\100\005" +
    "\110\006\054\010\003\011\040\014\044\015\100\016\011" +
    "\020\035\021\065\022\057\023\046\024\012\025\032\030" +
    "\015\040\064\044\006\054\052\063\007\064\101\066\033" +
    "\067\071\073\047\075\072\101\034\102\066\103\062\107" +
    "\060\110\025\111\070\112\017\113\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\360\034\363\036\364" +
    "\001\001\000\012\014\044\044\u012f\061\u012d\062\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\044\044\u012f\061\u012d\062\u017a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONSTANTES LINST 
            {
              Object RESULT =null;
		int constantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> constantes = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                for(Nodo n: lista)
                {
                    constantes.add(n);
                }  
                raiz = new AST(constantes);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= BREAK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= CONTINUE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= CONCATENAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Concatenar inst = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= SETESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetEscribir inst = (SetEscribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= SETAPPEND puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetApend inst = (SetApend)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= CLOSEARCHIVO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CerrarArchivo inst = (CerrarArchivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= ESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Escribir inst = (Escribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= READ puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Read inst = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // READ ::= tread pari EXP coma id pard 
            {
              Read RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Read(e1,e2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READ",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CLOSEARCHIVO ::= tclose pari pard 
            {
              CerrarArchivo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CerrarArchivo(tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSEARCHIVO",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SETESCRIBIR ::= escritura pari EXP pard 
            {
              SetEscribir RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetEscribir(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETESCRIBIR",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SETAPPEND ::= tapend pari EXP pard 
            {
              SetApend RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetApend(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETAPPEND",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESCRIBIR ::= escribir pari cadena pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESCRIBIR ::= escribir pari cadena coma LVALORES pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONSTANTES ::= CONSTANTES DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l ; RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONSTANTES ::= DECLARACIONCONSTANTE 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONSTANTES ::= IMPORTAR 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Importar inst = (Importar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new ArrayList<Nodo>(); RESULT.add(inst);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IMPORTAR ::= importar cadena 
            {
              Importar RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Importar(nombre, orright, orleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NDIM ::= LEXP 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= multi ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= tatexto pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aTexto(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= CONCATENAR 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Concatenar v = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= taentero pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aEntero(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= tadecimal pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aDecimal(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= teql pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Equals(expresion1, expresion2, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONCATENAR ::= tconcatenar pari EXP coma EXP pard 
            {
              Concatenar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Concatenar(exp1,exp2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENAR",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AUMENTO ::= ACCESO aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECREMENTO ::= ACCESO decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ORIGEN ::= TIPO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo id = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id.nombreTipo(), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CABECERAMET ::= TIPO NDIMVACIO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTINUE ::= continuar 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // BREAK ::= romper 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DOWHILE ::= hacer BLOQUE donde pari EXP pard 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ACTUALIZACION ::= AUMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ACTUALIZACION ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ACTUALIZACION ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ACTUALIZACION ::= ASIGV 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
