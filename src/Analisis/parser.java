
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\012\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\076\010\000\002\063\005\000\002\045\004" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\005\004\000\002\043\005\000\002\043\003\000\002" +
    "\044\003\000\002\044\005\000\002\044\004\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\031\003" +
    "\000\002\031\003\000\002\032\005\000\002\032\004\000" +
    "\002\033\006\000\002\033\005\000\002\075\005\000\002" +
    "\041\005\000\002\040\005\000\002\040\003\000\002\037" +
    "\003\000\002\037\003\000\002\016\005\000\002\036\006" +
    "\000\002\102\003\000\002\102\003\000\002\101\006\000" +
    "\002\067\003\000\002\067\002\000\002\070\005\000\002" +
    "\070\003\000\002\014\006\000\002\014\010\000\002\035" +
    "\005\000\002\035\003\000\002\034\006\000\002\034\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\005\000\002\006\003\000" +
    "\002\006\006\000\002\007\004\000\002\007\004\000\002" +
    "\010\004\000\002\010\004\000\002\077\005\000\002\077" +
    "\003\000\002\100\003\000\002\100\004\000\002\042\003" +
    "\000\002\042\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\072\007\000\002" +
    "\072\006\000\002\074\005\000\002\074\004\000\002\071" +
    "\004\000\002\061\004\000\002\062\007\000\002\062\007" +
    "\000\002\002\005\000\002\002\004\000\002\064\005\000" +
    "\002\064\004\000\002\030\003\000\002\060\005\000\002" +
    "\060\003\000\002\060\002\000\002\057\004\000\002\057" +
    "\005\000\002\057\005\000\002\057\006\000\002\023\007" +
    "\000\002\023\011\000\002\065\010\000\002\065\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\034\003\035\004\016\005\027\006\025\007" +
    "\006\016\033\022\010\034\012\036\011\056\036\057\032" +
    "\061\037\124\040\001\002\000\004\016\uffa1\001\002\000" +
    "\004\011\354\001\002\000\004\016\uff9c\001\002\000\122" +
    "\002\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011" +
    "\uffa4\013\uffa4\015\uffa4\016\uffa4\017\171\020\uffa4\021\uffa4" +
    "\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\051\uffa4\056\uffa4" +
    "\057\uffa4\061\uffa4\116\uffa4\117\uffa4\120\uffa4\122\uffa4\123" +
    "\uffa4\124\uffa4\132\uffa4\133\uffa4\134\uffa4\135\uffa4\136\uffa4" +
    "\140\uffa4\001\002\000\004\014\343\001\002\000\004\060" +
    "\333\001\002\000\004\016\327\001\002\000\004\011\326" +
    "\001\002\000\040\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\013\ufff3\016\ufff3\022\ufff3\034\ufff3\036\ufff3" +
    "\056\ufff3\057\ufff3\061\ufff3\124\ufff3\001\002\000\004\011" +
    "\325\001\002\000\004\016\uff9f\001\002\000\040\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\013\ufff5\016" +
    "\ufff5\022\ufff5\034\ufff5\036\ufff5\056\ufff5\057\ufff5\061\ufff5" +
    "\124\ufff5\001\002\000\004\011\324\001\002\000\004\011" +
    "\323\001\002\000\040\002\ufff6\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\013\ufff6\016\ufff6\022\ufff6\034\ufff6\036" +
    "\ufff6\056\ufff6\057\ufff6\061\ufff6\124\ufff6\001\002\000\006" +
    "\021\321\120\163\001\002\000\036\002\000\003\035\004" +
    "\016\005\027\006\025\007\006\016\033\022\010\034\012" +
    "\036\011\056\036\057\032\061\037\124\040\001\002\000" +
    "\004\016\uff9e\001\002\000\004\016\303\001\002\000\004" +
    "\016\uff9d\001\002\000\040\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\013\ufffe\016\ufffe\022\ufffe\034\ufffe" +
    "\036\ufffe\056\ufffe\057\ufffe\061\ufffe\124\ufffe\001\002\000" +
    "\004\012\153\001\002\000\004\014\274\001\002\000\014" +
    "\014\141\016\uffa0\017\171\021\uffa3\120\uffa3\001\002\000" +
    "\004\011\270\001\002\000\040\002\ufff2\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\013\ufff2\016\ufff2\022\ufff2\034" +
    "\ufff2\036\ufff2\056\ufff2\057\ufff2\061\ufff2\124\ufff2\001\002" +
    "\000\036\011\266\014\070\016\063\035\062\066\067\116" +
    "\055\117\064\121\052\133\061\141\050\142\057\143\065" +
    "\144\051\145\053\001\002\000\004\016\201\001\002\000" +
    "\004\014\046\001\002\000\004\011\045\001\002\000\004" +
    "\002\044\001\002\000\040\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\013\ufff7\016\ufff7\022\ufff7\034\ufff7" +
    "\036\ufff7\056\ufff7\057\ufff7\061\ufff7\124\ufff7\001\002\000" +
    "\004\002\001\001\002\000\040\002\ufffa\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\013\ufffa\016\ufffa\022\ufffa\034" +
    "\ufffa\036\ufffa\056\ufffa\057\ufffa\061\ufffa\124\ufffa\001\002" +
    "\000\034\014\070\016\063\035\062\066\067\116\055\117" +
    "\064\121\052\133\061\141\050\142\057\143\065\144\051" +
    "\145\053\001\002\000\114\002\uffb3\003\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\013\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\051\uffb3" +
    "\056\uffb3\057\uffb3\061\uffb3\116\uffb3\117\uffb3\122\uffb3\123" +
    "\uffb3\124\uffb3\132\uffb3\133\uffb3\134\uffb3\135\uffb3\136\uffb3" +
    "\140\uffb3\001\002\000\114\002\uffaf\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\015\uffaf\016\uffaf" +
    "\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\051\uffaf" +
    "\056\uffaf\057\uffaf\061\uffaf\116\uffaf\117\uffaf\122\uffaf\123" +
    "\uffaf\124\uffaf\132\uffaf\133\uffaf\134\uffaf\135\uffaf\136\uffaf" +
    "\140\uffaf\001\002\000\114\002\uffb1\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\013\uffb1\015\uffb1\016\uffb1" +
    "\020\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1\051\uffb1" +
    "\056\uffb1\057\uffb1\061\uffb1\116\uffb1\117\uffb1\122\uffb1\123" +
    "\uffb1\124\uffb1\132\uffb1\133\uffb1\134\uffb1\135\uffb1\136\uffb1" +
    "\140\uffb1\001\002\000\034\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\114\002\uffb0\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\013\uffb0" +
    "\015\uffb0\016\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\036\uffb0\051\uffb0\056\uffb0\057\uffb0\061\uffb0\116\uffb0\117" +
    "\uffb0\122\uffb0\123\uffb0\124\uffb0\132\uffb0\133\uffb0\134\uffb0" +
    "\135\uffb0\136\uffb0\140\uffb0\001\002\000\116\002\uffad\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\013\uffad" +
    "\015\uffad\016\uffad\020\uffad\022\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\036\uffad\051\uffad\056\uffad\057\uffad\061\uffad\116\uffad\117" +
    "\uffad\120\163\122\uffad\123\uffad\124\uffad\132\uffad\133\uffad" +
    "\134\uffad\135\uffad\136\uffad\140\uffad\001\002\000\034\014" +
    "\070\016\063\035\062\066\067\116\055\117\064\121\052" +
    "\133\061\141\050\142\057\143\065\144\051\145\053\001" +
    "\002\000\050\015\151\025\112\026\102\027\114\030\077" +
    "\031\073\032\100\033\103\051\110\116\075\117\105\122" +
    "\113\123\074\132\111\133\076\134\104\135\101\136\106" +
    "\140\107\001\002\000\114\002\uffae\003\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\011\uffae\013\uffae\015\uffae\016\uffae" +
    "\020\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036\uffae\051\uffae" +
    "\056\uffae\057\uffae\061\uffae\116\uffae\117\uffae\122\uffae\123" +
    "\uffae\124\uffae\132\uffae\133\uffae\134\uffae\135\uffae\136\uffae" +
    "\140\uffae\001\002\000\114\002\uffb5\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\011\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\020\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\051\uffb5" +
    "\056\uffb5\057\uffb5\061\uffb5\116\uffb5\117\uffb5\122\uffb5\123" +
    "\uffb5\124\uffb5\132\uffb5\133\uffb5\134\uffb5\135\uffb5\136\uffb5" +
    "\140\uffb5\001\002\000\034\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\114\002\uffab\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\013\uffab" +
    "\015\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\036\uffab\051\uffab\056\uffab\057\uffab\061\uffab\116\uffab\117" +
    "\uffab\122\uffab\123\uffab\124\uffab\132\uffab\133\uffab\134\uffab" +
    "\135\uffab\136\uffab\140\uffab\001\002\000\122\002\uffa3\003" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3" +
    "\014\141\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\036\uffa3\051\uffa3\056\uffa3\057\uffa3\061" +
    "\uffa3\116\uffa3\117\uffa3\120\uffa3\122\uffa3\123\uffa3\124\uffa3" +
    "\132\uffa3\133\uffa3\134\uffa3\135\uffa3\136\uffa3\140\uffa3\001" +
    "\002\000\034\014\070\016\063\035\062\066\067\116\055" +
    "\117\064\121\052\133\061\141\050\142\057\143\065\144" +
    "\051\145\053\001\002\000\114\002\uffb2\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\013\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\051" +
    "\uffb2\056\uffb2\057\uffb2\061\uffb2\116\uffb2\117\uffb2\122\uffb2" +
    "\123\uffb2\124\uffb2\132\uffb2\133\uffb2\134\uffb2\135\uffb2\136" +
    "\uffb2\140\uffb2\001\002\000\114\002\uffb4\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\051" +
    "\uffb4\056\uffb4\057\uffb4\061\uffb4\116\uffb4\117\uffb4\122\uffb4" +
    "\123\uffb4\124\uffb4\132\uffb4\133\uffb4\134\uffb4\135\uffb4\136" +
    "\uffb4\140\uffb4\001\002\000\004\014\135\001\002\000\034" +
    "\014\070\016\063\035\062\066\067\116\055\117\064\121" +
    "\052\133\061\141\050\142\057\143\065\144\051\145\053" +
    "\001\002\000\050\015\072\025\112\026\102\027\114\030" +
    "\077\031\073\032\100\033\103\051\110\116\075\117\105" +
    "\122\113\123\074\132\111\133\076\134\104\135\101\136" +
    "\106\140\107\001\002\000\114\002\uffac\003\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac\015\uffac\016" +
    "\uffac\020\uffac\022\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036\uffac\051" +
    "\uffac\056\uffac\057\uffac\061\uffac\116\uffac\117\uffac\122\uffac" +
    "\123\uffac\124\uffac\132\uffac\133\uffac\134\uffac\135\uffac\136" +
    "\uffac\140\uffac\001\002\000\034\014\070\016\063\035\062" +
    "\066\067\116\055\117\064\121\052\133\061\141\050\142" +
    "\057\143\065\144\051\145\053\001\002\000\034\014\070" +
    "\016\063\035\062\066\067\116\055\117\064\121\052\133" +
    "\061\141\050\142\057\143\065\144\051\145\053\001\002" +
    "\000\114\002\uffa9\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\011\uffa9\013\uffa9\015\uffa9\016\uffa9\020\uffa9\022\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\036\uffa9\051\uffa9\056\uffa9\057\uffa9" +
    "\061\uffa9\116\uffa9\117\uffa9\122\uffa9\123\uffa9\124\uffa9\132" +
    "\uffa9\133\uffa9\134\uffa9\135\uffa9\136\uffa9\140\uffa9\001\002" +
    "\000\034\014\070\016\063\035\062\066\067\116\055\117" +
    "\064\121\052\133\061\141\050\142\057\143\065\144\051" +
    "\145\053\001\002\000\034\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\034\014\070\016" +
    "\063\035\062\066\067\116\055\117\064\121\052\133\061" +
    "\141\050\142\057\143\065\144\051\145\053\001\002\000" +
    "\034\014\070\016\063\035\062\066\067\116\055\117\064" +
    "\121\052\133\061\141\050\142\057\143\065\144\051\145" +
    "\053\001\002\000\034\014\070\016\063\035\062\066\067" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\034\014\070\016\063" +
    "\035\062\066\067\116\055\117\064\121\052\133\061\141" +
    "\050\142\057\143\065\144\051\145\053\001\002\000\034" +
    "\014\070\016\063\035\062\066\067\116\055\117\064\121" +
    "\052\133\061\141\050\142\057\143\065\144\051\145\053" +
    "\001\002\000\114\002\uffa7\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\011\uffa7\013\uffa7\015\uffa7\016\uffa7\020\uffa7" +
    "\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\036\uffa7\051\uffa7\056\uffa7" +
    "\057\uffa7\061\uffa7\116\uffa7\117\uffa7\122\uffa7\123\uffa7\124" +
    "\uffa7\132\uffa7\133\uffa7\134\uffa7\135\uffa7\136\uffa7\140\uffa7" +
    "\001\002\000\034\014\070\016\063\035\062\066\067\116" +
    "\055\117\064\121\052\133\061\141\050\142\057\143\065" +
    "\144\051\145\053\001\002\000\034\014\070\016\063\035" +
    "\062\066\067\116\055\117\064\121\052\133\061\141\050" +
    "\142\057\143\065\144\051\145\053\001\002\000\004\016" +
    "\121\001\002\000\034\014\070\016\063\035\062\066\067" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\034\014\070\016\063" +
    "\035\062\066\067\116\055\117\064\121\052\133\061\141" +
    "\050\142\057\143\065\144\051\145\053\001\002\000\034" +
    "\014\070\016\063\035\062\066\067\116\055\117\064\121" +
    "\052\133\061\141\050\142\057\143\065\144\051\145\053" +
    "\001\002\000\034\014\070\016\063\035\062\066\067\116" +
    "\055\117\064\121\052\133\061\141\050\142\057\143\065" +
    "\144\051\145\053\001\002\000\114\002\uffc0\003\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\103\034\uffc0\036\uffc0" +
    "\051\uffc0\056\uffc0\057\uffc0\061\uffc0\116\075\117\105\122" +
    "\uffc0\123\uffc0\124\uffc0\132\111\133\076\134\104\135\101" +
    "\136\uffc0\140\107\001\002\000\114\002\uffc7\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7" +
    "\016\uffc7\020\uffc7\022\uffc7\024\uffc7\025\112\026\102\027" +
    "\114\030\077\031\073\032\100\033\103\034\uffc7\036\uffc7" +
    "\051\110\056\uffc7\057\uffc7\061\uffc7\116\075\117\105\122" +
    "\uffc7\123\uffc7\124\uffc7\132\111\133\076\134\104\135\101" +
    "\136\106\140\107\001\002\000\114\002\uffc2\003\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2" +
    "\016\uffc2\020\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\114\030\077\031\073\032\100\033\103\034\uffc2\036\uffc2" +
    "\051\110\056\uffc2\057\uffc2\061\uffc2\116\075\117\105\122" +
    "\uffc2\123\uffc2\124\uffc2\132\111\133\076\134\104\135\101" +
    "\136\uffc2\140\107\001\002\000\114\002\uffbc\003\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\103\034\uffbc\036\uffbc" +
    "\051\uffbc\056\uffbc\057\uffbc\061\uffbc\116\075\117\105\122" +
    "\uffbc\123\uffbc\124\uffbc\132\uffbc\133\uffbc\134\104\135\101" +
    "\136\uffbc\140\107\001\002\000\114\002\uffc4\003\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\013\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\051\uffc4\056\uffc4\057\uffc4\061\uffc4\116\uffc4\117\uffc4\122" +
    "\uffc4\123\uffc4\124\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4" +
    "\136\uffc4\140\uffc4\001\002\000\114\002\uffb8\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\013\uffb8\015\uffb8" +
    "\016\uffb8\020\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\103\034\uffb8\036\uffb8" +
    "\051\uffb8\056\uffb8\057\uffb8\061\uffb8\116\075\117\105\122" +
    "\uffb8\123\uffb8\124\uffb8\132\uffb8\133\uffb8\134\uffb8\135\uffb8" +
    "\136\uffb8\140\uffb8\001\002\000\114\002\uffc5\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5" +
    "\016\uffc5\020\uffc5\022\uffc5\024\uffc5\025\112\026\102\027" +
    "\114\030\077\031\073\032\100\033\103\034\uffc5\036\uffc5" +
    "\051\110\056\uffc5\057\uffc5\061\uffc5\116\075\117\105\122" +
    "\uffc5\123\uffc5\124\uffc5\132\111\133\076\134\104\135\101" +
    "\136\uffc5\140\107\001\002\000\114\002\uffba\003\uffba\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\011\uffba\013\uffba\015\uffba" +
    "\016\uffba\020\uffba\022\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\103\034\uffba\036\uffba" +
    "\051\uffba\056\uffba\057\uffba\061\uffba\116\075\117\105\122" +
    "\uffba\123\uffba\124\uffba\132\uffba\133\uffba\134\uffba\135\uffba" +
    "\136\uffba\140\uffba\001\002\000\114\002\uffb7\003\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\015\uffb7" +
    "\016\uffb7\020\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\051\uffb7\056\uffb7\057\uffb7\061\uffb7\116\075\117\105\122" +
    "\uffb7\123\uffb7\124\uffb7\132\uffb7\133\uffb7\134\uffb7\135\uffb7" +
    "\136\uffb7\140\uffb7\001\002\000\114\002\uffc1\003\uffc1\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\013\uffc1\015\uffc1" +
    "\016\uffc1\020\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\114\030\077\031\073\032\100\033\103\034\uffc1\036\uffc1" +
    "\051\110\056\uffc1\057\uffc1\061\uffc1\116\075\117\105\122" +
    "\uffc1\123\uffc1\124\uffc1\132\111\133\076\134\104\135\101" +
    "\136\uffc1\140\107\001\002\000\114\002\uffb9\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\020\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\103\034\uffb9\036\uffb9" +
    "\051\uffb9\056\uffb9\057\uffb9\061\uffb9\116\075\117\105\122" +
    "\uffb9\123\uffb9\124\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9" +
    "\136\uffb9\140\uffb9\001\002\000\114\002\uffbf\003\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\013\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\103\034\uffbf\036\uffbf" +
    "\051\uffbf\056\uffbf\057\uffbf\061\uffbf\116\075\117\105\122" +
    "\uffbf\123\uffbf\124\uffbf\132\111\133\076\134\104\135\101" +
    "\136\uffbf\140\107\001\002\000\114\002\uffbe\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\103\034\uffbe\036\uffbe" +
    "\051\uffbe\056\uffbe\057\uffbe\061\uffbe\116\075\117\105\122" +
    "\uffbe\123\uffbe\124\uffbe\132\111\133\076\134\104\135\101" +
    "\136\uffbe\140\107\001\002\000\114\002\uffbb\003\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\013\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\103\034\uffbb\036\uffbb" +
    "\051\uffbb\056\uffbb\057\uffbb\061\uffbb\116\075\117\105\122" +
    "\uffbb\123\uffbb\124\uffbb\132\uffbb\133\uffbb\134\104\135\101" +
    "\136\uffbb\140\107\001\002\000\114\002\uffc6\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6" +
    "\016\uffc6\020\uffc6\022\uffc6\024\uffc6\025\112\026\102\027" +
    "\114\030\077\031\073\032\100\033\103\034\uffc6\036\uffc6" +
    "\051\110\056\uffc6\057\uffc6\061\uffc6\116\075\117\105\122" +
    "\113\123\uffc6\124\uffc6\132\111\133\076\134\104\135\101" +
    "\136\106\140\107\001\002\000\114\002\uffbd\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\103\034\uffbd\036\uffbd" +
    "\051\uffbd\056\uffbd\057\uffbd\061\uffbd\116\075\117\105\122" +
    "\uffbd\123\uffbd\124\uffbd\132\111\133\076\134\104\135\101" +
    "\136\uffbd\140\107\001\002\000\004\016\136\001\002\000" +
    "\004\015\137\001\002\000\114\002\uffaa\003\uffaa\004\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\011\uffaa\013\uffaa\015\uffaa\016" +
    "\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\051" +
    "\uffaa\056\uffaa\057\uffaa\061\uffaa\116\uffaa\117\uffaa\122\uffaa" +
    "\123\uffaa\124\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\136" +
    "\uffaa\140\uffaa\001\002\000\110\002\uffa6\003\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013\uffa6\015\uffa6\016" +
    "\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\051" +
    "\uffa6\056\uffa6\057\uffa6\061\uffa6\122\uffa6\123\uffa6\124\uffa6" +
    "\132\uffa6\133\uffa6\134\uffa6\135\uffa6\136\uffa6\140\uffa6\001" +
    "\002\000\036\014\070\015\uffd0\016\063\035\062\066\067" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\004\015\147\001\002" +
    "\000\052\015\uffce\024\uffce\025\112\026\102\027\114\030" +
    "\077\031\073\032\100\033\103\051\110\116\075\117\105" +
    "\122\113\123\074\132\111\133\076\134\104\135\101\136" +
    "\106\140\107\001\002\000\006\015\uffd1\024\145\001\002" +
    "\000\034\014\070\016\063\035\062\066\067\116\055\117" +
    "\064\121\052\133\061\141\050\142\057\143\065\144\051" +
    "\145\053\001\002\000\052\015\uffcf\024\uffcf\025\112\026" +
    "\102\027\114\030\077\031\073\032\100\033\103\051\110" +
    "\116\075\117\105\122\113\123\074\132\111\133\076\134" +
    "\104\135\101\136\106\140\107\001\002\000\114\002\uff84" +
    "\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\011\uff84\013" +
    "\uff84\015\uff84\016\uff84\020\uff84\022\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\036\uff84\051\uff84\056\uff84\057\uff84\061\uff84\116\uff84" +
    "\117\uff84\122\uff84\123\uff84\124\uff84\132\uff84\133\uff84\134" +
    "\uff84\135\uff84\136\uff84\140\uff84\001\002\000\114\002\uffb6" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\013" +
    "\uffb6\015\uffb6\016\uffb6\020\uffb6\022\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\103\034" +
    "\uffb6\036\uffb6\051\uffb6\056\uffb6\057\uffb6\061\uffb6\116\075" +
    "\117\105\122\uffb6\123\uffb6\124\uffb6\132\uffb6\133\uffb6\134" +
    "\104\135\101\136\uffb6\140\107\001\002\000\004\012\153" +
    "\001\002\000\042\002\uff87\003\uff87\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\013\uff87\016\uff87\022\uff87\034\uff87\036\uff87" +
    "\056\uff87\057\uff87\061\uff87\124\uff87\126\160\001\002\000" +
    "\036\003\035\004\016\005\027\006\025\007\006\013\155" +
    "\016\033\022\010\034\012\036\011\056\036\057\032\061" +
    "\037\124\040\001\002\000\036\003\035\004\016\005\027" +
    "\006\025\007\006\013\157\016\033\022\010\034\012\036" +
    "\011\056\036\057\032\061\037\124\040\001\002\000\042" +
    "\002\uff92\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\013" +
    "\uff92\016\uff92\022\uff92\034\uff92\036\uff92\056\uff92\057\uff92" +
    "\061\uff92\124\uff92\126\uff92\001\002\000\040\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\013\uffff\016\uffff" +
    "\022\uffff\034\uffff\036\uffff\056\uffff\057\uffff\061\uffff\124" +
    "\uffff\001\002\000\042\002\uff93\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\013\uff93\016\uff93\022\uff93\034\uff93\036" +
    "\uff93\056\uff93\057\uff93\061\uff93\124\uff93\126\uff93\001\002" +
    "\000\002\001\002\000\040\002\uff86\003\uff86\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\013\uff86\016\uff86\022\uff86\034\uff86" +
    "\036\uff86\056\uff86\057\uff86\061\uff86\124\uff86\001\002\000" +
    "\110\002\uffa8\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\011\uffa8\013\uffa8\015\uffa8\016\uffa8\020\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\036\uffa8\051\uffa8\056\uffa8\057\uffa8\061" +
    "\uffa8\122\uffa8\123\uffa8\124\uffa8\132\uffa8\133\uffa8\134\uffa8" +
    "\135\uffa8\136\uffa8\140\uffa8\001\002\000\004\016\165\001" +
    "\002\000\122\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\011\uffa5\013\uffa5\015\uffa5\016\uffa5\017\171\020" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5\051" +
    "\uffa5\056\uffa5\057\uffa5\061\uffa5\116\uffa5\117\uffa5\120\uffa5" +
    "\122\uffa5\123\uffa5\124\uffa5\132\uffa5\133\uffa5\134\uffa5\135" +
    "\uffa5\136\uffa5\140\uffa5\001\002\000\124\002\uffa3\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3\014" +
    "\166\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\036\uffa3\051\uffa3\056\uffa3\057\uffa3" +
    "\061\uffa3\116\uffa3\117\uffa3\120\uffa3\122\uffa3\123\uffa3\124" +
    "\uffa3\132\uffa3\133\uffa3\134\uffa3\135\uffa3\136\uffa3\140\uffa3" +
    "\001\002\000\036\014\070\015\uffd0\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\004\015\170\001" +
    "\002\000\114\002\uff85\003\uff85\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\011\uff85\013\uff85\015\uff85\016\uff85\020\uff85\022" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\036\uff85\051\uff85\056\uff85\057" +
    "\uff85\061\uff85\116\uff85\117\uff85\122\uff85\123\uff85\124\uff85" +
    "\132\uff85\133\uff85\134\uff85\135\uff85\136\uff85\140\uff85\001" +
    "\002\000\034\014\070\016\063\035\062\066\067\116\055" +
    "\117\064\121\052\133\061\141\050\142\057\143\065\144" +
    "\051\145\053\001\002\000\122\002\uffa2\003\uffa2\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\011\uffa2\013\uffa2\015\uffa2\016" +
    "\uffa2\017\173\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\051\uffa2\056\uffa2\057\uffa2\061\uffa2\116\uffa2" +
    "\117\uffa2\120\uffa2\122\uffa2\123\uffa2\124\uffa2\132\uffa2\133" +
    "\uffa2\134\uffa2\135\uffa2\136\uffa2\140\uffa2\001\002\000\034" +
    "\014\070\016\063\035\062\066\067\116\055\117\064\121" +
    "\052\133\061\141\050\142\057\143\065\144\051\145\053" +
    "\001\002\000\050\020\175\025\112\026\102\027\114\030" +
    "\077\031\073\032\100\033\103\051\110\116\075\117\105" +
    "\122\113\123\074\132\111\133\076\134\104\135\101\136" +
    "\106\140\107\001\002\000\122\002\uffc9\003\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\011\uffc9\013\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\036\uffc9\051\uffc9\056\uffc9\057\uffc9\061\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\122\uffc9\123\uffc9\124\uffc9\132\uffc9\133" +
    "\uffc9\134\uffc9\135\uffc9\136\uffc9\140\uffc9\001\002\000\050" +
    "\020\177\025\112\026\102\027\114\030\077\031\073\032" +
    "\100\033\103\051\110\116\075\117\105\122\113\123\074" +
    "\132\111\133\076\134\104\135\101\136\106\140\107\001" +
    "\002\000\122\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\011\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\051" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\116\uffc8\117\uffc8\120\uffc8" +
    "\122\uffc8\123\uffc8\124\uffc8\132\uffc8\133\uffc8\134\uffc8\135" +
    "\uffc8\136\uffc8\140\uffc8\001\002\000\110\002\uffc3\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\051\uffc3\056\uffc3\057\uffc3\061\uffc3\122\uffc3\123\uffc3" +
    "\124\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3\136\uffc3\140" +
    "\uffc3\001\002\000\004\012\202\001\002\000\016\004\016" +
    "\005\027\006\025\007\006\013\205\016\203\001\002\000" +
    "\004\016\uffa0\001\002\000\016\004\016\005\027\006\025" +
    "\007\006\013\261\016\203\001\002\000\004\011\uff9a\001" +
    "\002\000\004\016\212\001\002\000\004\011\210\001\002" +
    "\000\016\004\uff98\005\uff98\006\uff98\007\uff98\013\uff98\016" +
    "\uff98\001\002\000\006\011\uffe9\024\uffe9\001\002\000\012" +
    "\011\uffe8\017\220\021\221\024\uffe8\001\002\000\006\011" +
    "\uff97\024\214\001\002\000\004\016\212\001\002\000\006" +
    "\011\uffea\024\uffea\001\002\000\050\011\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\256\021\uffe1\024\uffe1\035\uffe1" +
    "\066\uffe1\116\uffe1\117\uffe1\121\uffe1\133\uffe1\141\uffe1\142" +
    "\uffe1\143\uffe1\144\uffe1\145\uffe1\001\002\000\010\011\uffe6" +
    "\021\237\024\uffe6\001\002\000\036\014\070\016\063\020" +
    "\234\035\062\066\067\116\055\117\064\121\052\133\061" +
    "\141\050\142\057\143\065\144\051\145\053\001\002\000" +
    "\036\014\070\016\063\035\062\066\067\067\230\116\055" +
    "\117\064\121\052\133\061\141\050\142\057\143\065\144" +
    "\051\145\053\001\002\000\050\011\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\223\021\uffe2\024\uffe2\035\uffe2\066" +
    "\uffe2\116\uffe2\117\uffe2\121\uffe2\133\uffe2\141\uffe2\142\uffe2" +
    "\143\uffe2\144\uffe2\145\uffe2\001\002\000\004\020\224\001" +
    "\002\000\050\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\021\uffe0\024\uffe0\035\uffe0\066\uffe0\116\uffe0\117" +
    "\uffe0\121\uffe0\133\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0" +
    "\145\uffe0\001\002\000\006\011\uffe7\024\uffe7\001\002\000" +
    "\110\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\013\uffd4\016\uffd4\022\uffd4\024\uffd4\025\112\026" +
    "\102\027\114\030\077\031\073\032\100\033\103\034\uffd4" +
    "\036\uffd4\051\110\056\uffd4\057\uffd4\061\uffd4\116\075\117" +
    "\105\122\113\123\074\124\uffd4\132\111\133\076\134\104" +
    "\135\101\136\106\140\107\001\002\000\044\002\uffd3\003" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3" +
    "\016\uffd3\022\uffd3\024\uffd3\034\uffd3\036\uffd3\056\uffd3\057" +
    "\uffd3\061\uffd3\124\uffd3\001\002\000\004\014\231\001\002" +
    "\000\034\014\070\016\063\035\062\066\067\116\055\117" +
    "\064\121\052\133\061\141\050\142\057\143\065\144\051" +
    "\145\053\001\002\000\050\015\233\025\112\026\102\027" +
    "\114\030\077\031\073\032\100\033\103\051\110\116\075" +
    "\117\105\122\113\123\074\132\111\133\076\134\104\135" +
    "\101\136\106\140\107\001\002\000\044\002\uffd2\003\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\016" +
    "\uffd2\022\uffd2\024\uffd2\034\uffd2\036\uffd2\056\uffd2\057\uffd2" +
    "\061\uffd2\124\uffd2\001\002\000\050\011\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\024\uffdf\035\uffdf" +
    "\066\uffdf\116\uffdf\117\uffdf\121\uffdf\133\uffdf\141\uffdf\142" +
    "\uffdf\143\uffdf\144\uffdf\145\uffdf\001\002\000\050\020\236" +
    "\025\112\026\102\027\114\030\077\031\073\032\100\033" +
    "\103\051\110\116\075\117\105\122\113\123\074\132\111" +
    "\133\076\134\104\135\101\136\106\140\107\001\002\000" +
    "\050\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\021\uffdd\024\uffdd\035\uffdd\066\uffdd\116\uffdd\117\uffdd\121" +
    "\uffdd\133\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145\uffdd" +
    "\001\002\000\036\012\243\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\006\011\uffe4\024" +
    "\uffe4\001\002\000\006\011\uffe5\024\uffe5\001\002\000\052" +
    "\011\uffe3\024\uffe3\025\112\026\102\027\114\030\077\031" +
    "\073\032\100\033\103\051\110\116\075\117\105\122\113" +
    "\123\074\132\111\133\076\134\104\135\101\136\106\140" +
    "\107\001\002\000\040\012\250\014\070\016\063\017\171" +
    "\035\062\066\067\116\055\117\064\121\052\133\061\141" +
    "\050\142\057\143\065\144\051\145\053\001\002\000\006" +
    "\013\253\024\254\001\002\000\006\013\uffd7\024\uffd7\001" +
    "\002\000\006\013\uffd9\024\uffd9\001\002\000\052\013\uffd8" +
    "\024\uffd8\025\112\026\102\027\114\030\077\031\073\032" +
    "\100\033\103\051\110\116\075\117\105\122\113\123\074" +
    "\132\111\133\076\134\104\135\101\136\106\140\107\001" +
    "\002\000\036\012\250\014\070\016\063\035\062\066\067" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\006\013\252\017\173" +
    "\001\002\000\044\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\016\uffdc\022\uffdc\024\uffdc" +
    "\034\uffdc\036\uffdc\056\uffdc\057\uffdc\061\uffdc\124\uffdc\001" +
    "\002\000\044\002\uffdb\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\013\uffdb\016\uffdb\022\uffdb\024\uffdb\034" +
    "\uffdb\036\uffdb\056\uffdb\057\uffdb\061\uffdb\124\uffdb\001\002" +
    "\000\036\012\250\014\070\016\063\035\062\066\067\116" +
    "\055\117\064\121\052\133\061\141\050\142\057\143\065" +
    "\144\051\145\053\001\002\000\006\013\uffda\024\uffda\001" +
    "\002\000\034\014\070\016\063\035\062\066\067\116\055" +
    "\117\064\121\052\133\061\141\050\142\057\143\065\144" +
    "\051\145\053\001\002\000\050\020\260\025\112\026\102" +
    "\027\114\030\077\031\073\032\100\033\103\051\110\116" +
    "\075\117\105\122\113\123\074\132\111\133\076\134\104" +
    "\135\101\136\106\140\107\001\002\000\050\011\uffde\012" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\024\uffde" +
    "\035\uffde\066\uffde\116\uffde\117\uffde\121\uffde\133\uffde\141" +
    "\uffde\142\uffde\143\uffde\144\uffde\145\uffde\001\002\000\004" +
    "\011\uff9b\001\002\000\004\011\263\001\002\000\016\004" +
    "\uff99\005\uff99\006\uff99\007\uff99\013\uff99\016\uff99\001\002" +
    "\000\004\011\267\001\002\000\050\011\uff8f\025\112\026" +
    "\102\027\114\030\077\031\073\032\100\033\103\051\110" +
    "\116\075\117\105\122\113\123\074\132\111\133\076\134" +
    "\104\135\101\136\106\140\107\001\002\000\040\002\uff90" +
    "\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\013\uff90\016" +
    "\uff90\022\uff90\034\uff90\036\uff90\056\uff90\057\uff90\061\uff90" +
    "\124\uff90\001\002\000\040\002\uff91\003\uff91\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\013\uff91\016\uff91\022\uff91\034\uff91" +
    "\036\uff91\056\uff91\057\uff91\061\uff91\124\uff91\001\002\000" +
    "\040\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\013\ufffd\016\ufffd\022\ufffd\034\ufffd\036\ufffd\056\ufffd\057" +
    "\ufffd\061\ufffd\124\ufffd\001\002\000\006\017\173\021\272" +
    "\001\002\000\034\014\070\016\063\035\062\066\067\116" +
    "\055\117\064\121\052\133\061\141\050\142\057\143\065" +
    "\144\051\145\053\001\002\000\050\011\uffd5\025\112\026" +
    "\102\027\114\030\077\031\073\032\100\033\103\051\110" +
    "\116\075\117\105\122\113\123\074\132\111\133\076\134" +
    "\104\135\101\136\106\140\107\001\002\000\034\014\070" +
    "\016\063\035\062\066\067\116\055\117\064\121\052\133" +
    "\061\141\050\142\057\143\065\144\051\145\053\001\002" +
    "\000\050\024\276\025\112\026\102\027\114\030\077\031" +
    "\073\032\100\033\103\051\110\116\075\117\105\122\113" +
    "\123\074\132\111\133\076\134\104\135\101\136\106\140" +
    "\107\001\002\000\034\014\070\016\063\035\062\066\067" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\050\015\300\025\112" +
    "\026\102\027\114\030\077\031\073\032\100\033\103\051" +
    "\110\116\075\117\105\122\113\123\074\132\111\133\076" +
    "\134\104\135\101\136\106\140\107\001\002\000\004\011" +
    "\ufff1\001\002\000\040\002\uff96\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\013\uff96\016\uff96\022\uff96\034\uff96\036" +
    "\uff96\056\uff96\057\uff96\061\uff96\124\uff96\001\002\000\006" +
    "\011\uffeb\024\214\001\002\000\014\011\uffe8\014\304\017" +
    "\220\021\221\024\uffe8\001\002\000\022\004\016\005\027" +
    "\006\025\007\006\015\uff8c\016\203\024\uff8c\046\310\001" +
    "\002\000\006\015\uff8d\024\uff8d\001\002\000\004\016\317" +
    "\001\002\000\006\015\315\024\314\001\002\000\014\004" +
    "\016\005\027\006\025\007\006\016\203\001\002\000\004" +
    "\016\312\001\002\000\010\015\uff8a\017\220\024\uff8a\001" +
    "\002\000\006\015\uff88\024\uff88\001\002\000\016\004\016" +
    "\005\027\006\025\007\006\016\203\046\310\001\002\000" +
    "\004\012\uff95\001\002\000\006\015\uff8e\024\uff8e\001\002" +
    "\000\010\015\uff8b\017\220\024\uff8b\001\002\000\006\015" +
    "\uff89\024\uff89\001\002\000\036\014\070\016\063\035\062" +
    "\066\067\067\230\116\055\117\064\121\052\133\061\141" +
    "\050\142\057\143\065\144\051\145\053\001\002\000\004" +
    "\011\uffd6\001\002\000\040\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\013\ufff9\016\ufff9\022\ufff9\034\ufff9" +
    "\036\ufff9\056\ufff9\057\ufff9\061\ufff9\124\ufff9\001\002\000" +
    "\040\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\013\ufff8\016\ufff8\022\ufff8\034\ufff8\036\ufff8\056\ufff8\057" +
    "\ufff8\061\ufff8\124\ufff8\001\002\000\040\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\013\ufffc\016\ufffc\022" +
    "\ufffc\034\ufffc\036\ufffc\056\ufffc\057\ufffc\061\ufffc\124\ufffc" +
    "\001\002\000\040\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\013\ufffb\016\ufffb\022\ufffb\034\ufffb\036\ufffb" +
    "\056\ufffb\057\ufffb\061\ufffb\124\ufffb\001\002\000\004\014" +
    "\330\001\002\000\022\004\016\005\027\006\025\007\006" +
    "\015\uff8c\016\203\024\uff8c\046\310\001\002\000\006\015" +
    "\332\024\314\001\002\000\004\012\uff94\001\002\000\004" +
    "\016\335\001\002\000\040\002\ufff0\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\013\ufff0\016\ufff0\022\ufff0\034\ufff0" +
    "\036\ufff0\056\ufff0\057\ufff0\061\ufff0\124\ufff0\001\002\000" +
    "\040\014\070\016\063\017\220\035\062\066\067\067\230" +
    "\116\055\117\064\121\052\133\061\141\050\142\057\143" +
    "\065\144\051\145\053\001\002\000\040\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\013\uffef\016\uffef\022" +
    "\uffef\034\uffef\036\uffef\056\uffef\057\uffef\061\uffef\124\uffef" +
    "\001\002\000\036\012\243\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\040\002\uffed\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\013\uffed\016\uffed" +
    "\022\uffed\034\uffed\036\uffed\056\uffed\057\uffed\061\uffed\124" +
    "\uffed\001\002\000\040\002\uffee\003\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\013\uffee\016\uffee\022\uffee\034\uffee\036" +
    "\uffee\056\uffee\057\uffee\061\uffee\124\uffee\001\002\000\104" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\013" +
    "\uffec\016\uffec\022\uffec\025\112\026\102\027\114\030\077" +
    "\031\073\032\100\033\103\034\uffec\036\uffec\051\110\056" +
    "\uffec\057\uffec\061\uffec\116\075\117\105\122\113\123\074" +
    "\124\uffec\132\111\133\076\134\104\135\101\136\106\140" +
    "\107\001\002\000\004\141\344\001\002\000\006\015\346" +
    "\024\345\001\002\000\034\014\070\016\063\035\062\066" +
    "\067\116\055\117\064\121\052\133\061\141\050\142\057" +
    "\143\065\144\051\145\053\001\002\000\004\011\uffcd\001" +
    "\002\000\006\015\352\024\351\001\002\000\052\015\uffca" +
    "\024\uffca\025\112\026\102\027\114\030\077\031\073\032" +
    "\100\033\103\051\110\116\075\117\105\122\113\123\074" +
    "\132\111\133\076\134\104\135\101\136\106\140\107\001" +
    "\002\000\034\014\070\016\063\035\062\066\067\116\055" +
    "\117\064\121\052\133\061\141\050\142\057\143\065\144" +
    "\051\145\053\001\002\000\004\011\uffcc\001\002\000\052" +
    "\015\uffcb\024\uffcb\025\112\026\102\027\114\030\077\031" +
    "\073\032\100\033\103\051\110\116\075\117\105\122\113" +
    "\123\074\132\111\133\076\134\104\135\101\136\106\140" +
    "\107\001\002\000\040\002\ufff4\003\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\013\ufff4\016\ufff4\022\ufff4\034\ufff4\036" +
    "\ufff4\056\ufff4\057\ufff4\061\ufff4\124\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\050\003\023\004\027\005\014\012\041\013" +
    "\003\014\033\016\040\023\021\036\012\042\025\061\042" +
    "\062\030\063\013\064\016\065\004\072\020\076\017\077" +
    "\022\100\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\155\005\014\013" +
    "\003\014\033\016\040\023\021\036\012\042\025\061\042" +
    "\062\030\063\013\064\016\065\004\072\020\076\017\077" +
    "\022\100\006\001\001\000\002\001\001\000\006\043\301" +
    "\044\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\300\001\001\000\002\001\001\000\004\034\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\264\007\057\010\065\030\263\065\046\077\053\100\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\055\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\177\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\161\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\147\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\137\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\070\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\133\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\016\006\132\007\057" +
    "\010\065\065\046\077\053\100\006\001\001\000\002\001" +
    "\001\000\016\006\131\007\057\010\065\065\046\077\053" +
    "\100\006\001\001\000\016\006\130\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\016\006\127\007\057" +
    "\010\065\065\046\077\053\100\006\001\001\000\016\006" +
    "\126\007\057\010\065\065\046\077\053\100\006\001\001" +
    "\000\016\006\125\007\057\010\065\065\046\077\053\100" +
    "\006\001\001\000\016\006\124\007\057\010\065\065\046" +
    "\077\053\100\006\001\001\000\016\006\123\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\016\006\122\007\057\010\065\065\046\077\053\100" +
    "\006\001\001\000\016\006\121\007\057\010\065\065\046" +
    "\077\053\100\006\001\001\000\002\001\001\000\016\006" +
    "\117\007\057\010\065\065\046\077\053\100\006\001\001" +
    "\000\016\006\116\007\057\010\065\065\046\077\053\100" +
    "\006\001\001\000\016\006\115\007\057\010\065\065\046" +
    "\077\053\100\006\001\001\000\016\006\114\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\142\007\057\010\065\065\046\067\141\070\143\077" +
    "\053\100\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\145\007\057\010\065\065" +
    "\046\077\053\100\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\151\001\001\000" +
    "\002\001\001\000\046\003\153\004\027\005\014\013\003" +
    "\014\033\016\040\023\021\036\012\042\025\061\042\062" +
    "\030\063\013\064\016\065\004\072\020\076\017\077\022" +
    "\100\006\001\001\000\044\004\155\005\014\013\003\014" +
    "\033\016\040\023\021\036\012\042\025\061\042\062\030" +
    "\063\013\064\016\065\004\072\020\076\017\077\022\100" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\163\001\001\000\004\034\171" +
    "\001\001\000\002\001\001\000\022\006\142\007\057\010" +
    "\065\065\046\067\166\070\143\077\053\100\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\175\007" +
    "\057\010\065\065\046\077\053\100\006\001\001\000\002" +
    "\001\001\000\016\006\173\007\057\010\065\065\046\077" +
    "\053\100\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\003\042\205\071\206\074\203" +
    "\001\001\000\002\001\001\000\010\013\003\042\205\071" +
    "\261\001\001\000\002\001\001\000\006\043\212\044\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\216\032\221\033\215\001\001\000\002" +
    "\001\001\000\004\044\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\234\007\057" +
    "\010\065\065\046\077\053\100\006\001\001\000\022\006" +
    "\225\007\057\010\065\065\046\077\053\100\006\101\226" +
    "\102\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\231\007\057\010" +
    "\065\065\046\077\053\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\241\007\057\010\065\041\237" +
    "\065\046\075\240\077\053\100\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\246" +
    "\007\057\010\065\034\250\037\245\040\243\041\244\065" +
    "\046\077\053\100\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\246\007\057\010\065\037\245\040\243\041\244\065\046" +
    "\077\053\100\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\246\007\057\010\065" +
    "\037\254\041\244\065\046\077\053\100\006\001\001\000" +
    "\002\001\001\000\016\006\256\007\057\010\065\065\046" +
    "\077\053\100\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\272\007\057\010\065\065\046\077\053\100\006\001" +
    "\001\000\002\001\001\000\016\006\274\007\057\010\065" +
    "\065\046\077\053\100\006\001\001\000\002\001\001\000" +
    "\016\006\276\007\057\010\065\065\046\077\053\100\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\216\032\221\033\215" +
    "\001\001\000\012\013\003\042\305\057\304\060\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\003\042\310\001\001\000\002\001\001\000" +
    "\010\031\312\032\221\033\215\001\001\000\002\001\001" +
    "\000\010\013\003\042\305\057\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\317\032\221\033\215" +
    "\001\001\000\002\001\001\000\022\006\225\007\057\010" +
    "\065\065\046\077\053\100\006\101\226\102\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\003\042\305\057\304\060\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\333\001\001\000\002" +
    "\001\001\000\030\006\225\007\057\010\065\031\336\032" +
    "\221\033\215\065\046\077\053\100\006\101\226\102\335" +
    "\001\001\000\002\001\001\000\022\006\341\007\057\010" +
    "\065\041\337\065\046\075\340\077\053\100\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\347\007\057" +
    "\010\065\035\346\065\046\077\053\100\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\352\007\057\010\065\065\046\077\053\100\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= DECLARACIONCONSTANTE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONCONSTANTE ::= tcomodin tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECCONSTANTE ::= id NDIM VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECCONSTANTE ::= id NDIM ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECCONSTANTE ::= id NDIM EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NDIM ::= NDIMVALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NDIMVALOR ::= NDIMVALOR corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n ; n.add(valor);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NDIMVALOR ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(valor);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(origen , valor, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ORIGEN ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
