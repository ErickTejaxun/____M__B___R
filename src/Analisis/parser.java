
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\012\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\100\010\000\002\064\004\000\002\046" +
    "\004\000\002\046\004\000\002\005\004\000\002\044\005" +
    "\000\002\044\003\000\002\045\003\000\002\045\005\000" +
    "\002\045\004\000\002\045\006\000\002\045\006\000\002" +
    "\045\006\000\002\032\003\000\002\032\003\000\002\033" +
    "\005\000\002\033\004\000\002\077\005\000\002\042\005" +
    "\000\002\041\005\000\002\041\003\000\002\040\003\000" +
    "\002\040\003\000\002\017\005\000\002\037\006\000\002" +
    "\104\003\000\002\104\003\000\002\103\006\000\002\070" +
    "\003\000\002\070\002\000\002\071\005\000\002\071\003" +
    "\000\002\014\006\000\002\014\010\000\002\015\006\000" +
    "\002\015\010\000\002\036\005\000\002\036\003\000\002" +
    "\035\006\000\002\035\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\005\000\002\006\006\000\002\006\003" +
    "\000\002\006\006\000\002\006\003\000\002\072\010\000" +
    "\002\007\004\000\002\010\004\000\002\101\005\000\002" +
    "\101\003\000\002\102\003\000\002\102\004\000\002\043" +
    "\003\000\002\043\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\074\007\000" +
    "\002\074\006\000\002\076\005\000\002\076\004\000\002" +
    "\073\004\000\002\062\004\000\002\063\007\000\002\063" +
    "\010\000\002\063\007\000\002\002\005\000\002\002\004" +
    "\000\002\065\005\000\002\065\004\000\002\030\003\000" +
    "\002\061\005\000\002\061\003\000\002\061\002\000\002" +
    "\060\004\000\002\060\005\000\002\060\005\000\002\060" +
    "\006\000\002\024\007\000\002\024\011\000\002\025\003" +
    "\000\002\025\003\000\002\066\010\000\002\066\006\000" +
    "\002\020\007\000\002\023\004\000\002\022\004\000\002" +
    "\053\011\000\002\053\012\000\002\052\004\000\002\052" +
    "\003\000\002\050\006\000\002\051\005\000\002\021\011" +
    "\000\002\027\013\000\002\027\013\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\054\003\034\004\017\005\060\006\065\007" +
    "\016\016\043\022\056\034\030\044\046\050\044\057\061" +
    "\060\022\061\023\062\036\063\032\101\014\111\021\112" +
    "\031\113\006\114\004\125\020\001\002\000\004\011\u0149" +
    "\001\002\000\004\011\u0148\001\002\000\004\011\u0147\001" +
    "\002\000\016\016\u013f\017\u013d\021\uff99\117\uff99\120\uff99" +
    "\121\uff99\001\002\000\064\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\013\ufff6\016\ufff6\022\ufff6\034\ufff6" +
    "\040\ufff6\043\ufff6\044\ufff6\050\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\101\ufff6\111\ufff6\112\ufff6\113\ufff6" +
    "\114\ufff6\125\ufff6\001\002\000\056\002\000\003\034\004" +
    "\017\005\060\006\065\007\016\016\043\022\056\034\030" +
    "\044\046\050\044\057\061\060\022\061\023\062\036\063" +
    "\032\101\014\111\021\112\031\113\006\114\004\125\020" +
    "\001\002\000\004\011\u013c\001\002\000\004\011\u013b\001" +
    "\002\000\004\014\u012a\001\002\000\064\002\ufff0\003\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\013\ufff0\016\ufff0\022" +
    "\ufff0\034\ufff0\040\ufff0\043\ufff0\044\ufff0\050\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\101\ufff0\111\ufff0\112" +
    "\ufff0\113\ufff0\114\ufff0\125\ufff0\001\002\000\150\002\uff92" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\011\uff92\013" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\040\uff92\043\uff92\044\uff92\050\uff92" +
    "\052\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\101" +
    "\uff92\111\uff92\112\uff92\113\uff92\114\uff92\116\uff92\117\uff92" +
    "\120\uff92\121\uff92\123\uff92\124\uff92\125\uff92\133\uff92\134" +
    "\uff92\135\uff92\136\uff92\137\uff92\141\uff92\001\002\000\150" +
    "\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95\011" +
    "\uff95\013\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\040\uff95\043\uff95\044\uff95" +
    "\050\uff95\052\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063" +
    "\uff95\101\uff95\111\uff95\112\uff95\113\uff95\114\uff95\116\uff95" +
    "\117\uff95\120\uff95\121\uff95\123\uff95\124\uff95\125\uff95\133" +
    "\uff95\134\uff95\135\uff95\136\uff95\137\uff95\141\uff95\001\002" +
    "\000\004\014\u0122\001\002\000\004\014\u011e\001\002\000" +
    "\004\014\u0119\001\002\000\004\016\u0115\001\002\000\064" +
    "\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\013" +
    "\ufff5\016\ufff5\022\ufff5\034\ufff5\040\ufff5\043\ufff5\044\ufff5" +
    "\050\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\101" +
    "\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\125\ufff5\001\002" +
    "\000\064\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\013\ufff4\016\ufff4\022\ufff4\034\ufff4\040\ufff4\043\ufff4" +
    "\044\ufff4\050\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\101\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4\125\ufff4" +
    "\001\002\000\004\011\u0113\001\002\000\004\011\u0112\001" +
    "\002\000\004\016\u0104\001\002\000\004\014\354\001\002" +
    "\000\004\014\347\001\002\000\004\011\346\001\002\000" +
    "\064\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\013\uffe8\016\uffe8\022\uffe8\034\uffe8\040\uffe8\043\uffe8\044" +
    "\uffe8\050\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\101\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\125\uffe8\001" +
    "\002\000\150\002\uff97\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\011\uff97\013\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\040\uff97\043" +
    "\uff97\044\uff97\050\uff97\052\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\101\uff97\111\uff97\112\uff97\113\uff97\114" +
    "\uff97\116\uff97\117\uff97\120\uff97\121\uff97\123\uff97\124\uff97" +
    "\125\uff97\133\uff97\134\uff97\135\uff97\136\uff97\137\uff97\141" +
    "\uff97\001\002\000\004\016\277\001\002\000\004\011\276" +
    "\001\002\000\004\011\275\001\002\000\064\002\uffed\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\013\uffed\016\uffed" +
    "\022\uffed\034\uffed\040\uffed\043\uffed\044\uffed\050\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\101\uffed\111\uffed" +
    "\112\uffed\113\uffed\114\uffed\125\uffed\001\002\000\004\011" +
    "\274\001\002\000\020\014\203\016\uff96\017\174\021\uff96" +
    "\117\uff96\120\uff96\121\uff96\001\002\000\004\014\263\001" +
    "\002\000\004\011\262\001\002\000\004\012\067\001\002" +
    "\000\150\002\uff9a\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\011\uff9a\013\uff9a\015\uff9a\016\uff9a\017\174\020\uff9a" +
    "\021\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\043\uff9a" +
    "\044\uff9a\050\uff9a\052\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\101\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a" +
    "\116\uff9a\117\uff9a\120\uff9a\121\uff9a\123\uff9a\124\uff9a\125" +
    "\uff9a\133\uff9a\134\uff9a\135\uff9a\136\uff9a\137\uff9a\141\uff9a" +
    "\001\002\000\004\011\253\001\002\000\064\002\ufff2\003" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\013\ufff2\016\ufff2" +
    "\022\ufff2\034\ufff2\040\ufff2\043\ufff2\044\ufff2\050\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\101\ufff2\111\ufff2" +
    "\112\ufff2\113\ufff2\114\ufff2\125\ufff2\001\002\000\012\021" +
    "\243\117\217\120\220\121\216\001\002\000\064\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\013\uffec\016" +
    "\uffec\022\uffec\034\uffec\040\uffec\043\uffec\044\uffec\050\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\101\uffec\111" +
    "\uffec\112\uffec\113\uffec\114\uffec\125\uffec\001\002\000\004" +
    "\011\242\001\002\000\004\011\241\001\002\000\004\014" +
    "\230\001\002\000\004\002\227\001\002\000\150\002\uff93" +
    "\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\011\uff93\013" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\040\uff93\043\uff93\044\uff93\050\uff93" +
    "\052\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\101" +
    "\uff93\111\uff93\112\uff93\113\uff93\114\uff93\116\uff93\117\uff93" +
    "\120\uff93\121\uff93\123\uff93\124\uff93\125\uff93\133\uff93\134" +
    "\uff93\135\uff93\136\uff93\137\uff93\141\uff93\001\002\000\050" +
    "\004\017\005\060\006\065\007\016\011\114\014\120\016" +
    "\113\035\112\063\032\064\110\067\121\122\100\134\111" +
    "\135\115\142\076\143\105\144\116\145\077\146\102\001" +
    "\002\000\064\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\013\ufffe\016\ufffe\022\ufffe\034\ufffe\040\ufffe\043" +
    "\ufffe\044\ufffe\050\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\101\ufffe\111\ufffe\112\ufffe\113\ufffe\114\ufffe\125" +
    "\ufffe\001\002\000\004\011\074\001\002\000\004\012\067" +
    "\001\002\000\150\002\uff94\003\uff94\004\uff94\005\uff94\006" +
    "\uff94\007\uff94\011\uff94\013\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\040\uff94" +
    "\043\uff94\044\uff94\050\uff94\052\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\101\uff94\111\uff94\112\uff94\113\uff94" +
    "\114\uff94\116\uff94\117\uff94\120\uff94\121\uff94\123\uff94\124" +
    "\uff94\125\uff94\133\uff94\134\uff94\135\uff94\136\uff94\137\uff94" +
    "\141\uff94\001\002\000\064\002\uff8c\003\uff8c\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\013\uff8c\016\uff8c\022\uff8c\034\uff8c" +
    "\040\uff8c\043\uff8c\044\uff8c\050\uff8c\057\uff8c\060\uff8c\061" +
    "\uff8c\062\uff8c\063\uff8c\101\uff8c\111\uff8c\112\uff8c\113\uff8c" +
    "\114\uff8c\125\uff8c\001\002\000\056\003\034\004\017\005" +
    "\060\006\065\007\016\013\071\016\043\022\056\034\030" +
    "\044\046\050\044\057\061\060\022\061\023\062\036\063" +
    "\032\101\014\111\021\112\031\113\006\114\004\125\020" +
    "\001\002\000\056\003\034\004\017\005\060\006\065\007" +
    "\016\013\072\016\043\022\056\034\030\044\046\050\044" +
    "\057\061\060\022\061\023\062\036\063\032\101\014\111" +
    "\021\112\031\113\006\114\004\125\020\001\002\000\066" +
    "\002\uff87\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\013" +
    "\uff87\016\uff87\022\uff87\034\uff87\040\uff87\043\uff87\044\uff87" +
    "\050\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\101" +
    "\uff87\111\uff87\112\uff87\113\uff87\114\uff87\125\uff87\127\uff87" +
    "\001\002\000\066\002\uff88\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\013\uff88\016\uff88\022\uff88\034\uff88\040\uff88" +
    "\043\uff88\044\uff88\050\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\101\uff88\111\uff88\112\uff88\113\uff88\114\uff88" +
    "\125\uff88\127\uff88\001\002\000\064\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\013\uffff\016\uffff\022\uffff" +
    "\034\uffff\040\uffff\043\uffff\044\uffff\050\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\063\uffff\101\uffff\111\uffff\112\uffff" +
    "\113\uffff\114\uffff\125\uffff\001\002\000\064\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\013\ufffd\016\ufffd" +
    "\022\ufffd\034\ufffd\040\ufffd\043\ufffd\044\ufffd\050\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\101\ufffd\111\ufffd" +
    "\112\ufffd\113\ufffd\114\ufffd\125\ufffd\001\002\000\136\002" +
    "\uffab\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab" +
    "\013\uffab\015\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\040\uffab\043\uffab\044\uffab\050\uffab\052\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\101\uffab\111\uffab" +
    "\112\uffab\113\uffab\114\uffab\116\uffab\123\uffab\124\uffab\125" +
    "\uffab\133\uffab\134\uffab\135\uffab\136\uffab\137\uffab\141\uffab" +
    "\001\002\000\136\002\uffa7\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\011\uffa7\013\uffa7\015\uffa7\016\uffa7\020\uffa7" +
    "\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\043\uffa7\044\uffa7" +
    "\050\uffa7\052\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\101\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\116\uffa7" +
    "\123\uffa7\124\uffa7\125\uffa7\133\uffa7\134\uffa7\135\uffa7\136" +
    "\uffa7\137\uffa7\141\uffa7\001\002\000\136\002\uffa9\003\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\013\uffa9\015" +
    "\uffa9\016\uffa9\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\040" +
    "\uffa9\043\uffa9\044\uffa9\050\uffa9\052\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\101\uffa9\111\uffa9\112\uffa9\113" +
    "\uffa9\114\uffa9\116\uffa9\123\uffa9\124\uffa9\125\uffa9\133\uffa9" +
    "\134\uffa9\135\uffa9\136\uffa9\137\uffa9\141\uffa9\001\002\000" +
    "\046\004\017\005\060\006\065\007\016\014\120\016\113" +
    "\035\112\063\032\064\110\067\121\122\100\134\111\135" +
    "\115\142\076\143\105\144\116\145\077\146\102\001\002" +
    "\000\004\011\225\001\002\000\136\002\uffa8\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\013\uffa8\015\uffa8" +
    "\016\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\040\uffa8" +
    "\043\uffa8\044\uffa8\050\uffa8\052\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\101\uffa8\111\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\116\uffa8\123\uffa8\124\uffa8\125\uffa8\133\uffa8\134" +
    "\uffa8\135\uffa8\136\uffa8\137\uffa8\141\uffa8\001\002\000\144" +
    "\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011" +
    "\uffa5\013\uffa5\015\uffa5\016\uffa5\020\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\040\uffa5\043\uffa5\044\uffa5\050\uffa5\052\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\101\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\114\uffa5\116\uffa5\117\217\120\220" +
    "\121\216\123\uffa5\124\uffa5\125\uffa5\133\uffa5\134\uffa5\135" +
    "\uffa5\136\uffa5\137\uffa5\141\uffa5\001\002\000\044\011\uff84" +
    "\025\140\026\131\027\147\030\137\031\145\032\133\033" +
    "\127\052\143\123\135\124\134\133\132\134\136\135\142" +
    "\136\130\137\141\141\144\001\002\000\136\002\uffa6\003" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\040\uffa6\043\uffa6\044\uffa6\050\uffa6\052\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\101\uffa6\111\uffa6\112\uffa6" +
    "\113\uffa6\114\uffa6\116\uffa6\123\uffa6\124\uffa6\125\uffa6\133" +
    "\uffa6\134\uffa6\135\uffa6\136\uffa6\137\uffa6\141\uffa6\001\002" +
    "\000\150\002\uff99\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\011\uff99\013\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\034\uff99\040\uff99\043\uff99" +
    "\044\uff99\050\uff99\052\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\101\uff99\111\uff99\112\uff99\113\uff99\114\uff99" +
    "\116\uff99\117\uff99\120\uff99\121\uff99\123\uff99\124\uff99\125" +
    "\uff99\133\uff99\134\uff99\135\uff99\136\uff99\137\uff99\141\uff99" +
    "\001\002\000\136\002\uffad\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\013\uffad\015\uffad\016\uffad\020\uffad" +
    "\022\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\040\uffad\043\uffad\044\uffad" +
    "\050\uffad\052\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\101\uffad\111\uffad\112\uffad\113\uffad\114\uffad\116\uffad" +
    "\123\uffad\124\uffad\125\uffad\133\uffad\134\uffad\135\uffad\136" +
    "\uffad\137\uffad\141\uffad\001\002\000\004\014\213\001\002" +
    "\000\046\004\017\005\060\006\065\007\016\014\120\016" +
    "\113\035\112\063\032\064\110\067\121\122\100\134\111" +
    "\135\115\142\076\143\105\144\116\145\077\146\102\001" +
    "\002\000\136\002\uffa1\003\uffa1\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\011\uffa1\013\uffa1\015\uffa1\016\uffa1\020\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\040\uffa1\043\uffa1\044\uffa1\050" +
    "\uffa1\052\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\101\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\116\uffa1\123" +
    "\uffa1\124\uffa1\125\uffa1\133\uffa1\134\uffa1\135\uffa1\136\uffa1" +
    "\137\uffa1\141\uffa1\001\002\000\150\002\uff96\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\011\uff96\013\uff96\014\203" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\040\uff96\043\uff96\044\uff96\050\uff96\052\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\101\uff96\111\uff96" +
    "\112\uff96\113\uff96\114\uff96\116\uff96\117\uff96\120\uff96\121" +
    "\uff96\123\uff96\124\uff96\125\uff96\133\uff96\134\uff96\135\uff96" +
    "\136\uff96\137\uff96\141\uff96\001\002\000\064\002\uff85\003" +
    "\uff85\004\uff85\005\uff85\006\uff85\007\uff85\013\uff85\016\uff85" +
    "\022\uff85\034\uff85\040\uff85\043\uff85\044\uff85\050\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\101\uff85\111\uff85" +
    "\112\uff85\113\uff85\114\uff85\125\uff85\001\002\000\014\004" +
    "\017\005\060\006\065\007\016\016\170\001\002\000\136" +
    "\002\uffaa\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\013\uffaa\015\uffaa\016\uffaa\020\uffaa\022\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\040\uffaa\043\uffaa\044\uffaa\050\uffaa\052\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\101\uffaa\111" +
    "\uffaa\112\uffaa\113\uffaa\114\uffaa\116\uffaa\123\uffaa\124\uffaa" +
    "\125\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa\137\uffaa\141" +
    "\uffaa\001\002\000\136\002\uffac\003\uffac\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\011\uffac\013\uffac\015\uffac\016\uffac\020" +
    "\uffac\022\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\040\uffac\043\uffac\044" +
    "\uffac\050\uffac\052\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\101\uffac\111\uffac\112\uffac\113\uffac\114\uffac\116" +
    "\uffac\123\uffac\124\uffac\125\uffac\133\uffac\134\uffac\135\uffac" +
    "\136\uffac\137\uffac\141\uffac\001\002\000\046\004\017\005" +
    "\060\006\065\007\016\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\004\014\123" +
    "\001\002\000\136\002\uff9f\003\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\011\uff9f\013\uff9f\015\uff9f\016\uff9f\020\uff9f" +
    "\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\040\uff9f\043\uff9f\044\uff9f" +
    "\050\uff9f\052\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\101\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\116\uff9f" +
    "\123\uff9f\124\uff9f\125\uff9f\133\uff9f\134\uff9f\135\uff9f\136" +
    "\uff9f\137\uff9f\141\uff9f\001\002\000\004\016\124\001\002" +
    "\000\004\015\125\001\002\000\136\002\uffa0\003\uffa0\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0\013\uffa0\015\uffa0" +
    "\016\uffa0\020\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\040\uffa0" +
    "\043\uffa0\044\uffa0\050\uffa0\052\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\101\uffa0\111\uffa0\112\uffa0\113\uffa0" +
    "\114\uffa0\116\uffa0\123\uffa0\124\uffa0\125\uffa0\133\uffa0\134" +
    "\uffa0\135\uffa0\136\uffa0\137\uffa0\141\uffa0\001\002\000\044" +
    "\015\146\025\140\026\131\027\147\030\137\031\145\032" +
    "\133\033\127\052\143\123\135\124\134\133\132\134\136" +
    "\135\142\136\130\137\141\141\144\001\002\000\046\004" +
    "\017\005\060\006\065\007\016\014\120\016\113\035\112" +
    "\063\032\064\110\067\121\122\100\134\111\135\115\142" +
    "\076\143\105\144\116\145\077\146\102\001\002\000\046" +
    "\004\017\005\060\006\065\007\016\014\120\016\113\035" +
    "\112\063\032\064\110\067\121\122\100\134\111\135\115" +
    "\142\076\143\105\144\116\145\077\146\102\001\002\000" +
    "\046\004\017\005\060\006\065\007\016\014\120\016\113" +
    "\035\112\063\032\064\110\067\121\122\100\134\111\135" +
    "\115\142\076\143\105\144\116\145\077\146\102\001\002" +
    "\000\046\004\017\005\060\006\065\007\016\014\120\016" +
    "\113\035\112\063\032\064\110\067\121\122\100\134\111" +
    "\135\115\142\076\143\105\144\116\145\077\146\102\001" +
    "\002\000\046\004\017\005\060\006\065\007\016\014\120" +
    "\016\113\035\112\063\032\064\110\067\121\122\100\134" +
    "\111\135\115\142\076\143\105\144\116\145\077\146\102" +
    "\001\002\000\046\004\017\005\060\006\065\007\016\014" +
    "\120\016\113\035\112\063\032\064\110\067\121\122\100" +
    "\134\111\135\115\142\076\143\105\144\116\145\077\146" +
    "\102\001\002\000\046\004\017\005\060\006\065\007\016" +
    "\014\120\016\113\035\112\063\032\064\110\067\121\122" +
    "\100\134\111\135\115\142\076\143\105\144\116\145\077" +
    "\146\102\001\002\000\046\004\017\005\060\006\065\007" +
    "\016\014\120\016\113\035\112\063\032\064\110\067\121" +
    "\122\100\134\111\135\115\142\076\143\105\144\116\145" +
    "\077\146\102\001\002\000\046\004\017\005\060\006\065" +
    "\007\016\014\120\016\113\035\112\063\032\064\110\067" +
    "\121\122\100\134\111\135\115\142\076\143\105\144\116" +
    "\145\077\146\102\001\002\000\046\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\046\004\017\005\060" +
    "\006\065\007\016\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\046\004\017\005" +
    "\060\006\065\007\016\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\004\016\153" +
    "\001\002\000\046\004\017\005\060\006\065\007\016\014" +
    "\120\016\113\035\112\063\032\064\110\067\121\122\100" +
    "\134\111\135\115\142\076\143\105\144\116\145\077\146" +
    "\102\001\002\000\046\004\017\005\060\006\065\007\016" +
    "\014\120\016\113\035\112\063\032\064\110\067\121\122" +
    "\100\134\111\135\115\142\076\143\105\144\116\145\077" +
    "\146\102\001\002\000\136\002\uffa3\003\uffa3\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3\015\uffa3\016\uffa3" +
    "\020\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\040\uffa3\043\uffa3" +
    "\044\uffa3\050\uffa3\052\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\101\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3" +
    "\116\uffa3\123\uffa3\124\uffa3\125\uffa3\133\uffa3\134\uffa3\135" +
    "\uffa3\136\uffa3\137\uffa3\141\uffa3\001\002\000\046\004\017" +
    "\005\060\006\065\007\016\014\120\016\113\035\112\063" +
    "\032\064\110\067\121\122\100\134\111\135\115\142\076" +
    "\143\105\144\116\145\077\146\102\001\002\000\136\002" +
    "\uffb8\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\013\uffb8\015\uffb8\016\uffb8\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\127" +
    "\034\uffb8\040\uffb8\043\uffb8\044\uffb8\050\uffb8\052\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\101\uffb8\111\uffb8" +
    "\112\uffb8\113\uffb8\114\uffb8\116\uffb8\123\uffb8\124\uffb8\125" +
    "\uffb8\133\132\134\136\135\142\136\130\137\uffb8\141\144" +
    "\001\002\000\136\002\uffb5\003\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\011\uffb5\013\uffb5\015\uffb5\016\uffb5\020\uffb5" +
    "\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\127\034\uffb5\040\uffb5\043\uffb5\044\uffb5" +
    "\050\uffb5\052\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\101\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\116\uffb5" +
    "\123\uffb5\124\uffb5\125\uffb5\133\132\134\136\135\142\136" +
    "\130\137\uffb5\141\144\001\002\000\136\002\uffb0\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\013\uffb0\015" +
    "\uffb0\016\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\127\034\uffb0\040" +
    "\uffb0\043\uffb0\044\uffb0\050\uffb0\052\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\101\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\114\uffb0\116\uffb0\123\uffb0\124\uffb0\125\uffb0\133\uffb0" +
    "\134\uffb0\135\uffb0\136\uffb0\137\uffb0\141\uffb0\001\002\000" +
    "\136\002\uffbc\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\013\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\040\uffbc\043\uffbc\044\uffbc\050\uffbc\052" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\101\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\116\uffbc\123\uffbc\124" +
    "\uffbc\125\uffbc\133\uffbc\134\uffbc\135\uffbc\136\uffbc\137\uffbc" +
    "\141\uffbc\001\002\000\136\002\uffb2\003\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\011\uffb2\013\uffb2\015\uffb2\016\uffb2" +
    "\020\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\127\034\uffb2\040\uffb2\043\uffb2" +
    "\044\uffb2\050\uffb2\052\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\101\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2" +
    "\116\uffb2\123\uffb2\124\uffb2\125\uffb2\133\uffb2\134\uffb2\135" +
    "\uffb2\136\uffb2\137\uffb2\141\uffb2\001\002\000\136\002\uffbd" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\013" +
    "\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd\025\140" +
    "\026\131\027\147\030\137\031\145\032\133\033\127\034" +
    "\uffbd\040\uffbd\043\uffbd\044\uffbd\050\uffbd\052\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\101\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\114\uffbd\116\uffbd\123\uffbd\124\uffbd\125\uffbd" +
    "\133\132\134\136\135\142\136\130\137\uffbd\141\144\001" +
    "\002\000\136\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\011\uffba\013\uffba\015\uffba\016\uffba\020\uffba\022" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\147\030\137\031\145" +
    "\032\133\033\127\034\uffba\040\uffba\043\uffba\044\uffba\050" +
    "\uffba\052\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\101\uffba\111\uffba\112\uffba\113\uffba\114\uffba\116\uffba\123" +
    "\uffba\124\uffba\125\uffba\133\132\134\136\135\142\136\130" +
    "\137\uffba\141\144\001\002\000\136\002\uffb6\003\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\020\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\127\034\uffb6\040\uffb6" +
    "\043\uffb6\044\uffb6\050\uffb6\052\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\101\uffb6\111\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\116\uffb6\123\uffb6\124\uffb6\125\uffb6\133\132\134" +
    "\136\135\142\136\130\137\uffb6\141\144\001\002\000\136" +
    "\002\uffb3\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011" +
    "\uffb3\013\uffb3\015\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\127\034\uffb3\040\uffb3\043\uffb3\044\uffb3\050\uffb3\052\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\101\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\116\uffb3\123\uffb3\124\uffb3" +
    "\125\uffb3\133\uffb3\134\uffb3\135\142\136\130\137\uffb3\141" +
    "\144\001\002\000\136\002\uffbf\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\011\uffbf\013\uffbf\015\uffbf\016\uffbf\020" +
    "\uffbf\022\uffbf\024\uffbf\025\140\026\131\027\147\030\137" +
    "\031\145\032\133\033\127\034\uffbf\040\uffbf\043\uffbf\044" +
    "\uffbf\050\uffbf\052\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\101\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\116" +
    "\uffbf\123\uffbf\124\uffbf\125\uffbf\133\132\134\136\135\142" +
    "\136\130\137\141\141\144\001\002\000\136\002\uffbe\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\015\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025\140\026" +
    "\131\027\147\030\137\031\145\032\133\033\127\034\uffbe" +
    "\040\uffbe\043\uffbe\044\uffbe\050\uffbe\052\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\101\uffbe\111\uffbe\112\uffbe" +
    "\113\uffbe\114\uffbe\116\uffbe\123\135\124\uffbe\125\uffbe\133" +
    "\132\134\136\135\142\136\130\137\141\141\144\001\002" +
    "\000\136\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\013\uffb7\015\uffb7\016\uffb7\020\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\127\034\uffb7\040\uffb7\043\uffb7\044\uffb7\050\uffb7" +
    "\052\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\101" +
    "\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\116\uffb7\123\uffb7" +
    "\124\uffb7\125\uffb7\133\132\134\136\135\142\136\130\137" +
    "\uffb7\141\144\001\002\000\136\002\uffb4\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\127\034\uffb4\040\uffb4\043" +
    "\uffb4\044\uffb4\050\uffb4\052\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\101\uffb4\111\uffb4\112\uffb4\113\uffb4\114" +
    "\uffb4\116\uffb4\123\uffb4\124\uffb4\125\uffb4\133\uffb4\134\uffb4" +
    "\135\142\136\130\137\uffb4\141\144\001\002\000\136\002" +
    "\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\020\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\147\030\137\031\145\032\133\033\127" +
    "\034\uffb9\040\uffb9\043\uffb9\044\uffb9\050\uffb9\052\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\101\uffb9\111\uffb9" +
    "\112\uffb9\113\uffb9\114\uffb9\116\uffb9\123\uffb9\124\uffb9\125" +
    "\uffb9\133\132\134\136\135\142\136\130\137\uffb9\141\144" +
    "\001\002\000\136\002\uffb1\003\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\011\uffb1\013\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\127\034\uffb1\040\uffb1\043\uffb1\044\uffb1" +
    "\050\uffb1\052\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\101\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\116\uffb1" +
    "\123\uffb1\124\uffb1\125\uffb1\133\uffb1\134\uffb1\135\uffb1\136" +
    "\uffb1\137\uffb1\141\uffb1\001\002\000\136\002\uffaf\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\040" +
    "\uffaf\043\uffaf\044\uffaf\050\uffaf\052\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\101\uffaf\111\uffaf\112\uffaf\113" +
    "\uffaf\114\uffaf\116\uffaf\123\uffaf\124\uffaf\125\uffaf\133\uffaf" +
    "\134\uffaf\135\uffaf\136\uffaf\137\uffaf\141\uffaf\001\002\000" +
    "\150\002\uff96\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96" +
    "\011\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\040\uff96\043\uff96\044" +
    "\uff96\050\uff96\052\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\101\uff96\111\uff96\112\uff96\113\uff96\114\uff96\116" +
    "\uff96\117\uff96\120\uff96\121\uff96\123\uff96\124\uff96\125\uff96" +
    "\133\uff96\134\uff96\135\uff96\136\uff96\137\uff96\141\uff96\001" +
    "\002\000\140\002\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\013\uffa4\015\uffa4\016\uffa4\020\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\040\uffa4\043\uffa4\044\uffa4\050" +
    "\uffa4\052\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\101\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\116\uffa4\121" +
    "\172\123\uffa4\124\uffa4\125\uffa4\133\uffa4\134\uffa4\135\uffa4" +
    "\136\uffa4\137\uffa4\141\uffa4\001\002\000\014\004\017\005" +
    "\060\006\065\007\016\016\170\001\002\000\150\002\uff9b" +
    "\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\011\uff9b\013" +
    "\uff9b\015\uff9b\016\uff9b\017\174\020\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\040\uff9b\043\uff9b\044\uff9b\050\uff9b" +
    "\052\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\101" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\116\uff9b\117\uff9b" +
    "\120\uff9b\121\uff9b\123\uff9b\124\uff9b\125\uff9b\133\uff9b\134" +
    "\uff9b\135\uff9b\136\uff9b\137\uff9b\141\uff9b\001\002\000\046" +
    "\004\017\005\060\006\065\007\016\014\120\016\113\035" +
    "\112\063\032\064\110\067\121\122\100\134\111\135\115" +
    "\142\076\143\105\144\116\145\077\146\102\001\002\000" +
    "\150\002\uff98\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\011\uff98\013\uff98\015\uff98\016\uff98\017\176\020\uff98\021" +
    "\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\040\uff98\043\uff98\044" +
    "\uff98\050\uff98\052\uff98\057\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\101\uff98\111\uff98\112\uff98\113\uff98\114\uff98\116" +
    "\uff98\117\uff98\120\uff98\121\uff98\123\uff98\124\uff98\125\uff98" +
    "\133\uff98\134\uff98\135\uff98\136\uff98\137\uff98\141\uff98\001" +
    "\002\000\046\004\017\005\060\006\065\007\016\014\120" +
    "\016\113\035\112\063\032\064\110\067\121\122\100\134" +
    "\111\135\115\142\076\143\105\144\116\145\077\146\102" +
    "\001\002\000\044\020\200\025\140\026\131\027\147\030" +
    "\137\031\145\032\133\033\127\052\143\123\135\124\134" +
    "\133\132\134\136\135\142\136\130\137\141\141\144\001" +
    "\002\000\150\002\uffc1\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\040\uffc1\043" +
    "\uffc1\044\uffc1\050\uffc1\052\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\101\uffc1\111\uffc1\112\uffc1\113\uffc1\114" +
    "\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\123\uffc1\124\uffc1" +
    "\125\uffc1\133\uffc1\134\uffc1\135\uffc1\136\uffc1\137\uffc1\141" +
    "\uffc1\001\002\000\044\020\202\025\140\026\131\027\147" +
    "\030\137\031\145\032\133\033\127\052\143\123\135\124" +
    "\134\133\132\134\136\135\142\136\130\137\141\141\144" +
    "\001\002\000\150\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040\uffc0" +
    "\043\uffc0\044\uffc0\050\uffc0\052\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\101\uffc0\111\uffc0\112\uffc0\113\uffc0" +
    "\114\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\123\uffc0\124" +
    "\uffc0\125\uffc0\133\uffc0\134\uffc0\135\uffc0\136\uffc0\137\uffc0" +
    "\141\uffc0\001\002\000\050\004\017\005\060\006\065\007" +
    "\016\014\120\015\uffca\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\004\015\211\001\002" +
    "\000\046\015\uffc8\024\uffc8\025\140\026\131\027\147\030" +
    "\137\031\145\032\133\033\127\052\143\123\135\124\134" +
    "\133\132\134\136\135\142\136\130\137\141\141\144\001" +
    "\002\000\006\015\uffcb\024\207\001\002\000\046\004\017" +
    "\005\060\006\065\007\016\014\120\016\113\035\112\063" +
    "\032\064\110\067\121\122\100\134\111\135\115\142\076" +
    "\143\105\144\116\145\077\146\102\001\002\000\046\015" +
    "\uffc9\024\uffc9\025\140\026\131\027\147\030\137\031\145" +
    "\032\133\033\127\052\143\123\135\124\134\133\132\134" +
    "\136\135\142\136\130\137\141\141\144\001\002\000\136" +
    "\002\uff77\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\011" +
    "\uff77\013\uff77\015\uff77\016\uff77\020\uff77\022\uff77\024\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\040\uff77\043\uff77\044\uff77\050\uff77\052\uff77" +
    "\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\101\uff77\111" +
    "\uff77\112\uff77\113\uff77\114\uff77\116\uff77\123\uff77\124\uff77" +
    "\125\uff77\133\uff77\134\uff77\135\uff77\136\uff77\137\uff77\141" +
    "\uff77\001\002\000\136\002\uffae\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\011\uffae\013\uffae\015\uffae\016\uffae\020" +
    "\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\127\034\uffae\040\uffae\043\uffae\044" +
    "\uffae\050\uffae\052\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\101\uffae\111\uffae\112\uffae\113\uffae\114\uffae\116" +
    "\uffae\123\uffae\124\uffae\125\uffae\133\uffae\134\uffae\135\142" +
    "\136\130\137\uffae\141\144\001\002\000\046\004\017\005" +
    "\060\006\065\007\016\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\044\015\215" +
    "\025\140\026\131\027\147\030\137\031\145\032\133\033" +
    "\127\052\143\123\135\124\134\133\132\134\136\135\142" +
    "\136\130\137\141\141\144\001\002\000\136\002\uffa2\003" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\011\uffa2\013\uffa2" +
    "\015\uffa2\016\uffa2\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\040\uffa2\043\uffa2\044\uffa2\050\uffa2\052\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\101\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\114\uffa2\116\uffa2\123\uffa2\124\uffa2\125\uffa2\133" +
    "\uffa2\134\uffa2\135\uffa2\136\uffa2\137\uffa2\141\uffa2\001\002" +
    "\000\014\004\017\005\060\006\065\007\016\016\221\001" +
    "\002\000\136\002\uff9d\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\011\uff9d\013\uff9d\015\uff9d\016\uff9d\020\uff9d\022" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\040\uff9d\043\uff9d\044\uff9d\050" +
    "\uff9d\052\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\101\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\116\uff9d\123" +
    "\uff9d\124\uff9d\125\uff9d\133\uff9d\134\uff9d\135\uff9d\136\uff9d" +
    "\137\uff9d\141\uff9d\001\002\000\136\002\uff9c\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\011\uff9c\013\uff9c\015\uff9c" +
    "\016\uff9c\020\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c" +
    "\043\uff9c\044\uff9c\050\uff9c\052\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\101\uff9c\111\uff9c\112\uff9c\113\uff9c" +
    "\114\uff9c\116\uff9c\123\uff9c\124\uff9c\125\uff9c\133\uff9c\134" +
    "\uff9c\135\uff9c\136\uff9c\137\uff9c\141\uff9c\001\002\000\152" +
    "\002\uff96\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\011" +
    "\uff96\013\uff96\014\222\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\022\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\034\uff96\040\uff96\043\uff96" +
    "\044\uff96\050\uff96\052\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\063\uff96\101\uff96\111\uff96\112\uff96\113\uff96\114\uff96" +
    "\116\uff96\117\uff96\120\uff96\121\uff96\123\uff96\124\uff96\125" +
    "\uff96\133\uff96\134\uff96\135\uff96\136\uff96\137\uff96\141\uff96" +
    "\001\002\000\050\004\017\005\060\006\065\007\016\014" +
    "\120\015\uffca\016\113\035\112\063\032\064\110\067\121" +
    "\122\100\134\111\135\115\142\076\143\105\144\116\145" +
    "\077\146\102\001\002\000\004\015\224\001\002\000\136" +
    "\002\uff78\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\011" +
    "\uff78\013\uff78\015\uff78\016\uff78\020\uff78\022\uff78\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\040\uff78\043\uff78\044\uff78\050\uff78\052\uff78" +
    "\057\uff78\060\uff78\061\uff78\062\uff78\063\uff78\101\uff78\111" +
    "\uff78\112\uff78\113\uff78\114\uff78\116\uff78\123\uff78\124\uff78" +
    "\125\uff78\133\uff78\134\uff78\135\uff78\136\uff78\137\uff78\141" +
    "\uff78\001\002\000\064\002\uff86\003\uff86\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\013\uff86\016\uff86\022\uff86\034\uff86\040" +
    "\uff86\043\uff86\044\uff86\050\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\063\uff86\101\uff86\111\uff86\112\uff86\113\uff86\114" +
    "\uff86\125\uff86\001\002\000\136\002\uffbb\003\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\011\uffbb\013\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\040\uffbb\043" +
    "\uffbb\044\uffbb\050\uffbb\052\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\101\uffbb\111\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\116\uffbb\123\uffbb\124\uffbb\125\uffbb\133\uffbb\134\uffbb" +
    "\135\uffbb\136\uffbb\137\uffbb\141\uffbb\001\002\000\004\002" +
    "\001\001\002\000\004\142\231\001\002\000\006\015\233" +
    "\024\232\001\002\000\046\004\017\005\060\006\065\007" +
    "\016\014\120\016\113\035\112\063\032\064\110\067\121" +
    "\122\100\134\111\135\115\142\076\143\105\144\116\145" +
    "\077\146\102\001\002\000\004\011\uffc7\001\002\000\006" +
    "\015\237\024\236\001\002\000\046\015\uffc2\024\uffc2\025" +
    "\140\026\131\027\147\030\137\031\145\032\133\033\127" +
    "\052\143\123\135\124\134\133\132\134\136\135\142\136" +
    "\130\137\141\141\144\001\002\000\046\004\017\005\060" +
    "\006\065\007\016\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\004\011\uffc6\001" +
    "\002\000\046\015\uffc3\024\uffc3\025\140\026\131\027\147" +
    "\030\137\031\145\032\133\033\127\052\143\123\135\124" +
    "\134\133\132\134\136\135\142\136\130\137\141\141\144" +
    "\001\002\000\064\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\013\ufff8\016\ufff8\022\ufff8\034\ufff8\040\ufff8" +
    "\043\ufff8\044\ufff8\050\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\101\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8" +
    "\125\ufff8\001\002\000\064\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\013\ufff3\016\ufff3\022\ufff3\034\ufff3" +
    "\040\ufff3\043\ufff3\044\ufff3\050\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\101\ufff3\111\ufff3\112\ufff3\113\ufff3" +
    "\114\ufff3\125\ufff3\001\002\000\050\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\070\247\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\006\011\uffd0" +
    "\015\uffd0\001\002\000\132\002\uffce\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\013\uffce\015\uffce\016\uffce" +
    "\022\uffce\024\uffce\025\140\026\131\027\147\030\137\031" +
    "\145\032\133\033\127\034\uffce\040\uffce\043\uffce\044\uffce" +
    "\050\uffce\052\143\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\101\uffce\111\uffce\112\uffce\113\uffce\114\uffce\123\135" +
    "\124\134\125\uffce\133\132\134\136\135\142\136\130\137" +
    "\141\141\144\001\002\000\072\002\uffcd\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\022\uffcd\024\uffcd\034\uffcd\040\uffcd\043\uffcd\044\uffcd" +
    "\050\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\101" +
    "\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\125\uffcd\001\002" +
    "\000\004\014\250\001\002\000\046\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\044\015\252\025\140" +
    "\026\131\027\147\030\137\031\145\032\133\033\127\052" +
    "\143\123\135\124\134\133\132\134\136\135\142\136\130" +
    "\137\141\141\144\001\002\000\072\002\uffcc\003\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc\015\uffcc" +
    "\016\uffcc\022\uffcc\024\uffcc\034\uffcc\040\uffcc\043\uffcc\044" +
    "\uffcc\050\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\101\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc\125\uffcc\001" +
    "\002\000\064\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\013\ufffa\016\ufffa\022\ufffa\034\ufffa\040\ufffa\043" +
    "\ufffa\044\ufffa\050\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\101\ufffa\111\ufffa\112\ufffa\113\ufffa\114\ufffa\125" +
    "\ufffa\001\002\000\004\111\255\001\002\000\004\014\256" +
    "\001\002\000\046\004\017\005\060\006\065\007\016\014" +
    "\120\016\113\035\112\063\032\064\110\067\121\122\100" +
    "\134\111\135\115\142\076\143\105\144\116\145\077\146" +
    "\102\001\002\000\044\015\260\025\140\026\131\027\147" +
    "\030\137\031\145\032\133\033\127\052\143\123\135\124" +
    "\134\133\132\134\136\135\142\136\130\137\141\141\144" +
    "\001\002\000\004\011\261\001\002\000\004\011\uff6d\001" +
    "\002\000\064\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\013\ufff1\016\ufff1\022\ufff1\034\ufff1\040\ufff1\043" +
    "\ufff1\044\ufff1\050\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\101\ufff1\111\ufff1\112\ufff1\113\ufff1\114\ufff1\125" +
    "\ufff1\001\002\000\004\142\264\001\002\000\006\015\266" +
    "\024\265\001\002\000\046\004\017\005\060\006\065\007" +
    "\016\014\120\016\113\035\112\063\032\064\110\067\121" +
    "\122\100\134\111\135\115\142\076\143\105\144\116\145" +
    "\077\146\102\001\002\000\004\011\uffc5\001\002\000\006" +
    "\015\270\024\236\001\002\000\004\011\uffc4\001\002\000" +
    "\006\017\176\021\272\001\002\000\046\004\017\005\060" +
    "\006\065\007\016\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\046\011\uffcf\015" +
    "\uffcf\025\140\026\131\027\147\030\137\031\145\032\133" +
    "\033\127\052\143\123\135\124\134\133\132\134\136\135" +
    "\142\136\130\137\141\141\144\001\002\000\064\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\016" +
    "\ufffb\022\ufffb\034\ufffb\040\ufffb\043\ufffb\044\ufffb\050\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\101\ufffb\111" +
    "\ufffb\112\ufffb\113\ufffb\114\ufffb\125\ufffb\001\002\000\064" +
    "\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\013" +
    "\uffe9\016\uffe9\022\uffe9\034\uffe9\040\uffe9\043\uffe9\044\uffe9" +
    "\050\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\101" +
    "\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\125\uffe9\001\002" +
    "\000\064\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\013\uffef\016\uffef\022\uffef\034\uffef\040\uffef\043\uffef" +
    "\044\uffef\050\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063" +
    "\uffef\101\uffef\111\uffef\112\uffef\113\uffef\114\uffef\125\uffef" +
    "\001\002\000\004\012\300\001\002\000\016\004\017\005" +
    "\060\006\065\007\016\013\302\016\170\001\002\000\016" +
    "\004\017\005\060\006\065\007\016\013\343\016\170\001" +
    "\002\000\004\011\uff90\001\002\000\004\011\342\001\002" +
    "\000\004\016\307\001\002\000\006\011\uffe1\024\uffe1\001" +
    "\002\000\006\011\uff8d\024\340\001\002\000\012\011\uffe0" +
    "\017\311\021\312\024\uffe0\001\002\000\010\011\uffde\021" +
    "\321\024\uffde\001\002\000\050\004\017\005\060\006\065" +
    "\007\016\014\120\016\113\020\320\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\050\004\017\005" +
    "\060\006\065\007\016\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\070\247\122\100\134\111\135\115\142" +
    "\076\143\105\144\116\145\077\146\102\001\002\000\014" +
    "\011\uffda\015\uffda\017\315\021\uffda\024\uffda\001\002\000" +
    "\014\011\uffd9\015\uffd9\017\176\021\uffd9\024\uffd9\001\002" +
    "\000\004\020\316\001\002\000\016\011\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\021\uffd8\024\uffd8\001\002\000\006\011\uffdf" +
    "\024\uffdf\001\002\000\016\011\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\024\uffd7\001\002\000\050\004\017\005\060" +
    "\006\065\007\016\012\325\014\120\016\113\035\112\063" +
    "\032\064\110\067\121\122\100\134\111\135\115\142\076" +
    "\143\105\144\116\145\077\146\102\001\002\000\006\011" +
    "\uffdc\024\uffdc\001\002\000\006\011\uffdd\024\uffdd\001\002" +
    "\000\046\011\uffdb\024\uffdb\025\140\026\131\027\147\030" +
    "\137\031\145\032\133\033\127\052\143\123\135\124\134" +
    "\133\132\134\136\135\142\136\130\137\141\141\144\001" +
    "\002\000\052\004\017\005\060\006\065\007\016\012\332" +
    "\014\120\016\113\017\174\035\112\063\032\064\110\067" +
    "\121\122\100\134\111\135\115\142\076\143\105\144\116" +
    "\145\077\146\102\001\002\000\006\013\335\024\336\001" +
    "\002\000\006\013\uffd1\024\uffd1\001\002\000\006\013\uffd3" +
    "\024\uffd3\001\002\000\046\013\uffd2\024\uffd2\025\140\026" +
    "\131\027\147\030\137\031\145\032\133\033\127\052\143" +
    "\123\135\124\134\133\132\134\136\135\142\136\130\137" +
    "\141\141\144\001\002\000\050\004\017\005\060\006\065" +
    "\007\016\012\332\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\006\013\334\017" +
    "\176\001\002\000\070\002\uffd6\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\013\uffd6\016\uffd6\022\uffd6\024" +
    "\uffd6\034\uffd6\040\uffd6\043\uffd6\044\uffd6\050\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\101\uffd6\111\uffd6\112" +
    "\uffd6\113\uffd6\114\uffd6\125\uffd6\001\002\000\010\011\uffd5" +
    "\013\uffd5\024\uffd5\001\002\000\050\004\017\005\060\006" +
    "\065\007\016\012\332\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\006\013\uffd4" +
    "\024\uffd4\001\002\000\004\016\307\001\002\000\006\011" +
    "\uffe2\024\uffe2\001\002\000\016\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\013\uff8e\016\uff8e\001\002\000\004\011\uff91\001" +
    "\002\000\004\011\345\001\002\000\016\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\013\uff8f\016\uff8f\001\002\000\064\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\013\uffea" +
    "\016\uffea\022\uffea\034\uffea\040\uffea\043\uffea\044\uffea\050" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\101\uffea" +
    "\111\uffea\112\uffea\113\uffea\114\uffea\125\uffea\001\002\000" +
    "\046\004\017\005\060\006\065\007\016\014\120\016\113" +
    "\035\112\063\032\064\110\067\121\122\100\134\111\135" +
    "\115\142\076\143\105\144\116\145\077\146\102\001\002" +
    "\000\044\024\351\025\140\026\131\027\147\030\137\031" +
    "\145\032\133\033\127\052\143\123\135\124\134\133\132" +
    "\134\136\135\142\136\130\137\141\141\144\001\002\000" +
    "\046\004\017\005\060\006\065\007\016\014\120\016\113" +
    "\035\112\063\032\064\110\067\121\122\100\134\111\135" +
    "\115\142\076\143\105\144\116\145\077\146\102\001\002" +
    "\000\044\015\353\025\140\026\131\027\147\030\137\031" +
    "\145\032\133\033\127\052\143\123\135\124\134\133\132" +
    "\134\136\135\142\136\130\137\141\141\144\001\002\000" +
    "\136\002\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\013\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\040\uff9e\043\uff9e\044\uff9e\050\uff9e\052" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\101\uff9e" +
    "\111\uff9e\112\uff9e\113\uff9e\114\uff9e\116\uff9e\123\uff9e\124" +
    "\uff9e\125\uff9e\133\uff9e\134\uff9e\135\uff9e\136\uff9e\137\uff9e" +
    "\141\uff9e\001\002\000\014\004\017\005\060\006\065\007" +
    "\016\016\170\001\002\000\006\021\243\121\172\001\002" +
    "\000\004\011\376\001\002\000\004\011\362\001\002\000" +
    "\012\016\307\017\uff99\021\uff99\121\uff99\001\002\000\006" +
    "\011\uffe3\024\340\001\002\000\046\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\044\011\364\025\140" +
    "\026\131\027\147\030\137\031\145\032\133\033\127\052" +
    "\143\123\135\124\134\133\132\134\136\135\142\136\130" +
    "\137\141\141\144\001\002\000\014\004\017\005\060\006" +
    "\065\007\016\016\366\001\002\000\004\015\uff6a\001\002" +
    "\000\014\017\174\021\uff96\117\uff96\120\uff96\121\uff96\001" +
    "\002\000\004\015\uff67\001\002\000\012\021\243\117\217" +
    "\120\220\121\172\001\002\000\004\015\374\001\002\000" +
    "\004\015\uff68\001\002\000\004\015\uff69\001\002\000\004" +
    "\012\067\001\002\000\064\002\uff6b\003\uff6b\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\013\uff6b\016\uff6b\022\uff6b\034\uff6b" +
    "\040\uff6b\043\uff6b\044\uff6b\050\uff6b\057\uff6b\060\uff6b\061" +
    "\uff6b\062\uff6b\063\uff6b\101\uff6b\111\uff6b\112\uff6b\113\uff6b" +
    "\114\uff6b\125\uff6b\001\002\000\046\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\044\011\u0100\025\140" +
    "\026\131\027\147\030\137\031\145\032\133\033\127\052" +
    "\143\123\135\124\134\133\132\134\136\135\142\136\130" +
    "\137\141\141\144\001\002\000\014\004\017\005\060\006" +
    "\065\007\016\016\366\001\002\000\004\015\u0102\001\002" +
    "\000\004\012\067\001\002\000\064\002\uff6c\003\uff6c\004" +
    "\uff6c\005\uff6c\006\uff6c\007\uff6c\013\uff6c\016\uff6c\022\uff6c" +
    "\034\uff6c\040\uff6c\043\uff6c\044\uff6c\050\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\062\uff6c\063\uff6c\101\uff6c\111\uff6c\112\uff6c" +
    "\113\uff6c\114\uff6c\125\uff6c\001\002\000\004\014\u0105\001" +
    "\002\000\022\004\017\005\060\006\065\007\016\015\uff81" +
    "\016\170\024\uff81\046\u0109\001\002\000\006\015\uff82\024" +
    "\uff82\001\002\000\006\015\u0110\024\u010f\001\002\000\004" +
    "\016\u010d\001\002\000\014\004\017\005\060\006\065\007" +
    "\016\016\170\001\002\000\004\016\u010b\001\002\000\010" +
    "\015\uff7f\017\311\024\uff7f\001\002\000\006\015\uff7d\024" +
    "\uff7d\001\002\000\010\015\uff80\017\311\024\uff80\001\002" +
    "\000\006\015\uff7e\024\uff7e\001\002\000\016\004\017\005" +
    "\060\006\065\007\016\016\170\046\u0109\001\002\000\004" +
    "\012\uff89\001\002\000\006\015\uff83\024\uff83\001\002\000" +
    "\064\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\013\ufff9\016\ufff9\022\ufff9\034\ufff9\040\ufff9\043\ufff9\044" +
    "\ufff9\050\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\101\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\125\ufff9\001" +
    "\002\000\064\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\013\ufff7\016\ufff7\022\ufff7\034\ufff7\040\ufff7\043" +
    "\ufff7\044\ufff7\050\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\101\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\125" +
    "\ufff7\001\002\000\064\002\uffe6\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\013\uffe6\016\uffe6\022\uffe6\034\uffe6\040" +
    "\uffe6\043\uffe6\044\uffe6\050\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\101\uffe6\111\uffe6\112\uffe6\113\uffe6\114" +
    "\uffe6\125\uffe6\001\002\000\052\004\017\005\060\006\065" +
    "\007\016\012\u0118\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\070\247\122\100\134\111\135\115\142\076" +
    "\143\105\144\116\145\077\146\102\001\002\000\064\002" +
    "\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\013\uffe4" +
    "\016\uffe4\022\uffe4\034\uffe4\040\uffe4\043\uffe4\044\uffe4\050" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\101\uffe4" +
    "\111\uffe4\112\uffe4\113\uffe4\114\uffe4\125\uffe4\001\002\000" +
    "\064\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\013\uffe5\016\uffe5\022\uffe5\034\uffe5\040\uffe5\043\uffe5\044" +
    "\uffe5\050\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\101\uffe5\111\uffe5\112\uffe5\113\uffe5\114\uffe5\125\uffe5\001" +
    "\002\000\004\017\174\001\002\000\046\004\017\005\060" +
    "\006\065\007\016\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\044\024\u011b\025" +
    "\140\026\131\027\147\030\137\031\145\032\133\033\127" +
    "\052\143\123\135\124\134\133\132\134\136\135\142\136" +
    "\130\137\141\141\144\001\002\000\046\004\017\005\060" +
    "\006\065\007\016\014\120\016\113\035\112\063\032\064" +
    "\110\067\121\122\100\134\111\135\115\142\076\143\105" +
    "\144\116\145\077\146\102\001\002\000\044\015\u011d\025" +
    "\140\026\131\027\147\030\137\031\145\032\133\033\127" +
    "\052\143\123\135\124\134\133\132\134\136\135\142\136" +
    "\130\137\141\141\144\001\002\000\004\011\uffe7\001\002" +
    "\000\046\004\017\005\060\006\065\007\016\014\120\016" +
    "\113\035\112\063\032\064\110\067\121\122\100\134\111" +
    "\135\115\142\076\143\105\144\116\145\077\146\102\001" +
    "\002\000\044\015\u0120\025\140\026\131\027\147\030\137" +
    "\031\145\032\133\033\127\052\143\123\135\124\134\133" +
    "\132\134\136\135\142\136\130\137\141\141\144\001\002" +
    "\000\004\012\067\001\002\000\064\002\uff76\003\uff76\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\013\uff76\016\uff76\022\uff76" +
    "\034\uff76\040\uff76\043\uff76\044\uff76\050\uff76\057\uff76\060" +
    "\uff76\061\uff76\062\uff76\063\uff76\101\uff76\111\uff76\112\uff76" +
    "\113\uff76\114\uff76\125\uff76\001\002\000\046\004\017\005" +
    "\060\006\065\007\016\014\120\016\113\035\112\063\032" +
    "\064\110\067\121\122\100\134\111\135\115\142\076\143" +
    "\105\144\116\145\077\146\102\001\002\000\044\015\u0124" +
    "\025\140\026\131\027\147\030\137\031\145\032\133\033" +
    "\127\052\143\123\135\124\134\133\132\134\136\135\142" +
    "\136\130\137\141\141\144\001\002\000\004\012\067\001" +
    "\002\000\066\002\uff7c\003\uff7c\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\013\uff7c\016\uff7c\022\uff7c\034\uff7c\040\uff7c\043" +
    "\uff7c\044\uff7c\050\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\101\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\125" +
    "\uff7c\127\u0126\001\002\000\006\012\067\125\020\001\002" +
    "\000\064\002\uff7b\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007" +
    "\uff7b\013\uff7b\016\uff7b\022\uff7b\034\uff7b\040\uff7b\043\uff7b" +
    "\044\uff7b\050\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\101\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\125\uff7b" +
    "\001\002\000\064\002\uff79\003\uff79\004\uff79\005\uff79\006" +
    "\uff79\007\uff79\013\uff79\016\uff79\022\uff79\034\uff79\040\uff79" +
    "\043\uff79\044\uff79\050\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\063\uff79\101\uff79\111\uff79\112\uff79\113\uff79\114\uff79" +
    "\125\uff79\001\002\000\064\002\uff7a\003\uff7a\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\013\uff7a\016\uff7a\022\uff7a\034\uff7a" +
    "\040\uff7a\043\uff7a\044\uff7a\050\uff7a\057\uff7a\060\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\101\uff7a\111\uff7a\112\uff7a\113\uff7a" +
    "\114\uff7a\125\uff7a\001\002\000\046\004\017\005\060\006" +
    "\065\007\016\014\120\016\113\035\112\063\032\064\110" +
    "\067\121\122\100\134\111\135\115\142\076\143\105\144" +
    "\116\145\077\146\102\001\002\000\044\015\u012c\025\140" +
    "\026\131\027\147\030\137\031\145\032\133\033\127\052" +
    "\143\123\135\124\134\133\132\134\136\135\142\136\130" +
    "\137\141\141\144\001\002\000\004\012\u012d\001\002\000" +
    "\004\040\u012f\001\002\000\010\013\u0134\040\u012f\043\u0136" +
    "\001\002\000\046\004\017\005\060\006\065\007\016\014" +
    "\120\016\113\035\112\063\032\064\110\067\121\122\100" +
    "\134\111\135\115\142\076\143\105\144\116\145\077\146" +
    "\102\001\002\000\010\013\uff70\040\uff70\043\uff70\001\002" +
    "\000\044\025\140\026\131\027\147\030\137\031\145\032" +
    "\133\033\127\052\143\116\u0132\123\135\124\134\133\132" +
    "\134\136\135\142\136\130\137\141\141\144\001\002\000" +
    "\054\003\034\004\017\005\060\006\065\007\016\016\043" +
    "\022\056\034\030\044\046\050\044\057\061\060\022\061" +
    "\023\062\036\063\032\101\014\111\021\112\031\113\006" +
    "\114\004\125\020\001\002\000\062\003\034\004\017\005" +
    "\060\006\065\007\016\013\uff6f\016\043\022\056\034\030" +
    "\040\uff6f\043\uff6f\044\046\050\044\057\061\060\022\061" +
    "\023\062\036\063\032\101\014\111\021\112\031\113\006" +
    "\114\004\125\020\001\002\000\064\002\uff73\003\uff73\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\013\uff73\016\uff73\022\uff73" +
    "\034\uff73\040\uff73\043\uff73\044\uff73\050\uff73\057\uff73\060" +
    "\uff73\061\uff73\062\uff73\063\uff73\101\uff73\111\uff73\112\uff73" +
    "\113\uff73\114\uff73\125\uff73\001\002\000\004\013\u013a\001" +
    "\002\000\004\116\u0138\001\002\000\010\013\uff71\040\uff71" +
    "\043\uff71\001\002\000\054\003\034\004\017\005\060\006" +
    "\065\007\016\016\043\022\056\034\030\044\046\050\044" +
    "\057\061\060\022\061\023\062\036\063\032\101\014\111" +
    "\021\112\031\113\006\114\004\125\020\001\002\000\056" +
    "\003\034\004\017\005\060\006\065\007\016\013\uff6e\016" +
    "\043\022\056\034\030\044\046\050\044\057\061\060\022" +
    "\061\023\062\036\063\032\101\014\111\021\112\031\113" +
    "\006\114\004\125\020\001\002\000\064\002\uff72\003\uff72" +
    "\004\uff72\005\uff72\006\uff72\007\uff72\013\uff72\016\uff72\022" +
    "\uff72\034\uff72\040\uff72\043\uff72\044\uff72\050\uff72\057\uff72" +
    "\060\uff72\061\uff72\062\uff72\063\uff72\101\uff72\111\uff72\112" +
    "\uff72\113\uff72\114\uff72\125\uff72\001\002\000\064\002\uffee" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee\016" +
    "\uffee\022\uffee\034\uffee\040\uffee\043\uffee\044\uffee\050\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\101\uffee\111" +
    "\uffee\112\uffee\113\uffee\114\uffee\125\uffee\001\002\000\064" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\013" +
    "\ufffc\016\ufffc\022\ufffc\034\ufffc\040\ufffc\043\ufffc\044\ufffc" +
    "\050\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\101" +
    "\ufffc\111\ufffc\112\ufffc\113\ufffc\114\ufffc\125\ufffc\001\002" +
    "\000\004\020\320\001\002\000\006\016\u0143\017\315\001" +
    "\002\000\014\011\uffe0\014\u0140\017\311\021\312\024\uffe0" +
    "\001\002\000\022\004\017\005\060\006\065\007\016\015" +
    "\uff81\016\170\024\uff81\046\u0109\001\002\000\006\015\u0142" +
    "\024\u010f\001\002\000\004\012\uff8b\001\002\000\004\014" +
    "\u0144\001\002\000\022\004\017\005\060\006\065\007\016" +
    "\015\uff81\016\170\024\uff81\046\u0109\001\002\000\006\015" +
    "\u0146\024\u010f\001\002\000\004\012\uff8a\001\002\000\004" +
    "\011\uff74\001\002\000\064\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\013\uffeb\016\uffeb\022\uffeb\034\uffeb" +
    "\040\uffeb\043\uffeb\044\uffeb\050\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\101\uffeb\111\uffeb\112\uffeb\113\uffeb" +
    "\114\uffeb\125\uffeb\001\002\000\004\011\uff75\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\074\003\010\004\061\005\041\007\004\010" +
    "\032\012\056\013\034\014\062\015\011\017\026\020\050" +
    "\021\044\022\036\023\012\024\023\027\014\037\047\043" +
    "\006\053\040\062\007\063\063\064\052\065\024\066\053" +
    "\072\037\074\054\100\025\101\051\102\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\u013d\044\360\045\304\001\001\000\002\001\001\000" +
    "\070\004\072\005\041\007\004\010\032\013\034\014\062" +
    "\015\011\017\026\020\050\021\044\022\036\023\012\024" +
    "\023\027\014\037\047\043\006\053\040\062\007\063\063" +
    "\064\052\065\024\066\053\072\037\074\054\100\025\101" +
    "\051\102\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\253\001\001\000\004\035" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\103\007\106\010\116\013\034\030\100\043" +
    "\105\066\074\072\121\101\102\102\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\003\067\004\061" +
    "\005\041\007\004\010\032\013\034\014\062\015\011\017" +
    "\026\020\050\021\044\022\036\023\012\024\023\027\014" +
    "\037\047\043\006\053\040\062\007\063\063\064\052\065" +
    "\024\066\053\072\037\074\054\100\025\101\051\102\046" +
    "\001\001\000\070\004\072\005\041\007\004\010\032\013" +
    "\034\014\062\015\011\017\026\020\050\021\044\022\036" +
    "\023\012\024\023\027\014\037\047\043\006\053\040\062" +
    "\007\063\063\064\052\065\024\066\053\072\037\074\054" +
    "\100\025\101\051\102\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\225\007\106\010\116\013\034\043\105\066\074\072\121" +
    "\101\102\102\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\211\007\106\010\116\013\034\043\105\066\074" +
    "\072\121\101\102\102\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\034\043\105" +
    "\101\170\102\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\125\007\106\010\116\013\034\043\105" +
    "\066\074\072\121\101\102\102\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\166\007" +
    "\106\010\116\013\034\043\105\066\074\072\121\101\102" +
    "\102\046\001\001\000\024\006\165\007\106\010\116\013" +
    "\034\043\105\066\074\072\121\101\102\102\046\001\001" +
    "\000\024\006\164\007\106\010\116\013\034\043\105\066" +
    "\074\072\121\101\102\102\046\001\001\000\024\006\163" +
    "\007\106\010\116\013\034\043\105\066\074\072\121\101" +
    "\102\102\046\001\001\000\024\006\162\007\106\010\116" +
    "\013\034\043\105\066\074\072\121\101\102\102\046\001" +
    "\001\000\024\006\161\007\106\010\116\013\034\043\105" +
    "\066\074\072\121\101\102\102\046\001\001\000\024\006" +
    "\160\007\106\010\116\013\034\043\105\066\074\072\121" +
    "\101\102\102\046\001\001\000\024\006\157\007\106\010" +
    "\116\013\034\043\105\066\074\072\121\101\102\102\046" +
    "\001\001\000\024\006\156\007\106\010\116\013\034\043" +
    "\105\066\074\072\121\101\102\102\046\001\001\000\024" +
    "\006\155\007\106\010\116\013\034\043\105\066\074\072" +
    "\121\101\102\102\046\001\001\000\024\006\154\007\106" +
    "\010\116\013\034\043\105\066\074\072\121\101\102\102" +
    "\046\001\001\000\024\006\153\007\106\010\116\013\034" +
    "\043\105\066\074\072\121\101\102\102\046\001\001\000" +
    "\002\001\001\000\024\006\151\007\106\010\116\013\034" +
    "\043\105\066\074\072\121\101\102\102\046\001\001\000" +
    "\024\006\150\007\106\010\116\013\034\043\105\066\074" +
    "\072\121\101\102\102\046\001\001\000\002\001\001\000" +
    "\024\006\147\007\106\010\116\013\034\043\105\066\074" +
    "\072\121\101\102\102\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\034\043\105\102\172\001\001\000" +
    "\004\035\174\001\001\000\024\006\200\007\106\010\116" +
    "\013\034\043\105\066\074\072\121\101\102\102\046\001" +
    "\001\000\002\001\001\000\024\006\176\007\106\010\116" +
    "\013\034\043\105\066\074\072\121\101\102\102\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\204\007\106\010\116\013" +
    "\034\043\105\066\074\070\203\071\205\072\121\101\102" +
    "\102\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\207\007\106\010\116\013\034" +
    "\043\105\066\074\072\121\101\102\102\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\213\007\106\010\116\013\034\043\105\066\074\072" +
    "\121\101\102\102\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\034\043\105\102\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\204\007\106\010\116\013\034\043\105\066\074\070" +
    "\222\071\205\072\121\101\102\102\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\234\007\106\010\116\013\034\036\233\043" +
    "\105\066\074\072\121\101\102\102\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\237\007\106\010\116\013\034\043\105\066\074\072\121" +
    "\101\102\102\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\244" +
    "\007\106\010\116\013\034\043\105\066\074\072\121\101" +
    "\102\102\046\103\245\104\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\250\007\106\010\116\013\034\043\105\066\074" +
    "\072\121\101\102\102\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\256\007\106\010\116\013\034\043" +
    "\105\066\074\072\121\101\102\102\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\234" +
    "\007\106\010\116\013\034\036\266\043\105\066\074\072" +
    "\121\101\102\102\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\272\007\106\010\116\013\034\043\105\066\074\072\121" +
    "\101\102\102\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\034\043\303\073\302\076\300\001\001\000" +
    "\010\013\034\043\303\073\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\305\045\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\307\033\312" +
    "\035\313\001\001\000\002\001\001\000\024\006\200\007" +
    "\106\010\116\013\034\043\105\066\074\072\121\101\102" +
    "\102\046\001\001\000\030\006\244\007\106\010\116\013" +
    "\034\043\105\066\074\072\121\101\102\102\046\103\245" +
    "\104\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\323\007\106\010\116\013\034\042" +
    "\321\043\105\066\074\072\121\077\322\101\102\102\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\330\007\106\010\116\013\034\035\332" +
    "\040\327\041\325\042\326\043\105\066\074\072\121\101" +
    "\102\102\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\330\007" +
    "\106\010\116\013\034\040\327\041\325\042\326\043\105" +
    "\066\074\072\121\101\102\102\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\330" +
    "\007\106\010\116\013\034\040\336\042\326\043\105\066" +
    "\074\072\121\101\102\102\046\001\001\000\002\001\001" +
    "\000\004\045\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\347\007\106\010\116\013" +
    "\034\043\105\066\074\072\121\101\102\102\046\001\001" +
    "\000\002\001\001\000\024\006\351\007\106\010\116\013" +
    "\034\043\105\066\074\072\121\101\102\102\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\355\013" +
    "\034\017\356\043\357\101\354\102\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\360\045\304\001\001\000\002\001\001\000\024\006\362" +
    "\007\106\010\116\013\034\043\105\066\074\072\121\101" +
    "\102\102\046\001\001\000\002\001\001\000\024\007\364" +
    "\010\372\013\034\017\371\031\370\037\366\043\105\101" +
    "\367\102\046\001\001\000\002\001\001\000\004\035\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\374" +
    "\001\001\000\002\001\001\000\024\006\376\007\106\010" +
    "\116\013\034\043\105\066\074\072\121\101\102\102\046" +
    "\001\001\000\002\001\001\000\024\007\364\010\372\013" +
    "\034\017\371\031\u0100\037\366\043\105\101\367\102\046" +
    "\001\001\000\002\001\001\000\004\002\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\034\043\u0107" +
    "\060\u0105\061\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\034\043\u0109\001\001" +
    "\000\002\001\001\000\010\032\u010b\033\312\035\313\001" +
    "\001\000\002\001\001\000\010\032\u010d\033\312\035\313" +
    "\001\001\000\002\001\001\000\010\013\034\043\u0107\060" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\244\007\106\010\116\013\034\043\105\066\074\072\121" +
    "\077\u0116\101\102\102\046\103\245\104\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\332\001\001" +
    "\000\024\006\u0119\007\106\010\116\013\034\043\105\066" +
    "\074\072\121\101\102\102\046\001\001\000\002\001\001" +
    "\000\024\006\u011b\007\106\010\116\013\034\043\105\066" +
    "\074\072\121\101\102\102\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\u011e\007\106\010\116\013" +
    "\034\043\105\066\074\072\121\101\102\102\046\001\001" +
    "\000\002\001\001\000\004\002\u0120\001\001\000\002\001" +
    "\001\000\024\006\u0122\007\106\010\116\013\034\043\105" +
    "\066\074\072\121\101\102\102\046\001\001\000\002\001" +
    "\001\000\004\002\u0124\001\001\000\002\001\001\000\010" +
    "\002\u0127\024\u0128\025\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\u012a\007\106" +
    "\010\116\013\034\043\105\066\074\072\121\101\102\102" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\u012f\052\u012d\001\001\000\006\050\u0136\051\u0134\001" +
    "\001\000\024\006\u0130\007\106\010\116\013\034\043\105" +
    "\066\074\072\121\101\102\102\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\003\u0132\004\061\005\041" +
    "\007\004\010\032\013\034\014\062\015\011\017\026\020" +
    "\050\021\044\022\036\023\012\024\023\027\014\037\047" +
    "\043\006\053\040\062\007\063\063\064\052\065\024\066" +
    "\053\072\037\074\054\100\025\101\051\102\046\001\001" +
    "\000\070\004\072\005\041\007\004\010\032\013\034\014" +
    "\062\015\011\017\026\020\050\021\044\022\036\023\012" +
    "\024\023\027\014\037\047\043\006\053\040\062\007\063" +
    "\063\064\052\065\024\066\053\072\037\074\054\100\025" +
    "\101\051\102\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\003\u0138" +
    "\004\061\005\041\007\004\010\032\013\034\014\062\015" +
    "\011\017\026\020\050\021\044\022\036\023\012\024\023" +
    "\027\014\037\047\043\006\053\040\062\007\063\063\064" +
    "\052\065\024\066\053\072\037\074\054\100\025\101\051" +
    "\102\046\001\001\000\070\004\072\005\041\007\004\010" +
    "\032\013\034\014\062\015\011\017\026\020\050\021\044" +
    "\022\036\023\012\024\023\027\014\037\047\043\006\053" +
    "\040\062\007\063\063\064\052\065\024\066\053\072\037" +
    "\074\054\100\025\101\051\102\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\307\033\312\035\313\001" +
    "\001\000\012\013\034\043\u0107\060\u0105\061\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\034\043\u0107\060\u0105\061\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= BREAK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= CONTINUE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= DECLARACIONCONSTANTE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= CONCATENAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Concatenar inst = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NDIM ::= LEXP 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= multi ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= tatexto pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aTexto(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= CONCATENAR 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Concatenar v = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONCATENAR ::= tconcatenar pari EXP coma EXP pard 
            {
              Concatenar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Concatenar(exp1,exp2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENAR",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AUMENTO ::= ACCESO aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECREMENTO ::= ACCESO decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ORIGEN ::= TIPO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo id = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id.nombreTipo(), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CABECERAMET ::= TIPO NDIMVACIO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ACTUALIZACION ::= AUMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACTUALIZACION ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ACTUALIZACION ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ACTUALIZACION ::= ASIGV 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
