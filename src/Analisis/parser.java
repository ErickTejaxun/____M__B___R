
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.InputOutput.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\012\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\003\000\002\110\005\000\002\106\006" +
    "\000\002\111\006\000\002\107\006\000\002\107\010\000" +
    "\002\100\010\000\002\064\004\000\002\046\004\000\002" +
    "\046\004\000\002\005\004\000\002\044\005\000\002\044" +
    "\003\000\002\045\003\000\002\045\005\000\002\045\004" +
    "\000\002\045\006\000\002\045\006\000\002\045\006\000" +
    "\002\032\003\000\002\032\003\000\002\033\005\000\002" +
    "\033\004\000\002\077\005\000\002\042\005\000\002\041" +
    "\005\000\002\041\003\000\002\040\003\000\002\040\003" +
    "\000\002\017\005\000\002\037\006\000\002\104\003\000" +
    "\002\104\003\000\002\103\006\000\002\070\003\000\002" +
    "\070\002\000\002\071\005\000\002\071\003\000\002\014" +
    "\006\000\002\014\010\000\002\015\006\000\002\015\010" +
    "\000\002\036\005\000\002\036\003\000\002\035\006\000" +
    "\002\035\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\006\003\000\002\006" +
    "\006\000\002\006\003\000\002\006\006\000\002\006\006" +
    "\000\002\006\010\000\002\072\010\000\002\007\004\000" +
    "\002\010\004\000\002\101\005\000\002\101\003\000\002" +
    "\102\003\000\002\102\004\000\002\043\003\000\002\043" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\074\007\000\002\074\006\000" +
    "\002\076\005\000\002\076\004\000\002\073\004\000\002" +
    "\062\004\000\002\063\007\000\002\063\010\000\002\063" +
    "\007\000\002\002\005\000\002\002\004\000\002\065\005" +
    "\000\002\065\004\000\002\030\003\000\002\061\005\000" +
    "\002\061\003\000\002\061\002\000\002\060\004\000\002" +
    "\060\005\000\002\060\005\000\002\060\006\000\002\024" +
    "\007\000\002\024\011\000\002\025\003\000\002\025\003" +
    "\000\002\066\010\000\002\066\006\000\002\020\007\000" +
    "\002\023\003\000\002\022\003\000\002\053\011\000\002" +
    "\053\012\000\002\052\004\000\002\052\003\000\002\050" +
    "\006\000\002\051\005\000\002\021\010\000\002\027\013" +
    "\000\002\027\013\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\064\003\040\004\021\005\070\006\075\007" +
    "\017\016\051\022\066\034\034\044\055\050\052\052\022" +
    "\053\015\063\071\064\026\065\045\066\027\067\042\070" +
    "\036\101\047\106\014\115\024\116\035\117\006\120\004" +
    "\131\023\001\002\000\004\011\uff69\001\002\000\004\011" +
    "\u016e\001\002\000\004\011\uff68\001\002\000\016\016\u0166" +
    "\017\u0164\021\uff8d\123\uff8d\124\uff8d\125\uff8d\001\002\000" +
    "\074\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\013\ufff6\016\ufff6\022\ufff6\034\ufff6\040\ufff6\043\ufff6\044" +
    "\ufff6\050\ufff6\052\ufff6\053\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\101\ufff6\106\ufff6\115\ufff6\116" +
    "\ufff6\117\ufff6\120\ufff6\131\ufff6\001\002\000\066\002\000" +
    "\003\040\004\021\005\070\006\075\007\017\016\051\022" +
    "\066\034\034\044\055\050\052\052\022\053\015\063\071" +
    "\064\026\065\045\066\027\067\042\070\036\101\047\106" +
    "\014\115\024\116\035\117\006\120\004\131\023\001\002" +
    "\000\004\011\u0163\001\002\000\004\011\u0162\001\002\000" +
    "\004\014\u0151\001\002\000\004\014\u014e\001\002\000\074" +
    "\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\013" +
    "\ufff0\016\ufff0\022\ufff0\034\ufff0\040\ufff0\043\ufff0\044\ufff0" +
    "\050\ufff0\052\ufff0\053\ufff0\063\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\101\ufff0\106\ufff0\115\ufff0\116\ufff0" +
    "\117\ufff0\120\ufff0\131\ufff0\001\002\000\160\002\uff86\003" +
    "\uff86\004\uff86\005\uff86\006\uff86\007\uff86\011\uff86\013\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\040\uff86\043\uff86\044\uff86\050\uff86\052" +
    "\uff86\053\uff86\056\uff86\063\uff86\064\uff86\065\uff86\066\uff86" +
    "\067\uff86\070\uff86\101\uff86\106\uff86\115\uff86\116\uff86\117" +
    "\uff86\120\uff86\122\uff86\123\uff86\124\uff86\125\uff86\127\uff86" +
    "\130\uff86\131\uff86\137\uff86\140\uff86\141\uff86\142\uff86\143" +
    "\uff86\145\uff86\001\002\000\004\011\u014d\001\002\000\160" +
    "\002\uff89\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\011" +
    "\uff89\013\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\040\uff89\043\uff89\044\uff89" +
    "\050\uff89\052\uff89\053\uff89\056\uff89\063\uff89\064\uff89\065" +
    "\uff89\066\uff89\067\uff89\070\uff89\101\uff89\106\uff89\115\uff89" +
    "\116\uff89\117\uff89\120\uff89\122\uff89\123\uff89\124\uff89\125" +
    "\uff89\127\uff89\130\uff89\131\uff89\137\uff89\140\uff89\141\uff89" +
    "\142\uff89\143\uff89\145\uff89\001\002\000\004\014\u0147\001" +
    "\002\000\004\014\u013f\001\002\000\004\014\u013b\001\002" +
    "\000\004\011\u013a\001\002\000\004\014\u0135\001\002\000" +
    "\004\016\u0131\001\002\000\074\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\013\ufff5\016\ufff5\022\ufff5\034" +
    "\ufff5\040\ufff5\043\ufff5\044\ufff5\050\ufff5\052\ufff5\053\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\101" +
    "\ufff5\106\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5\131\ufff5" +
    "\001\002\000\074\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\013\ufff4\016\ufff4\022\ufff4\034\ufff4\040\ufff4" +
    "\043\ufff4\044\ufff4\050\ufff4\052\ufff4\053\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\101\ufff4\106\ufff4" +
    "\115\ufff4\116\ufff4\117\ufff4\120\ufff4\131\ufff4\001\002\000" +
    "\004\011\u012f\001\002\000\004\011\u012e\001\002\000\004" +
    "\016\u0120\001\002\000\004\014\u0108\001\002\000\004\014" +
    "\u0103\001\002\000\004\011\u0102\001\002\000\074\002\uffe4" +
    "\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\013\uffe4\016" +
    "\uffe4\022\uffe4\034\uffe4\040\uffe4\043\uffe4\044\uffe4\050\uffe4" +
    "\052\uffe4\053\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\101\uffe4\106\uffe4\115\uffe4\116\uffe4\117\uffe4" +
    "\120\uffe4\131\uffe4\001\002\000\160\002\uff8b\003\uff8b\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\013\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\040\uff8b\043\uff8b\044\uff8b\050\uff8b\052\uff8b\053" +
    "\uff8b\056\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b" +
    "\070\uff8b\101\uff8b\106\uff8b\115\uff8b\116\uff8b\117\uff8b\120" +
    "\uff8b\122\uff8b\123\uff8b\124\uff8b\125\uff8b\127\uff8b\130\uff8b" +
    "\131\uff8b\137\uff8b\140\uff8b\141\uff8b\142\uff8b\143\uff8b\145" +
    "\uff8b\001\002\000\004\016\333\001\002\000\004\011\332" +
    "\001\002\000\004\011\331\001\002\000\004\014\326\001" +
    "\002\000\074\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\013\uffed\016\uffed\022\uffed\034\uffed\040\uffed\043" +
    "\uffed\044\uffed\050\uffed\052\uffed\053\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\070\uffed\101\uffed\106\uffed\115" +
    "\uffed\116\uffed\117\uffed\120\uffed\131\uffed\001\002\000\004" +
    "\014\324\001\002\000\004\011\323\001\002\000\020\014" +
    "\216\016\uff8a\017\207\021\uff8a\123\uff8a\124\uff8a\125\uff8a" +
    "\001\002\000\004\014\312\001\002\000\004\011\311\001" +
    "\002\000\004\011\310\001\002\000\004\012\077\001\002" +
    "\000\160\002\uff8e\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\011\uff8e\013\uff8e\015\uff8e\016\uff8e\017\207\020\uff8e" +
    "\021\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\040\uff8e\043\uff8e" +
    "\044\uff8e\050\uff8e\052\uff8e\053\uff8e\056\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\101\uff8e\106\uff8e" +
    "\115\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e\124" +
    "\uff8e\125\uff8e\127\uff8e\130\uff8e\131\uff8e\137\uff8e\140\uff8e" +
    "\141\uff8e\142\uff8e\143\uff8e\145\uff8e\001\002\000\004\011" +
    "\302\001\002\000\074\002\ufff2\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\013\ufff2\016\ufff2\022\ufff2\034\ufff2\040" +
    "\ufff2\043\ufff2\044\ufff2\050\ufff2\052\ufff2\053\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\101\ufff2\106" +
    "\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2\131\ufff2\001\002" +
    "\000\012\021\272\123\240\124\241\125\237\001\002\000" +
    "\074\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\013\uffec\016\uffec\022\uffec\034\uffec\040\uffec\043\uffec\044" +
    "\uffec\050\uffec\052\uffec\053\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\101\uffec\106\uffec\115\uffec\116" +
    "\uffec\117\uffec\120\uffec\131\uffec\001\002\000\004\011\271" +
    "\001\002\000\004\011\270\001\002\000\004\011\267\001" +
    "\002\000\004\014\256\001\002\000\004\002\255\001\002" +
    "\000\160\002\uff87\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\011\uff87\013\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\040\uff87\043\uff87" +
    "\044\uff87\050\uff87\052\uff87\053\uff87\056\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\070\uff87\101\uff87\106\uff87" +
    "\115\uff87\116\uff87\117\uff87\120\uff87\122\uff87\123\uff87\124" +
    "\uff87\125\uff87\127\uff87\130\uff87\131\uff87\137\uff87\140\uff87" +
    "\141\uff87\142\uff87\143\uff87\145\uff87\001\002\000\056\004" +
    "\021\005\070\006\075\007\017\011\127\014\133\016\126" +
    "\035\125\070\036\071\122\072\123\073\115\074\134\076" +
    "\112\126\110\140\124\141\130\146\106\147\117\150\131" +
    "\151\107\152\113\001\002\000\074\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\013\ufffe\016\ufffe\022\ufffe" +
    "\034\ufffe\040\ufffe\043\ufffe\044\ufffe\050\ufffe\052\ufffe\053" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\101\ufffe\106\ufffe\115\ufffe\116\ufffe\117\ufffe\120\ufffe\131" +
    "\ufffe\001\002\000\004\011\104\001\002\000\004\012\077" +
    "\001\002\000\160\002\uff88\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\011\uff88\013\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\040\uff88" +
    "\043\uff88\044\uff88\050\uff88\052\uff88\053\uff88\056\uff88\063" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\101\uff88" +
    "\106\uff88\115\uff88\116\uff88\117\uff88\120\uff88\122\uff88\123" +
    "\uff88\124\uff88\125\uff88\127\uff88\130\uff88\131\uff88\137\uff88" +
    "\140\uff88\141\uff88\142\uff88\143\uff88\145\uff88\001\002\000" +
    "\074\002\uff80\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\013\uff80\016\uff80\022\uff80\034\uff80\040\uff80\043\uff80\044" +
    "\uff80\050\uff80\052\uff80\053\uff80\063\uff80\064\uff80\065\uff80" +
    "\066\uff80\067\uff80\070\uff80\101\uff80\106\uff80\115\uff80\116" +
    "\uff80\117\uff80\120\uff80\131\uff80\001\002\000\066\003\040" +
    "\004\021\005\070\006\075\007\017\013\101\016\051\022" +
    "\066\034\034\044\055\050\052\052\022\053\015\063\071" +
    "\064\026\065\045\066\027\067\042\070\036\101\047\106" +
    "\014\115\024\116\035\117\006\120\004\131\023\001\002" +
    "\000\066\003\040\004\021\005\070\006\075\007\017\013" +
    "\102\016\051\022\066\034\034\044\055\050\052\052\022" +
    "\053\015\063\071\064\026\065\045\066\027\067\042\070" +
    "\036\101\047\106\014\115\024\116\035\117\006\120\004" +
    "\131\023\001\002\000\100\002\uff7b\003\uff7b\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\013\uff7b\016\uff7b\022\uff7b\034\uff7b" +
    "\040\uff7b\043\uff7b\044\uff7b\050\uff7b\051\uff7b\052\uff7b\053" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\101\uff7b\106\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\131" +
    "\uff7b\133\uff7b\001\002\000\100\002\uff7c\003\uff7c\004\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\013\uff7c\016\uff7c\022\uff7c\034" +
    "\uff7c\040\uff7c\043\uff7c\044\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070" +
    "\uff7c\101\uff7c\106\uff7c\115\uff7c\116\uff7c\117\uff7c\120\uff7c" +
    "\131\uff7c\133\uff7c\001\002\000\074\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\013\uffff\016\uffff\022\uffff" +
    "\034\uffff\040\uffff\043\uffff\044\uffff\050\uffff\052\uffff\053" +
    "\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff" +
    "\101\uffff\106\uffff\115\uffff\116\uffff\117\uffff\120\uffff\131" +
    "\uffff\001\002\000\074\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\013\ufffd\016\ufffd\022\ufffd\034\ufffd\040" +
    "\ufffd\043\ufffd\044\ufffd\050\ufffd\052\ufffd\053\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\101\ufffd\106" +
    "\ufffd\115\ufffd\116\ufffd\117\ufffd\120\ufffd\131\ufffd\001\002" +
    "\000\146\002\uffa2\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\013\uffa2\015\uffa2\016\uffa2\020\uffa2\022\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\040\uffa2\043\uffa2\044\uffa2\050\uffa2" +
    "\052\uffa2\053\uffa2\056\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\101\uffa2\106\uffa2\115\uffa2\116\uffa2" +
    "\117\uffa2\120\uffa2\122\uffa2\127\uffa2\130\uffa2\131\uffa2\137" +
    "\uffa2\140\uffa2\141\uffa2\142\uffa2\143\uffa2\145\uffa2\001\002" +
    "\000\146\002\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\011\uff9e\013\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\040\uff9e\043\uff9e\044\uff9e\050\uff9e" +
    "\052\uff9e\053\uff9e\056\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\101\uff9e\106\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\120\uff9e\122\uff9e\127\uff9e\130\uff9e\131\uff9e\137" +
    "\uff9e\140\uff9e\141\uff9e\142\uff9e\143\uff9e\145\uff9e\001\002" +
    "\000\146\002\uffa0\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\011\uffa0\013\uffa0\015\uffa0\016\uffa0\020\uffa0\022\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\040\uffa0\043\uffa0\044\uffa0\050\uffa0" +
    "\052\uffa0\053\uffa0\056\uffa0\063\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\101\uffa0\106\uffa0\115\uffa0\116\uffa0" +
    "\117\uffa0\120\uffa0\122\uffa0\127\uffa0\130\uffa0\131\uffa0\137" +
    "\uffa0\140\uffa0\141\uffa0\142\uffa0\143\uffa0\145\uffa0\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\004\011\253\001\002" +
    "\000\004\014\246\001\002\000\146\002\uff9f\003\uff9f\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\013\uff9f\015\uff9f" +
    "\016\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\040\uff9f" +
    "\043\uff9f\044\uff9f\050\uff9f\052\uff9f\053\uff9f\056\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\101\uff9f" +
    "\106\uff9f\115\uff9f\116\uff9f\117\uff9f\120\uff9f\122\uff9f\127" +
    "\uff9f\130\uff9f\131\uff9f\137\uff9f\140\uff9f\141\uff9f\142\uff9f" +
    "\143\uff9f\145\uff9f\001\002\000\154\002\uff9c\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\011\uff9c\013\uff9c\015\uff9c" +
    "\016\uff9c\020\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c" +
    "\043\uff9c\044\uff9c\050\uff9c\052\uff9c\053\uff9c\056\uff9c\063" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\101\uff9c" +
    "\106\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\122\uff9c\123" +
    "\240\124\241\125\237\127\uff9c\130\uff9c\131\uff9c\137\uff9c" +
    "\140\uff9c\141\uff9c\142\uff9c\143\uff9c\145\uff9c\001\002\000" +
    "\004\014\234\001\002\000\044\011\uff78\025\153\026\144" +
    "\027\162\030\152\031\161\032\146\033\142\056\156\127" +
    "\150\130\147\137\145\140\151\141\155\142\143\143\154" +
    "\145\157\001\002\000\146\002\uff9d\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\011\uff9d\013\uff9d\015\uff9d\016\uff9d" +
    "\020\uff9d\022\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\043\uff9d" +
    "\044\uff9d\050\uff9d\052\uff9d\053\uff9d\056\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\101\uff9d\106\uff9d" +
    "\115\uff9d\116\uff9d\117\uff9d\120\uff9d\122\uff9d\127\uff9d\130" +
    "\uff9d\131\uff9d\137\uff9d\140\uff9d\141\uff9d\142\uff9d\143\uff9d" +
    "\145\uff9d\001\002\000\160\002\uff8d\003\uff8d\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\011\uff8d\013\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\040\uff8d\043\uff8d\044\uff8d\050\uff8d\052\uff8d\053\uff8d\056" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d" +
    "\101\uff8d\106\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\122" +
    "\uff8d\123\uff8d\124\uff8d\125\uff8d\127\uff8d\130\uff8d\131\uff8d" +
    "\137\uff8d\140\uff8d\141\uff8d\142\uff8d\143\uff8d\145\uff8d\001" +
    "\002\000\146\002\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\013\uffa4\015\uffa4\016\uffa4\020\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\040\uffa4\043\uffa4\044\uffa4\050" +
    "\uffa4\052\uffa4\053\uffa4\056\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\101\uffa4\106\uffa4\115\uffa4\116" +
    "\uffa4\117\uffa4\120\uffa4\122\uffa4\127\uffa4\130\uffa4\131\uffa4" +
    "\137\uffa4\140\uffa4\141\uffa4\142\uffa4\143\uffa4\145\uffa4\001" +
    "\002\000\004\014\231\001\002\000\004\014\226\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\146\002\uff98\003\uff98" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\013\uff98\015" +
    "\uff98\016\uff98\020\uff98\022\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\040" +
    "\uff98\043\uff98\044\uff98\050\uff98\052\uff98\053\uff98\056\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\101" +
    "\uff98\106\uff98\115\uff98\116\uff98\117\uff98\120\uff98\122\uff98" +
    "\127\uff98\130\uff98\131\uff98\137\uff98\140\uff98\141\uff98\142" +
    "\uff98\143\uff98\145\uff98\001\002\000\160\002\uff8a\003\uff8a" +
    "\004\uff8a\005\uff8a\006\uff8a\007\uff8a\011\uff8a\013\uff8a\014" +
    "\216\015\uff8a\016\uff8a\017\uff8a\020\uff8a\022\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\040\uff8a\043\uff8a\044\uff8a\050\uff8a\052\uff8a" +
    "\053\uff8a\056\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\101\uff8a\106\uff8a\115\uff8a\116\uff8a\117\uff8a" +
    "\120\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\127\uff8a\130" +
    "\uff8a\131\uff8a\137\uff8a\140\uff8a\141\uff8a\142\uff8a\143\uff8a" +
    "\145\uff8a\001\002\000\074\002\uff79\003\uff79\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\013\uff79\016\uff79\022\uff79\034\uff79" +
    "\040\uff79\043\uff79\044\uff79\050\uff79\052\uff79\053\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\101\uff79" +
    "\106\uff79\115\uff79\116\uff79\117\uff79\120\uff79\131\uff79\001" +
    "\002\000\014\004\021\005\070\006\075\007\017\016\203" +
    "\001\002\000\146\002\uffa1\003\uffa1\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\011\uffa1\013\uffa1\015\uffa1\016\uffa1\020\uffa1" +
    "\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\040\uffa1\043\uffa1\044\uffa1" +
    "\050\uffa1\052\uffa1\053\uffa1\056\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\101\uffa1\106\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\120\uffa1\122\uffa1\127\uffa1\130\uffa1\131" +
    "\uffa1\137\uffa1\140\uffa1\141\uffa1\142\uffa1\143\uffa1\145\uffa1" +
    "\001\002\000\146\002\uffa3\003\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\011\uffa3\013\uffa3\015\uffa3\016\uffa3\020\uffa3" +
    "\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\040\uffa3\043\uffa3\044\uffa3" +
    "\050\uffa3\052\uffa3\053\uffa3\056\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\101\uffa3\106\uffa3\115\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\122\uffa3\127\uffa3\130\uffa3\131" +
    "\uffa3\137\uffa3\140\uffa3\141\uffa3\142\uffa3\143\uffa3\145\uffa3" +
    "\001\002\000\054\004\021\005\070\006\075\007\017\014" +
    "\133\016\126\035\125\070\036\071\122\072\123\073\115" +
    "\074\134\076\112\126\110\140\124\141\130\146\106\147" +
    "\117\150\131\151\107\152\113\001\002\000\004\014\136" +
    "\001\002\000\146\002\uff96\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\011\uff96\013\uff96\015\uff96\016\uff96\020\uff96" +
    "\022\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\040\uff96\043\uff96\044\uff96" +
    "\050\uff96\052\uff96\053\uff96\056\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\067\uff96\070\uff96\101\uff96\106\uff96\115\uff96" +
    "\116\uff96\117\uff96\120\uff96\122\uff96\127\uff96\130\uff96\131" +
    "\uff96\137\uff96\140\uff96\141\uff96\142\uff96\143\uff96\145\uff96" +
    "\001\002\000\004\016\137\001\002\000\004\015\140\001" +
    "\002\000\146\002\uff97\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\011\uff97\013\uff97\015\uff97\016\uff97\020\uff97\022" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\040\uff97\043\uff97\044\uff97\050" +
    "\uff97\052\uff97\053\uff97\056\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\101\uff97\106\uff97\115\uff97\116" +
    "\uff97\117\uff97\120\uff97\122\uff97\127\uff97\130\uff97\131\uff97" +
    "\137\uff97\140\uff97\141\uff97\142\uff97\143\uff97\145\uff97\001" +
    "\002\000\044\015\160\025\153\026\144\027\162\030\152" +
    "\031\161\032\146\033\142\056\156\127\150\130\147\137" +
    "\145\140\151\141\155\142\143\143\154\145\157\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\054\004\021\005\070" +
    "\006\075\007\017\014\133\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\054\004\021\005\070\006\075\007\017\014\133" +
    "\016\126\035\125\070\036\071\122\072\123\073\115\074" +
    "\134\076\112\126\110\140\124\141\130\146\106\147\117" +
    "\150\131\151\107\152\113\001\002\000\054\004\021\005" +
    "\070\006\075\007\017\014\133\016\126\035\125\070\036" +
    "\071\122\072\123\073\115\074\134\076\112\126\110\140" +
    "\124\141\130\146\106\147\117\150\131\151\107\152\113" +
    "\001\002\000\054\004\021\005\070\006\075\007\017\014" +
    "\133\016\126\035\125\070\036\071\122\072\123\073\115" +
    "\074\134\076\112\126\110\140\124\141\130\146\106\147" +
    "\117\150\131\151\107\152\113\001\002\000\054\004\021" +
    "\005\070\006\075\007\017\014\133\016\126\035\125\070" +
    "\036\071\122\072\123\073\115\074\134\076\112\126\110" +
    "\140\124\141\130\146\106\147\117\150\131\151\107\152" +
    "\113\001\002\000\054\004\021\005\070\006\075\007\017" +
    "\014\133\016\126\035\125\070\036\071\122\072\123\073" +
    "\115\074\134\076\112\126\110\140\124\141\130\146\106" +
    "\147\117\150\131\151\107\152\113\001\002\000\054\004" +
    "\021\005\070\006\075\007\017\014\133\016\126\035\125" +
    "\070\036\071\122\072\123\073\115\074\134\076\112\126" +
    "\110\140\124\141\130\146\106\147\117\150\131\151\107" +
    "\152\113\001\002\000\054\004\021\005\070\006\075\007" +
    "\017\014\133\016\126\035\125\070\036\071\122\072\123" +
    "\073\115\074\134\076\112\126\110\140\124\141\130\146" +
    "\106\147\117\150\131\151\107\152\113\001\002\000\054" +
    "\004\021\005\070\006\075\007\017\014\133\016\126\035" +
    "\125\070\036\071\122\072\123\073\115\074\134\076\112" +
    "\126\110\140\124\141\130\146\106\147\117\150\131\151" +
    "\107\152\113\001\002\000\054\004\021\005\070\006\075" +
    "\007\017\014\133\016\126\035\125\070\036\071\122\072" +
    "\123\073\115\074\134\076\112\126\110\140\124\141\130" +
    "\146\106\147\117\150\131\151\107\152\113\001\002\000" +
    "\054\004\021\005\070\006\075\007\017\014\133\016\126" +
    "\035\125\070\036\071\122\072\123\073\115\074\134\076" +
    "\112\126\110\140\124\141\130\146\106\147\117\150\131" +
    "\151\107\152\113\001\002\000\004\016\166\001\002\000" +
    "\054\004\021\005\070\006\075\007\017\014\133\016\126" +
    "\035\125\070\036\071\122\072\123\073\115\074\134\076" +
    "\112\126\110\140\124\141\130\146\106\147\117\150\131" +
    "\151\107\152\113\001\002\000\146\002\uff9a\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\011\uff9a\013\uff9a\015\uff9a" +
    "\016\uff9a\020\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a" +
    "\043\uff9a\044\uff9a\050\uff9a\052\uff9a\053\uff9a\056\uff9a\063" +
    "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\101\uff9a" +
    "\106\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\122\uff9a\127" +
    "\uff9a\130\uff9a\131\uff9a\137\uff9a\140\uff9a\141\uff9a\142\uff9a" +
    "\143\uff9a\145\uff9a\001\002\000\054\004\021\005\070\006" +
    "\075\007\017\014\133\016\126\035\125\070\036\071\122" +
    "\072\123\073\115\074\134\076\112\126\110\140\124\141" +
    "\130\146\106\147\117\150\131\151\107\152\113\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\146\002\uffaf\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\142\034\uffaf\040" +
    "\uffaf\043\uffaf\044\uffaf\050\uffaf\052\uffaf\053\uffaf\056\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\101" +
    "\uffaf\106\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\122\uffaf" +
    "\127\uffaf\130\uffaf\131\uffaf\137\145\140\151\141\155\142" +
    "\143\143\uffaf\145\157\001\002\000\146\002\uffac\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac\015" +
    "\uffac\016\uffac\020\uffac\022\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\142\034\uffac\040" +
    "\uffac\043\uffac\044\uffac\050\uffac\052\uffac\053\uffac\056\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\101" +
    "\uffac\106\uffac\115\uffac\116\uffac\117\uffac\120\uffac\122\uffac" +
    "\127\uffac\130\uffac\131\uffac\137\145\140\151\141\155\142" +
    "\143\143\uffac\145\157\001\002\000\146\002\uffa7\003\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\013\uffa7\015" +
    "\uffa7\016\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\142\034\uffa7\040" +
    "\uffa7\043\uffa7\044\uffa7\050\uffa7\052\uffa7\053\uffa7\056\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\101" +
    "\uffa7\106\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\122\uffa7" +
    "\127\uffa7\130\uffa7\131\uffa7\137\uffa7\140\uffa7\141\uffa7\142" +
    "\uffa7\143\uffa7\145\uffa7\001\002\000\146\002\uffb3\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\013\uffb3\015" +
    "\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\040" +
    "\uffb3\043\uffb3\044\uffb3\050\uffb3\052\uffb3\053\uffb3\056\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\101" +
    "\uffb3\106\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3\122\uffb3" +
    "\127\uffb3\130\uffb3\131\uffb3\137\uffb3\140\uffb3\141\uffb3\142" +
    "\uffb3\143\uffb3\145\uffb3\001\002\000\146\002\uffa9\003\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\013\uffa9\015" +
    "\uffa9\016\uffa9\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\142\034\uffa9\040" +
    "\uffa9\043\uffa9\044\uffa9\050\uffa9\052\uffa9\053\uffa9\056\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\101" +
    "\uffa9\106\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\122\uffa9" +
    "\127\uffa9\130\uffa9\131\uffa9\137\uffa9\140\uffa9\141\uffa9\142" +
    "\uffa9\143\uffa9\145\uffa9\001\002\000\146\002\uffb4\003\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4\015" +
    "\uffb4\016\uffb4\020\uffb4\022\uffb4\024\uffb4\025\153\026\144" +
    "\027\162\030\152\031\161\032\146\033\142\034\uffb4\040" +
    "\uffb4\043\uffb4\044\uffb4\050\uffb4\052\uffb4\053\uffb4\056\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\101" +
    "\uffb4\106\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\122\uffb4" +
    "\127\uffb4\130\uffb4\131\uffb4\137\145\140\151\141\155\142" +
    "\143\143\uffb4\145\157\001\002\000\146\002\uffb1\003\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\020\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\162\030\152\031\161\032\146\033\142\034\uffb1\040" +
    "\uffb1\043\uffb1\044\uffb1\050\uffb1\052\uffb1\053\uffb1\056\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\101" +
    "\uffb1\106\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\122\uffb1" +
    "\127\uffb1\130\uffb1\131\uffb1\137\145\140\151\141\155\142" +
    "\143\143\uffb1\145\157\001\002\000\146\002\uffad\003\uffad" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\013\uffad\015" +
    "\uffad\016\uffad\020\uffad\022\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\142\034\uffad\040" +
    "\uffad\043\uffad\044\uffad\050\uffad\052\uffad\053\uffad\056\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\101" +
    "\uffad\106\uffad\115\uffad\116\uffad\117\uffad\120\uffad\122\uffad" +
    "\127\uffad\130\uffad\131\uffad\137\145\140\151\141\155\142" +
    "\143\143\uffad\145\157\001\002\000\146\002\uffaa\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\013\uffaa\015" +
    "\uffaa\016\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\142\034\uffaa\040" +
    "\uffaa\043\uffaa\044\uffaa\050\uffaa\052\uffaa\053\uffaa\056\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\101" +
    "\uffaa\106\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\122\uffaa" +
    "\127\uffaa\130\uffaa\131\uffaa\137\uffaa\140\uffaa\141\155\142" +
    "\143\143\uffaa\145\157\001\002\000\146\002\uffb6\003\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\022\uffb6\024\uffb6\025\153\026\144" +
    "\027\162\030\152\031\161\032\146\033\142\034\uffb6\040" +
    "\uffb6\043\uffb6\044\uffb6\050\uffb6\052\uffb6\053\uffb6\056\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\101" +
    "\uffb6\106\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\122\uffb6" +
    "\127\uffb6\130\uffb6\131\uffb6\137\145\140\151\141\155\142" +
    "\143\143\154\145\157\001\002\000\146\002\uffb5\003\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\013\uffb5\015" +
    "\uffb5\016\uffb5\020\uffb5\022\uffb5\024\uffb5\025\153\026\144" +
    "\027\162\030\152\031\161\032\146\033\142\034\uffb5\040" +
    "\uffb5\043\uffb5\044\uffb5\050\uffb5\052\uffb5\053\uffb5\056\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\101" +
    "\uffb5\106\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\122\uffb5" +
    "\127\150\130\uffb5\131\uffb5\137\145\140\151\141\155\142" +
    "\143\143\154\145\157\001\002\000\146\002\uffae\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\013\uffae\015" +
    "\uffae\016\uffae\020\uffae\022\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\142\034\uffae\040" +
    "\uffae\043\uffae\044\uffae\050\uffae\052\uffae\053\uffae\056\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\101" +
    "\uffae\106\uffae\115\uffae\116\uffae\117\uffae\120\uffae\122\uffae" +
    "\127\uffae\130\uffae\131\uffae\137\145\140\151\141\155\142" +
    "\143\143\uffae\145\157\001\002\000\146\002\uffab\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\013\uffab\015" +
    "\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\142\034\uffab\040" +
    "\uffab\043\uffab\044\uffab\050\uffab\052\uffab\053\uffab\056\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\101" +
    "\uffab\106\uffab\115\uffab\116\uffab\117\uffab\120\uffab\122\uffab" +
    "\127\uffab\130\uffab\131\uffab\137\uffab\140\uffab\141\155\142" +
    "\143\143\uffab\145\157\001\002\000\146\002\uffb0\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\013\uffb0\015" +
    "\uffb0\016\uffb0\020\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\162\030\152\031\161\032\146\033\142\034\uffb0\040" +
    "\uffb0\043\uffb0\044\uffb0\050\uffb0\052\uffb0\053\uffb0\056\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\101" +
    "\uffb0\106\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\122\uffb0" +
    "\127\uffb0\130\uffb0\131\uffb0\137\145\140\151\141\155\142" +
    "\143\143\uffb0\145\157\001\002\000\146\002\uffa8\003\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\013\uffa8\015" +
    "\uffa8\016\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\142\034\uffa8\040" +
    "\uffa8\043\uffa8\044\uffa8\050\uffa8\052\uffa8\053\uffa8\056\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\101" +
    "\uffa8\106\uffa8\115\uffa8\116\uffa8\117\uffa8\120\uffa8\122\uffa8" +
    "\127\uffa8\130\uffa8\131\uffa8\137\uffa8\140\uffa8\141\uffa8\142" +
    "\uffa8\143\uffa8\145\uffa8\001\002\000\146\002\uffa6\003\uffa6" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013\uffa6\015" +
    "\uffa6\016\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\040" +
    "\uffa6\043\uffa6\044\uffa6\050\uffa6\052\uffa6\053\uffa6\056\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\101" +
    "\uffa6\106\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\122\uffa6" +
    "\127\uffa6\130\uffa6\131\uffa6\137\uffa6\140\uffa6\141\uffa6\142" +
    "\uffa6\143\uffa6\145\uffa6\001\002\000\160\002\uff8a\003\uff8a" +
    "\004\uff8a\005\uff8a\006\uff8a\007\uff8a\011\uff8a\013\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\040\uff8a\043\uff8a\044\uff8a\050\uff8a\052\uff8a" +
    "\053\uff8a\056\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\101\uff8a\106\uff8a\115\uff8a\116\uff8a\117\uff8a" +
    "\120\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\127\uff8a\130" +
    "\uff8a\131\uff8a\137\uff8a\140\uff8a\141\uff8a\142\uff8a\143\uff8a" +
    "\145\uff8a\001\002\000\150\002\uff9b\003\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\011\uff9b\013\uff9b\015\uff9b\016\uff9b" +
    "\020\uff9b\022\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\040\uff9b\043\uff9b" +
    "\044\uff9b\050\uff9b\052\uff9b\053\uff9b\056\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\101\uff9b\106\uff9b" +
    "\115\uff9b\116\uff9b\117\uff9b\120\uff9b\122\uff9b\125\205\127" +
    "\uff9b\130\uff9b\131\uff9b\137\uff9b\140\uff9b\141\uff9b\142\uff9b" +
    "\143\uff9b\145\uff9b\001\002\000\014\004\021\005\070\006" +
    "\075\007\017\016\203\001\002\000\160\002\uff8f\003\uff8f" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\011\uff8f\013\uff8f\015" +
    "\uff8f\016\uff8f\017\207\020\uff8f\021\uff8f\022\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\040\uff8f\043\uff8f\044\uff8f\050\uff8f\052\uff8f" +
    "\053\uff8f\056\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\101\uff8f\106\uff8f\115\uff8f\116\uff8f\117\uff8f" +
    "\120\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f\127\uff8f\130" +
    "\uff8f\131\uff8f\137\uff8f\140\uff8f\141\uff8f\142\uff8f\143\uff8f" +
    "\145\uff8f\001\002\000\054\004\021\005\070\006\075\007" +
    "\017\014\133\016\126\035\125\070\036\071\122\072\123" +
    "\073\115\074\134\076\112\126\110\140\124\141\130\146" +
    "\106\147\117\150\131\151\107\152\113\001\002\000\160" +
    "\002\uff8c\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\011" +
    "\uff8c\013\uff8c\015\uff8c\016\uff8c\017\211\020\uff8c\021\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\040\uff8c\043\uff8c\044\uff8c" +
    "\050\uff8c\052\uff8c\053\uff8c\056\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\101\uff8c\106\uff8c\115\uff8c" +
    "\116\uff8c\117\uff8c\120\uff8c\122\uff8c\123\uff8c\124\uff8c\125" +
    "\uff8c\127\uff8c\130\uff8c\131\uff8c\137\uff8c\140\uff8c\141\uff8c" +
    "\142\uff8c\143\uff8c\145\uff8c\001\002\000\054\004\021\005" +
    "\070\006\075\007\017\014\133\016\126\035\125\070\036" +
    "\071\122\072\123\073\115\074\134\076\112\126\110\140" +
    "\124\141\130\146\106\147\117\150\131\151\107\152\113" +
    "\001\002\000\044\020\213\025\153\026\144\027\162\030" +
    "\152\031\161\032\146\033\142\056\156\127\150\130\147" +
    "\137\145\140\151\141\155\142\143\143\154\145\157\001" +
    "\002\000\160\002\uffb8\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\011\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\040\uffb8\043" +
    "\uffb8\044\uffb8\050\uffb8\052\uffb8\053\uffb8\056\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\101\uffb8\106" +
    "\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\122\uffb8\123\uffb8" +
    "\124\uffb8\125\uffb8\127\uffb8\130\uffb8\131\uffb8\137\uffb8\140" +
    "\uffb8\141\uffb8\142\uffb8\143\uffb8\145\uffb8\001\002\000\044" +
    "\020\215\025\153\026\144\027\162\030\152\031\161\032" +
    "\146\033\142\056\156\127\150\130\147\137\145\140\151" +
    "\141\155\142\143\143\154\145\157\001\002\000\160\002" +
    "\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7" +
    "\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\040\uffb7\043\uffb7\044\uffb7\050" +
    "\uffb7\052\uffb7\053\uffb7\056\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\101\uffb7\106\uffb7\115\uffb7\116" +
    "\uffb7\117\uffb7\120\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\127\uffb7\130\uffb7\131\uffb7\137\uffb7\140\uffb7\141\uffb7\142" +
    "\uffb7\143\uffb7\145\uffb7\001\002\000\056\004\021\005\070" +
    "\006\075\007\017\014\133\015\uffc1\016\126\035\125\070" +
    "\036\071\122\072\123\073\115\074\134\076\112\126\110" +
    "\140\124\141\130\146\106\147\117\150\131\151\107\152" +
    "\113\001\002\000\004\015\224\001\002\000\046\015\uffbf" +
    "\024\uffbf\025\153\026\144\027\162\030\152\031\161\032" +
    "\146\033\142\056\156\127\150\130\147\137\145\140\151" +
    "\141\155\142\143\143\154\145\157\001\002\000\006\015" +
    "\uffc2\024\222\001\002\000\054\004\021\005\070\006\075" +
    "\007\017\014\133\016\126\035\125\070\036\071\122\072" +
    "\123\073\115\074\134\076\112\126\110\140\124\141\130" +
    "\146\106\147\117\150\131\151\107\152\113\001\002\000" +
    "\046\015\uffc0\024\uffc0\025\153\026\144\027\162\030\152" +
    "\031\161\032\146\033\142\056\156\127\150\130\147\137" +
    "\145\140\151\141\155\142\143\143\154\145\157\001\002" +
    "\000\146\002\uff6b\003\uff6b\004\uff6b\005\uff6b\006\uff6b\007" +
    "\uff6b\011\uff6b\013\uff6b\015\uff6b\016\uff6b\020\uff6b\022\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\040\uff6b\043\uff6b\044\uff6b\050\uff6b" +
    "\052\uff6b\053\uff6b\056\uff6b\063\uff6b\064\uff6b\065\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\101\uff6b\106\uff6b\115\uff6b\116\uff6b" +
    "\117\uff6b\120\uff6b\122\uff6b\127\uff6b\130\uff6b\131\uff6b\137" +
    "\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b\145\uff6b\001\002" +
    "\000\146\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\011\uffa5\013\uffa5\015\uffa5\016\uffa5\020\uffa5\022\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\142\034\uffa5\040\uffa5\043\uffa5\044\uffa5\050\uffa5" +
    "\052\uffa5\053\uffa5\056\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\101\uffa5\106\uffa5\115\uffa5\116\uffa5" +
    "\117\uffa5\120\uffa5\122\uffa5\127\uffa5\130\uffa5\131\uffa5\137" +
    "\uffa5\140\uffa5\141\155\142\143\143\uffa5\145\157\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\044\015\230\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\146\002\uff95\003\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\011\uff95\013\uff95\015\uff95" +
    "\016\uff95\020\uff95\022\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\040\uff95" +
    "\043\uff95\044\uff95\050\uff95\052\uff95\053\uff95\056\uff95\063" +
    "\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\101\uff95" +
    "\106\uff95\115\uff95\116\uff95\117\uff95\120\uff95\122\uff95\127" +
    "\uff95\130\uff95\131\uff95\137\uff95\140\uff95\141\uff95\142\uff95" +
    "\143\uff95\145\uff95\001\002\000\054\004\021\005\070\006" +
    "\075\007\017\014\133\016\126\035\125\070\036\071\122" +
    "\072\123\073\115\074\134\076\112\126\110\140\124\141" +
    "\130\146\106\147\117\150\131\151\107\152\113\001\002" +
    "\000\044\015\233\025\153\026\144\027\162\030\152\031" +
    "\161\032\146\033\142\056\156\127\150\130\147\137\145" +
    "\140\151\141\155\142\143\143\154\145\157\001\002\000" +
    "\146\002\uff99\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\011\uff99\013\uff99\015\uff99\016\uff99\020\uff99\022\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\040\uff99\043\uff99\044\uff99\050\uff99\052" +
    "\uff99\053\uff99\056\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\101\uff99\106\uff99\115\uff99\116\uff99\117" +
    "\uff99\120\uff99\122\uff99\127\uff99\130\uff99\131\uff99\137\uff99" +
    "\140\uff99\141\uff99\142\uff99\143\uff99\145\uff99\001\002\000" +
    "\054\004\021\005\070\006\075\007\017\014\133\016\126" +
    "\035\125\070\036\071\122\072\123\073\115\074\134\076" +
    "\112\126\110\140\124\141\130\146\106\147\117\150\131" +
    "\151\107\152\113\001\002\000\044\015\236\025\153\026" +
    "\144\027\162\030\152\031\161\032\146\033\142\056\156" +
    "\127\150\130\147\137\145\140\151\141\155\142\143\143" +
    "\154\145\157\001\002\000\146\002\uff94\003\uff94\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\011\uff94\013\uff94\015\uff94\016" +
    "\uff94\020\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\040\uff94\043" +
    "\uff94\044\uff94\050\uff94\052\uff94\053\uff94\056\uff94\063\uff94" +
    "\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\101\uff94\106" +
    "\uff94\115\uff94\116\uff94\117\uff94\120\uff94\122\uff94\127\uff94" +
    "\130\uff94\131\uff94\137\uff94\140\uff94\141\uff94\142\uff94\143" +
    "\uff94\145\uff94\001\002\000\014\004\021\005\070\006\075" +
    "\007\017\016\242\001\002\000\146\002\uff91\003\uff91\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\011\uff91\013\uff91\015\uff91" +
    "\016\uff91\020\uff91\022\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\040\uff91" +
    "\043\uff91\044\uff91\050\uff91\052\uff91\053\uff91\056\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\101\uff91" +
    "\106\uff91\115\uff91\116\uff91\117\uff91\120\uff91\122\uff91\127" +
    "\uff91\130\uff91\131\uff91\137\uff91\140\uff91\141\uff91\142\uff91" +
    "\143\uff91\145\uff91\001\002\000\146\002\uff90\003\uff90\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\011\uff90\013\uff90\015\uff90" +
    "\016\uff90\020\uff90\022\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\040\uff90" +
    "\043\uff90\044\uff90\050\uff90\052\uff90\053\uff90\056\uff90\063" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\101\uff90" +
    "\106\uff90\115\uff90\116\uff90\117\uff90\120\uff90\122\uff90\127" +
    "\uff90\130\uff90\131\uff90\137\uff90\140\uff90\141\uff90\142\uff90" +
    "\143\uff90\145\uff90\001\002\000\162\002\uff8a\003\uff8a\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\011\uff8a\013\uff8a\014\243" +
    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\040\uff8a\043\uff8a\044\uff8a\050\uff8a\052" +
    "\uff8a\053\uff8a\056\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\101\uff8a\106\uff8a\115\uff8a\116\uff8a\117" +
    "\uff8a\120\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\127\uff8a" +
    "\130\uff8a\131\uff8a\137\uff8a\140\uff8a\141\uff8a\142\uff8a\143" +
    "\uff8a\145\uff8a\001\002\000\056\004\021\005\070\006\075" +
    "\007\017\014\133\015\uffc1\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\004\015\245\001\002\000\146\002\uff6c\003\uff6c" +
    "\004\uff6c\005\uff6c\006\uff6c\007\uff6c\011\uff6c\013\uff6c\015" +
    "\uff6c\016\uff6c\020\uff6c\022\uff6c\024\uff6c\025\uff6c\026\uff6c" +
    "\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\040" +
    "\uff6c\043\uff6c\044\uff6c\050\uff6c\052\uff6c\053\uff6c\056\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\101" +
    "\uff6c\106\uff6c\115\uff6c\116\uff6c\117\uff6c\120\uff6c\122\uff6c" +
    "\127\uff6c\130\uff6c\131\uff6c\137\uff6c\140\uff6c\141\uff6c\142" +
    "\uff6c\143\uff6c\145\uff6c\001\002\000\054\004\021\005\070" +
    "\006\075\007\017\014\133\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\044\024\250\025\153\026\144\027\162\030\152" +
    "\031\161\032\146\033\142\056\156\127\150\130\147\137" +
    "\145\140\151\141\155\142\143\143\154\145\157\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\044\015\252\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\146\002\uff93\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\011\uff93\013\uff93\015\uff93" +
    "\016\uff93\020\uff93\022\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\040\uff93" +
    "\043\uff93\044\uff93\050\uff93\052\uff93\053\uff93\056\uff93\063" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\101\uff93" +
    "\106\uff93\115\uff93\116\uff93\117\uff93\120\uff93\122\uff93\127" +
    "\uff93\130\uff93\131\uff93\137\uff93\140\uff93\141\uff93\142\uff93" +
    "\143\uff93\145\uff93\001\002\000\074\002\uff7a\003\uff7a\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\013\uff7a\016\uff7a\022\uff7a" +
    "\034\uff7a\040\uff7a\043\uff7a\044\uff7a\050\uff7a\052\uff7a\053" +
    "\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a" +
    "\101\uff7a\106\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\131" +
    "\uff7a\001\002\000\146\002\uffb2\003\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\011\uffb2\013\uffb2\015\uffb2\016\uffb2\020" +
    "\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2\043\uffb2\044" +
    "\uffb2\050\uffb2\052\uffb2\053\uffb2\056\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\101\uffb2\106\uffb2\115" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\122\uffb2\127\uffb2\130\uffb2" +
    "\131\uffb2\137\uffb2\140\uffb2\141\uffb2\142\uffb2\143\uffb2\145" +
    "\uffb2\001\002\000\004\002\001\001\002\000\004\146\257" +
    "\001\002\000\006\015\261\024\260\001\002\000\054\004" +
    "\021\005\070\006\075\007\017\014\133\016\126\035\125" +
    "\070\036\071\122\072\123\073\115\074\134\076\112\126" +
    "\110\140\124\141\130\146\106\147\117\150\131\151\107" +
    "\152\113\001\002\000\004\011\uffbe\001\002\000\006\015" +
    "\265\024\264\001\002\000\046\015\uffb9\024\uffb9\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\054\004\021\005\070\006" +
    "\075\007\017\014\133\016\126\035\125\070\036\071\122" +
    "\072\123\073\115\074\134\076\112\126\110\140\124\141" +
    "\130\146\106\147\117\150\131\151\107\152\113\001\002" +
    "\000\004\011\uffbd\001\002\000\046\015\uffba\024\uffba\025" +
    "\153\026\144\027\162\030\152\031\161\032\146\033\142" +
    "\056\156\127\150\130\147\137\145\140\151\141\155\142" +
    "\143\143\154\145\157\001\002\000\074\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\013\ufff8\016\ufff8\022" +
    "\ufff8\034\ufff8\040\ufff8\043\ufff8\044\ufff8\050\ufff8\052\ufff8" +
    "\053\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\101\ufff8\106\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8" +
    "\131\ufff8\001\002\000\074\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\013\ufff3\016\ufff3\022\ufff3\034\ufff3" +
    "\040\ufff3\043\ufff3\044\ufff3\050\ufff3\052\ufff3\053\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\101\ufff3" +
    "\106\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\131\ufff3\001" +
    "\002\000\074\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\016\uffe6\022\uffe6\034\uffe6\040\uffe6\043" +
    "\uffe6\044\uffe6\050\uffe6\052\uffe6\053\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\101\uffe6\106\uffe6\115" +
    "\uffe6\116\uffe6\117\uffe6\120\uffe6\131\uffe6\001\002\000\056" +
    "\004\021\005\070\006\075\007\017\014\133\016\126\035" +
    "\125\070\036\071\122\072\123\073\115\074\134\075\276" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\006\011\uffc7\015\uffc7" +
    "\001\002\000\142\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5\016\uffc5\022\uffc5" +
    "\024\uffc5\025\153\026\144\027\162\030\152\031\161\032" +
    "\146\033\142\034\uffc5\040\uffc5\043\uffc5\044\uffc5\050\uffc5" +
    "\052\uffc5\053\uffc5\056\156\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\101\uffc5\106\uffc5\115\uffc5\116\uffc5" +
    "\117\uffc5\120\uffc5\127\150\130\147\131\uffc5\137\145\140" +
    "\151\141\155\142\143\143\154\145\157\001\002\000\102" +
    "\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011" +
    "\uffc4\013\uffc4\015\uffc4\016\uffc4\022\uffc4\024\uffc4\034\uffc4" +
    "\040\uffc4\043\uffc4\044\uffc4\050\uffc4\052\uffc4\053\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\101\uffc4" +
    "\106\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\131\uffc4\001" +
    "\002\000\004\014\277\001\002\000\054\004\021\005\070" +
    "\006\075\007\017\014\133\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\044\015\301\025\153\026\144\027\162\030\152" +
    "\031\161\032\146\033\142\056\156\127\150\130\147\137" +
    "\145\140\151\141\155\142\143\143\154\145\157\001\002" +
    "\000\102\002\uffc3\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\013\uffc3\015\uffc3\016\uffc3\022\uffc3\024\uffc3" +
    "\034\uffc3\040\uffc3\043\uffc3\044\uffc3\050\uffc3\052\uffc3\053" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\101\uffc3\106\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\131" +
    "\uffc3\001\002\000\074\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\013\ufffa\016\ufffa\022\ufffa\034\ufffa\040" +
    "\ufffa\043\ufffa\044\ufffa\050\ufffa\052\ufffa\053\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\101\ufffa\106" +
    "\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\131\ufffa\001\002" +
    "\000\004\051\304\001\002\000\004\014\305\001\002\000" +
    "\054\004\021\005\070\006\075\007\017\014\133\016\126" +
    "\035\125\070\036\071\122\072\123\073\115\074\134\076" +
    "\112\126\110\140\124\141\130\146\106\147\117\150\131" +
    "\151\107\152\113\001\002\000\044\015\307\025\153\026" +
    "\144\027\162\030\152\031\161\032\146\033\142\056\156" +
    "\127\150\130\147\137\145\140\151\141\155\142\143\143" +
    "\154\145\157\001\002\000\004\011\uff61\001\002\000\074" +
    "\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\013" +
    "\uffe8\016\uffe8\022\uffe8\034\uffe8\040\uffe8\043\uffe8\044\uffe8" +
    "\050\uffe8\052\uffe8\053\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\101\uffe8\106\uffe8\115\uffe8\116\uffe8" +
    "\117\uffe8\120\uffe8\131\uffe8\001\002\000\074\002\ufff1\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\013\ufff1\016\ufff1" +
    "\022\ufff1\034\ufff1\040\ufff1\043\ufff1\044\ufff1\050\ufff1\052" +
    "\ufff1\053\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\101\ufff1\106\ufff1\115\ufff1\116\ufff1\117\ufff1\120" +
    "\ufff1\131\ufff1\001\002\000\004\146\313\001\002\000\006" +
    "\015\315\024\314\001\002\000\054\004\021\005\070\006" +
    "\075\007\017\014\133\016\126\035\125\070\036\071\122" +
    "\072\123\073\115\074\134\076\112\126\110\140\124\141" +
    "\130\146\106\147\117\150\131\151\107\152\113\001\002" +
    "\000\004\011\uffbc\001\002\000\006\015\317\024\264\001" +
    "\002\000\004\011\uffbb\001\002\000\006\017\211\021\321" +
    "\001\002\000\054\004\021\005\070\006\075\007\017\014" +
    "\133\016\126\035\125\070\036\071\122\072\123\073\115" +
    "\074\134\076\112\126\110\140\124\141\130\146\106\147" +
    "\117\150\131\151\107\152\113\001\002\000\046\011\uffc6" +
    "\015\uffc6\025\153\026\144\027\162\030\152\031\161\032" +
    "\146\033\142\056\156\127\150\130\147\137\145\140\151" +
    "\141\155\142\143\143\154\145\157\001\002\000\074\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb" +
    "\016\ufffb\022\ufffb\034\ufffb\040\ufffb\043\ufffb\044\ufffb\050" +
    "\ufffb\052\ufffb\053\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\101\ufffb\106\ufffb\115\ufffb\116\ufffb\117" +
    "\ufffb\120\ufffb\131\ufffb\001\002\000\004\015\325\001\002" +
    "\000\004\011\uffe3\001\002\000\054\004\021\005\070\006" +
    "\075\007\017\014\133\016\126\035\125\070\036\071\122" +
    "\072\123\073\115\074\134\076\112\126\110\140\124\141" +
    "\130\146\106\147\117\150\131\151\107\152\113\001\002" +
    "\000\044\015\330\025\153\026\144\027\162\030\152\031" +
    "\161\032\146\033\142\056\156\127\150\130\147\137\145" +
    "\140\151\141\155\142\143\143\154\145\157\001\002\000" +
    "\004\011\uffe1\001\002\000\074\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\013\uffe9\016\uffe9\022\uffe9\034" +
    "\uffe9\040\uffe9\043\uffe9\044\uffe9\050\uffe9\052\uffe9\053\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\101" +
    "\uffe9\106\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9\131\uffe9" +
    "\001\002\000\074\002\uffef\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\013\uffef\016\uffef\022\uffef\034\uffef\040\uffef" +
    "\043\uffef\044\uffef\050\uffef\052\uffef\053\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\101\uffef\106\uffef" +
    "\115\uffef\116\uffef\117\uffef\120\uffef\131\uffef\001\002\000" +
    "\004\012\334\001\002\000\016\004\021\005\070\006\075" +
    "\007\017\013\336\016\203\001\002\000\016\004\021\005" +
    "\070\006\075\007\017\013\377\016\203\001\002\000\004" +
    "\011\uff84\001\002\000\004\016\344\001\002\000\004\011" +
    "\341\001\002\000\016\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\013\uff82\016\uff82\001\002\000\006\011\uffd8\024\uffd8\001" +
    "\002\000\006\011\uff81\024\375\001\002\000\012\011\uffd7" +
    "\017\346\021\347\024\uffd7\001\002\000\010\011\uffd5\021" +
    "\356\024\uffd5\001\002\000\056\004\021\005\070\006\075" +
    "\007\017\014\133\016\126\020\355\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\056\004\021\005\070\006\075\007\017\014\133" +
    "\016\126\035\125\070\036\071\122\072\123\073\115\074" +
    "\134\075\276\076\112\126\110\140\124\141\130\146\106" +
    "\147\117\150\131\151\107\152\113\001\002\000\014\011" +
    "\uffd1\015\uffd1\017\352\021\uffd1\024\uffd1\001\002\000\014" +
    "\011\uffd0\015\uffd0\017\211\021\uffd0\024\uffd0\001\002\000" +
    "\004\020\353\001\002\000\016\011\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\024\uffcf\001\002\000\006\011\uffd6\024" +
    "\uffd6\001\002\000\016\011\uffce\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\024\uffce\001\002\000\056\004\021\005\070\006" +
    "\075\007\017\012\362\014\133\016\126\035\125\070\036" +
    "\071\122\072\123\073\115\074\134\076\112\126\110\140" +
    "\124\141\130\146\106\147\117\150\131\151\107\152\113" +
    "\001\002\000\006\011\uffd3\024\uffd3\001\002\000\006\011" +
    "\uffd4\024\uffd4\001\002\000\046\011\uffd2\024\uffd2\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\060\004\021\005\070\006" +
    "\075\007\017\012\364\014\133\016\126\017\207\035\125" +
    "\070\036\071\122\072\123\073\115\074\134\076\112\126" +
    "\110\140\124\141\130\146\106\147\117\150\131\151\107" +
    "\152\113\001\002\000\006\013\372\024\373\001\002\000" +
    "\056\004\021\005\070\006\075\007\017\012\364\014\133" +
    "\016\126\035\125\070\036\071\122\072\123\073\115\074" +
    "\134\076\112\126\110\140\124\141\130\146\106\147\117" +
    "\150\131\151\107\152\113\001\002\000\046\013\uffc9\024" +
    "\uffc9\025\153\026\144\027\162\030\152\031\161\032\146" +
    "\033\142\056\156\127\150\130\147\137\145\140\151\141" +
    "\155\142\143\143\154\145\157\001\002\000\006\013\371" +
    "\017\211\001\002\000\006\013\uffc8\024\uffc8\001\002\000" +
    "\006\013\uffca\024\uffca\001\002\000\100\002\uffcd\003\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\013\uffcd\016" +
    "\uffcd\022\uffcd\024\uffcd\034\uffcd\040\uffcd\043\uffcd\044\uffcd" +
    "\050\uffcd\052\uffcd\053\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\101\uffcd\106\uffcd\115\uffcd\116\uffcd" +
    "\117\uffcd\120\uffcd\131\uffcd\001\002\000\010\011\uffcc\013" +
    "\uffcc\024\uffcc\001\002\000\056\004\021\005\070\006\075" +
    "\007\017\012\364\014\133\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\006\013\uffcb\024\uffcb\001\002\000\004\016\344" +
    "\001\002\000\006\011\uffd9\024\uffd9\001\002\000\004\011" +
    "\uff85\001\002\000\004\011\u0101\001\002\000\016\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\013\uff83\016\uff83\001\002\000" +
    "\074\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\013\uffea\016\uffea\022\uffea\034\uffea\040\uffea\043\uffea\044" +
    "\uffea\050\uffea\052\uffea\053\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\070\uffea\101\uffea\106\uffea\115\uffea\116" +
    "\uffea\117\uffea\120\uffea\131\uffea\001\002\000\054\004\021" +
    "\005\070\006\075\007\017\014\133\016\126\035\125\070" +
    "\036\071\122\072\123\073\115\074\134\076\112\126\110" +
    "\140\124\141\130\146\106\147\117\150\131\151\107\152" +
    "\113\001\002\000\044\024\u0105\025\153\026\144\027\162" +
    "\030\152\031\161\032\146\033\142\056\156\127\150\130" +
    "\147\137\145\140\151\141\155\142\143\143\154\145\157" +
    "\001\002\000\054\004\021\005\070\006\075\007\017\014" +
    "\133\016\126\035\125\070\036\071\122\072\123\073\115" +
    "\074\134\076\112\126\110\140\124\141\130\146\106\147" +
    "\117\150\131\151\107\152\113\001\002\000\044\015\u0107" +
    "\025\153\026\144\027\162\030\152\031\161\032\146\033" +
    "\142\056\156\127\150\130\147\137\145\140\151\141\155" +
    "\142\143\143\154\145\157\001\002\000\146\002\uff92\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\011\uff92\013\uff92" +
    "\015\uff92\016\uff92\020\uff92\022\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\040\uff92\043\uff92\044\uff92\050\uff92\052\uff92\053\uff92\056" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92" +
    "\101\uff92\106\uff92\115\uff92\116\uff92\117\uff92\120\uff92\122" +
    "\uff92\127\uff92\130\uff92\131\uff92\137\uff92\140\uff92\141\uff92" +
    "\142\uff92\143\uff92\145\uff92\001\002\000\014\004\021\005" +
    "\070\006\075\007\017\016\203\001\002\000\006\021\272" +
    "\125\205\001\002\000\004\011\u011a\001\002\000\004\011" +
    "\u010e\001\002\000\012\016\344\017\uff8d\021\uff8d\125\uff8d" +
    "\001\002\000\006\011\uffda\024\375\001\002\000\054\004" +
    "\021\005\070\006\075\007\017\014\133\016\126\035\125" +
    "\070\036\071\122\072\123\073\115\074\134\076\112\126" +
    "\110\140\124\141\130\146\106\147\117\150\131\151\107" +
    "\152\113\001\002\000\044\011\u0110\025\153\026\144\027" +
    "\162\030\152\031\161\032\146\033\142\056\156\127\150" +
    "\130\147\137\145\140\151\141\155\142\143\143\154\145" +
    "\157\001\002\000\014\004\021\005\070\006\075\007\017" +
    "\016\u0112\001\002\000\004\015\uff5e\001\002\000\014\017" +
    "\207\021\uff8a\123\uff8a\124\uff8a\125\uff8a\001\002\000\004" +
    "\015\uff5b\001\002\000\012\021\272\123\240\124\241\125" +
    "\205\001\002\000\004\015\u0118\001\002\000\004\015\uff5c" +
    "\001\002\000\004\015\uff5d\001\002\000\004\012\077\001" +
    "\002\000\074\002\uff5f\003\uff5f\004\uff5f\005\uff5f\006\uff5f" +
    "\007\uff5f\013\uff5f\016\uff5f\022\uff5f\034\uff5f\040\uff5f\043" +
    "\uff5f\044\uff5f\050\uff5f\052\uff5f\053\uff5f\063\uff5f\064\uff5f" +
    "\065\uff5f\066\uff5f\067\uff5f\070\uff5f\101\uff5f\106\uff5f\115" +
    "\uff5f\116\uff5f\117\uff5f\120\uff5f\131\uff5f\001\002\000\054" +
    "\004\021\005\070\006\075\007\017\014\133\016\126\035" +
    "\125\070\036\071\122\072\123\073\115\074\134\076\112" +
    "\126\110\140\124\141\130\146\106\147\117\150\131\151" +
    "\107\152\113\001\002\000\044\011\u011c\025\153\026\144" +
    "\027\162\030\152\031\161\032\146\033\142\056\156\127" +
    "\150\130\147\137\145\140\151\141\155\142\143\143\154" +
    "\145\157\001\002\000\014\004\021\005\070\006\075\007" +
    "\017\016\u0112\001\002\000\004\015\u011e\001\002\000\004" +
    "\012\077\001\002\000\074\002\uff60\003\uff60\004\uff60\005" +
    "\uff60\006\uff60\007\uff60\013\uff60\016\uff60\022\uff60\034\uff60" +
    "\040\uff60\043\uff60\044\uff60\050\uff60\052\uff60\053\uff60\063" +
    "\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\101\uff60" +
    "\106\uff60\115\uff60\116\uff60\117\uff60\120\uff60\131\uff60\001" +
    "\002\000\004\014\u0121\001\002\000\022\004\021\005\070" +
    "\006\075\007\017\015\uff75\016\203\024\uff75\046\u0125\001" +
    "\002\000\006\015\uff76\024\uff76\001\002\000\006\015\u012c" +
    "\024\u012b\001\002\000\004\016\u0129\001\002\000\014\004" +
    "\021\005\070\006\075\007\017\016\203\001\002\000\004" +
    "\016\u0127\001\002\000\010\015\uff73\017\346\024\uff73\001" +
    "\002\000\006\015\uff71\024\uff71\001\002\000\010\015\uff74" +
    "\017\346\024\uff74\001\002\000\006\015\uff72\024\uff72\001" +
    "\002\000\016\004\021\005\070\006\075\007\017\016\203" +
    "\046\u0125\001\002\000\004\012\uff7d\001\002\000\006\015" +
    "\uff77\024\uff77\001\002\000\074\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\013\ufff9\016\ufff9\022\ufff9\034" +
    "\ufff9\040\ufff9\043\ufff9\044\ufff9\050\ufff9\052\ufff9\053\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\101" +
    "\ufff9\106\ufff9\115\ufff9\116\ufff9\117\ufff9\120\ufff9\131\ufff9" +
    "\001\002\000\074\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\013\ufff7\016\ufff7\022\ufff7\034\ufff7\040\ufff7" +
    "\043\ufff7\044\ufff7\050\ufff7\052\ufff7\053\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\101\ufff7\106\ufff7" +
    "\115\ufff7\116\ufff7\117\ufff7\120\ufff7\131\ufff7\001\002\000" +
    "\074\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\013\uffdd\016\uffdd\022\uffdd\034\uffdd\040\uffdd\043\uffdd\044" +
    "\uffdd\050\uffdd\052\uffdd\053\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\101\uffdd\106\uffdd\115\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\131\uffdd\001\002\000\060\004\021" +
    "\005\070\006\075\007\017\012\u0134\014\133\016\126\035" +
    "\125\070\036\071\122\072\123\073\115\074\134\075\276" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\074\002\uffdb\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\013\uffdb\016\uffdb\022" +
    "\uffdb\034\uffdb\040\uffdb\043\uffdb\044\uffdb\050\uffdb\052\uffdb" +
    "\053\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\101\uffdb\106\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb" +
    "\131\uffdb\001\002\000\074\002\uffdc\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\013\uffdc\016\uffdc\022\uffdc\034\uffdc" +
    "\040\uffdc\043\uffdc\044\uffdc\050\uffdc\052\uffdc\053\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\101\uffdc" +
    "\106\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc\131\uffdc\001" +
    "\002\000\004\017\207\001\002\000\054\004\021\005\070" +
    "\006\075\007\017\014\133\016\126\035\125\070\036\071" +
    "\122\072\123\073\115\074\134\076\112\126\110\140\124" +
    "\141\130\146\106\147\117\150\131\151\107\152\113\001" +
    "\002\000\044\024\u0137\025\153\026\144\027\162\030\152" +
    "\031\161\032\146\033\142\056\156\127\150\130\147\137" +
    "\145\140\151\141\155\142\143\143\154\145\157\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\044\015\u0139\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\004\011\uffde\001\002\000" +
    "\074\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\013\uffe5\016\uffe5\022\uffe5\034\uffe5\040\uffe5\043\uffe5\044" +
    "\uffe5\050\uffe5\052\uffe5\053\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\101\uffe5\106\uffe5\115\uffe5\116" +
    "\uffe5\117\uffe5\120\uffe5\131\uffe5\001\002\000\054\004\021" +
    "\005\070\006\075\007\017\014\133\016\126\035\125\070" +
    "\036\071\122\072\123\073\115\074\134\076\112\126\110" +
    "\140\124\141\130\146\106\147\117\150\131\151\107\152" +
    "\113\001\002\000\044\015\u013d\025\153\026\144\027\162" +
    "\030\152\031\161\032\146\033\142\056\156\127\150\130" +
    "\147\137\145\140\151\141\155\142\143\143\154\145\157" +
    "\001\002\000\004\012\077\001\002\000\074\002\uff6a\003" +
    "\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\013\uff6a\016\uff6a" +
    "\022\uff6a\034\uff6a\040\uff6a\043\uff6a\044\uff6a\050\uff6a\052" +
    "\uff6a\053\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\070\uff6a\101\uff6a\106\uff6a\115\uff6a\116\uff6a\117\uff6a\120" +
    "\uff6a\131\uff6a\001\002\000\054\004\021\005\070\006\075" +
    "\007\017\014\133\016\126\035\125\070\036\071\122\072" +
    "\123\073\115\074\134\076\112\126\110\140\124\141\130" +
    "\146\106\147\117\150\131\151\107\152\113\001\002\000" +
    "\044\015\u0141\025\153\026\144\027\162\030\152\031\161" +
    "\032\146\033\142\056\156\127\150\130\147\137\145\140" +
    "\151\141\155\142\143\143\154\145\157\001\002\000\004" +
    "\012\077\001\002\000\076\002\uff70\003\uff70\004\uff70\005" +
    "\uff70\006\uff70\007\uff70\013\uff70\016\uff70\022\uff70\034\uff70" +
    "\040\uff70\043\uff70\044\uff70\050\uff70\052\uff70\053\uff70\063" +
    "\uff70\064\uff70\065\uff70\066\uff70\067\uff70\070\uff70\101\uff70" +
    "\106\uff70\115\uff70\116\uff70\117\uff70\120\uff70\131\uff70\133" +
    "\u0143\001\002\000\006\012\077\131\023\001\002\000\074" +
    "\002\uff6f\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f\013" +
    "\uff6f\016\uff6f\022\uff6f\034\uff6f\040\uff6f\043\uff6f\044\uff6f" +
    "\050\uff6f\052\uff6f\053\uff6f\063\uff6f\064\uff6f\065\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\101\uff6f\106\uff6f\115\uff6f\116\uff6f" +
    "\117\uff6f\120\uff6f\131\uff6f\001\002\000\074\002\uff6d\003" +
    "\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\013\uff6d\016\uff6d" +
    "\022\uff6d\034\uff6d\040\uff6d\043\uff6d\044\uff6d\050\uff6d\052" +
    "\uff6d\053\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d" +
    "\070\uff6d\101\uff6d\106\uff6d\115\uff6d\116\uff6d\117\uff6d\120" +
    "\uff6d\131\uff6d\001\002\000\074\002\uff6e\003\uff6e\004\uff6e" +
    "\005\uff6e\006\uff6e\007\uff6e\013\uff6e\016\uff6e\022\uff6e\034" +
    "\uff6e\040\uff6e\043\uff6e\044\uff6e\050\uff6e\052\uff6e\053\uff6e" +
    "\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\101" +
    "\uff6e\106\uff6e\115\uff6e\116\uff6e\117\uff6e\120\uff6e\131\uff6e" +
    "\001\002\000\004\146\u0148\001\002\000\006\015\u014a\024" +
    "\u0149\001\002\000\054\004\021\005\070\006\075\007\017" +
    "\014\133\016\126\035\125\070\036\071\122\072\123\073" +
    "\115\074\134\076\112\126\110\140\124\141\130\146\106" +
    "\147\117\150\131\151\107\152\113\001\002\000\004\011" +
    "\uffe0\001\002\000\006\015\u014c\024\264\001\002\000\004" +
    "\011\uffdf\001\002\000\074\002\uffe7\003\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\013\uffe7\016\uffe7\022\uffe7\034\uffe7" +
    "\040\uffe7\043\uffe7\044\uffe7\050\uffe7\052\uffe7\053\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\101\uffe7" +
    "\106\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\131\uffe7\001" +
    "\002\000\054\004\021\005\070\006\075\007\017\014\133" +
    "\016\126\035\125\070\036\071\122\072\123\073\115\074" +
    "\134\076\112\126\110\140\124\141\130\146\106\147\117" +
    "\150\131\151\107\152\113\001\002\000\044\015\u0150\025" +
    "\153\026\144\027\162\030\152\031\161\032\146\033\142" +
    "\056\156\127\150\130\147\137\145\140\151\141\155\142" +
    "\143\143\154\145\157\001\002\000\004\011\uffe2\001\002" +
    "\000\054\004\021\005\070\006\075\007\017\014\133\016" +
    "\126\035\125\070\036\071\122\072\123\073\115\074\134" +
    "\076\112\126\110\140\124\141\130\146\106\147\117\150" +
    "\131\151\107\152\113\001\002\000\044\015\u0153\025\153" +
    "\026\144\027\162\030\152\031\161\032\146\033\142\056" +
    "\156\127\150\130\147\137\145\140\151\141\155\142\143" +
    "\143\154\145\157\001\002\000\004\012\u0154\001\002\000" +
    "\004\040\u0156\001\002\000\010\013\u015b\040\u0156\043\u015d" +
    "\001\002\000\054\004\021\005\070\006\075\007\017\014" +
    "\133\016\126\035\125\070\036\071\122\072\123\073\115" +
    "\074\134\076\112\126\110\140\124\141\130\146\106\147" +
    "\117\150\131\151\107\152\113\001\002\000\010\013\uff64" +
    "\040\uff64\043\uff64\001\002\000\044\025\153\026\144\027" +
    "\162\030\152\031\161\032\146\033\142\056\156\122\u0159" +
    "\127\150\130\147\137\145\140\151\141\155\142\143\143" +
    "\154\145\157\001\002\000\064\003\040\004\021\005\070" +
    "\006\075\007\017\016\051\022\066\034\034\044\055\050" +
    "\052\052\022\053\015\063\071\064\026\065\045\066\027" +
    "\067\042\070\036\101\047\106\014\115\024\116\035\117" +
    "\006\120\004\131\023\001\002\000\072\003\040\004\021" +
    "\005\070\006\075\007\017\013\uff63\016\051\022\066\034" +
    "\034\040\uff63\043\uff63\044\055\050\052\052\022\053\015" +
    "\063\071\064\026\065\045\066\027\067\042\070\036\101" +
    "\047\106\014\115\024\116\035\117\006\120\004\131\023" +
    "\001\002\000\074\002\uff67\003\uff67\004\uff67\005\uff67\006" +
    "\uff67\007\uff67\013\uff67\016\uff67\022\uff67\034\uff67\040\uff67" +
    "\043\uff67\044\uff67\050\uff67\052\uff67\053\uff67\063\uff67\064" +
    "\uff67\065\uff67\066\uff67\067\uff67\070\uff67\101\uff67\106\uff67" +
    "\115\uff67\116\uff67\117\uff67\120\uff67\131\uff67\001\002\000" +
    "\004\013\u0161\001\002\000\004\122\u015f\001\002\000\010" +
    "\013\uff65\040\uff65\043\uff65\001\002\000\064\003\040\004" +
    "\021\005\070\006\075\007\017\016\051\022\066\034\034" +
    "\044\055\050\052\052\022\053\015\063\071\064\026\065" +
    "\045\066\027\067\042\070\036\101\047\106\014\115\024" +
    "\116\035\117\006\120\004\131\023\001\002\000\066\003" +
    "\040\004\021\005\070\006\075\007\017\013\uff62\016\051" +
    "\022\066\034\034\044\055\050\052\052\022\053\015\063" +
    "\071\064\026\065\045\066\027\067\042\070\036\101\047" +
    "\106\014\115\024\116\035\117\006\120\004\131\023\001" +
    "\002\000\074\002\uff66\003\uff66\004\uff66\005\uff66\006\uff66" +
    "\007\uff66\013\uff66\016\uff66\022\uff66\034\uff66\040\uff66\043" +
    "\uff66\044\uff66\050\uff66\052\uff66\053\uff66\063\uff66\064\uff66" +
    "\065\uff66\066\uff66\067\uff66\070\uff66\101\uff66\106\uff66\115" +
    "\uff66\116\uff66\117\uff66\120\uff66\131\uff66\001\002\000\074" +
    "\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\013" +
    "\uffee\016\uffee\022\uffee\034\uffee\040\uffee\043\uffee\044\uffee" +
    "\050\uffee\052\uffee\053\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\070\uffee\101\uffee\106\uffee\115\uffee\116\uffee" +
    "\117\uffee\120\uffee\131\uffee\001\002\000\074\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\013\ufffc\016\ufffc" +
    "\022\ufffc\034\ufffc\040\ufffc\043\ufffc\044\ufffc\050\ufffc\052" +
    "\ufffc\053\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\101\ufffc\106\ufffc\115\ufffc\116\ufffc\117\ufffc\120" +
    "\ufffc\131\ufffc\001\002\000\004\020\355\001\002\000\006" +
    "\016\u016a\017\352\001\002\000\014\011\uffd7\014\u0167\017" +
    "\346\021\347\024\uffd7\001\002\000\022\004\021\005\070" +
    "\006\075\007\017\015\uff75\016\203\024\uff75\046\u0125\001" +
    "\002\000\006\015\u0169\024\u012b\001\002\000\004\012\uff7f" +
    "\001\002\000\004\014\u016b\001\002\000\022\004\021\005" +
    "\070\006\075\007\017\015\uff75\016\203\024\uff75\046\u0125" +
    "\001\002\000\006\015\u016d\024\u012b\001\002\000\004\012" +
    "\uff7e\001\002\000\074\002\uffeb\003\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\013\uffeb\016\uffeb\022\uffeb\034\uffeb\040" +
    "\uffeb\043\uffeb\044\uffeb\050\uffeb\052\uffeb\053\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\101\uffeb\106" +
    "\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\131\uffeb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\104\003\010\004\071\005\047\007\004\010" +
    "\036\012\066\013\040\014\072\015\011\017\032\020\057" +
    "\021\052\022\042\023\012\024\027\027\015\037\056\043" +
    "\006\053\045\062\007\063\073\064\061\065\030\066\063" +
    "\072\043\074\064\100\031\101\060\102\055\106\053\107" +
    "\024\110\062\111\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\u0164\044\u010c\045" +
    "\341\001\001\000\002\001\001\000\100\004\102\005\047" +
    "\007\004\010\036\013\040\014\072\015\011\017\032\020" +
    "\057\021\052\022\042\023\012\024\027\027\015\037\056" +
    "\043\006\053\045\062\007\063\073\064\061\065\030\066" +
    "\063\072\043\074\064\100\031\101\060\102\055\106\053" +
    "\107\024\110\062\111\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\302" +
    "\001\001\000\004\035\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\115" +
    "\007\120\010\131\013\040\030\110\043\117\066\104\072" +
    "\134\101\113\102\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\003\077\004\071\005\047\007\004" +
    "\010\036\013\040\014\072\015\011\017\032\020\057\021" +
    "\052\022\042\023\012\024\027\027\015\037\056\043\006" +
    "\053\045\062\007\063\073\064\061\065\030\066\063\072" +
    "\043\074\064\100\031\101\060\102\055\106\053\107\024" +
    "\110\062\111\017\001\001\000\100\004\102\005\047\007" +
    "\004\010\036\013\040\014\072\015\011\017\032\020\057" +
    "\021\052\022\042\023\012\024\027\027\015\037\056\043" +
    "\006\053\045\062\007\063\073\064\061\065\030\066\063" +
    "\072\043\074\064\100\031\101\060\102\055\106\053\107" +
    "\024\110\062\111\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\253" +
    "\007\120\010\131\013\040\043\117\066\104\072\134\101" +
    "\113\102\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\224\007\120\010\131\013\040\043\117\066\104\072\134" +
    "\101\113\102\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\040\043\117\101\203" +
    "\102\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\140\007\120\010\131\013\040\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\201\007\120\010" +
    "\131\013\040\043\117\066\104\072\134\101\113\102\055" +
    "\001\001\000\024\006\200\007\120\010\131\013\040\043" +
    "\117\066\104\072\134\101\113\102\055\001\001\000\024" +
    "\006\177\007\120\010\131\013\040\043\117\066\104\072" +
    "\134\101\113\102\055\001\001\000\024\006\176\007\120" +
    "\010\131\013\040\043\117\066\104\072\134\101\113\102" +
    "\055\001\001\000\024\006\175\007\120\010\131\013\040" +
    "\043\117\066\104\072\134\101\113\102\055\001\001\000" +
    "\024\006\174\007\120\010\131\013\040\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\024\006\173\007" +
    "\120\010\131\013\040\043\117\066\104\072\134\101\113" +
    "\102\055\001\001\000\024\006\172\007\120\010\131\013" +
    "\040\043\117\066\104\072\134\101\113\102\055\001\001" +
    "\000\024\006\171\007\120\010\131\013\040\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\024\006\170" +
    "\007\120\010\131\013\040\043\117\066\104\072\134\101" +
    "\113\102\055\001\001\000\024\006\167\007\120\010\131" +
    "\013\040\043\117\066\104\072\134\101\113\102\055\001" +
    "\001\000\024\006\166\007\120\010\131\013\040\043\117" +
    "\066\104\072\134\101\113\102\055\001\001\000\002\001" +
    "\001\000\024\006\164\007\120\010\131\013\040\043\117" +
    "\066\104\072\134\101\113\102\055\001\001\000\002\001" +
    "\001\000\024\006\163\007\120\010\131\013\040\043\117" +
    "\066\104\072\134\101\113\102\055\001\001\000\024\006" +
    "\162\007\120\010\131\013\040\043\117\066\104\072\134" +
    "\101\113\102\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\040\043\117\102\205\001\001\000\004\035" +
    "\207\001\001\000\024\006\213\007\120\010\131\013\040" +
    "\043\117\066\104\072\134\101\113\102\055\001\001\000" +
    "\002\001\001\000\024\006\211\007\120\010\131\013\040" +
    "\043\117\066\104\072\134\101\113\102\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\217\007\120\010\131\013\040\043" +
    "\117\066\104\070\216\071\220\072\134\101\113\102\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\222\007\120\010\131\013\040\043\117" +
    "\066\104\072\134\101\113\102\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\226" +
    "\007\120\010\131\013\040\043\117\066\104\072\134\101" +
    "\113\102\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\231\007\120\010\131\013\040\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\234\007\120\010\131\013" +
    "\040\043\117\066\104\072\134\101\113\102\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\040\043" +
    "\117\102\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\217\007\120\010\131\013" +
    "\040\043\117\066\104\070\243\071\220\072\134\101\113" +
    "\102\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\246\007\120\010\131\013\040\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\002\001\001\000" +
    "\024\006\250\007\120\010\131\013\040\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\262\007\120\010\131\013\040\036\261\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\265\007\120" +
    "\010\131\013\040\043\117\066\104\072\134\101\113\102" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\273\007\120\010\131\013\040\043\117\066\104\072\134" +
    "\101\113\102\055\103\274\104\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\277\007\120\010\131\013\040\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\305\007\120\010\131\013\040" +
    "\043\117\066\104\072\134\101\113\102\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\262\007\120\010\131\013\040\036\315\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\321\007\120\010\131\013\040\043\117\066\104\072" +
    "\134\101\113\102\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\326\007\120\010\131\013\040\043\117\066\104\072\134" +
    "\101\113\102\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\040\043\336\073\337\076\334\001\001\000" +
    "\010\013\040\043\336\073\377\001\001\000\002\001\001" +
    "\000\006\044\342\045\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\344\033\347\035\350\001\001\000\002\001\001\000" +
    "\024\006\213\007\120\010\131\013\040\043\117\066\104" +
    "\072\134\101\113\102\055\001\001\000\030\006\273\007" +
    "\120\010\131\013\040\043\117\066\104\072\134\101\113" +
    "\102\055\103\274\104\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\360\007\120\010" +
    "\131\013\040\042\356\043\117\066\104\072\134\077\357" +
    "\101\113\102\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\364\007\120\010\131" +
    "\013\040\035\365\040\367\041\362\042\366\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\002\001\001" +
    "\000\032\006\364\007\120\010\131\013\040\040\367\041" +
    "\362\042\366\043\117\066\104\072\134\101\113\102\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\364\007\120\010\131\013\040\040\373\042" +
    "\366\043\117\066\104\072\134\101\113\102\055\001\001" +
    "\000\002\001\001\000\004\045\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\u0103\007\120\010\131\013" +
    "\040\043\117\066\104\072\134\101\113\102\055\001\001" +
    "\000\002\001\001\000\024\006\u0105\007\120\010\131\013" +
    "\040\043\117\066\104\072\134\101\113\102\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\u0109\013" +
    "\040\017\u010a\043\u010b\101\u0108\102\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u010c\045\341\001\001\000\002\001\001\000\024\006\u010e" +
    "\007\120\010\131\013\040\043\117\066\104\072\134\101" +
    "\113\102\055\001\001\000\002\001\001\000\024\007\u0110" +
    "\010\u0116\013\040\017\u0115\031\u0114\037\u0112\043\117\101" +
    "\u0113\102\055\001\001\000\002\001\001\000\004\035\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0118" +
    "\001\001\000\002\001\001\000\024\006\u011a\007\120\010" +
    "\131\013\040\043\117\066\104\072\134\101\113\102\055" +
    "\001\001\000\002\001\001\000\024\007\u0110\010\u0116\013" +
    "\040\017\u0115\031\u011c\037\u0112\043\117\101\u0113\102\055" +
    "\001\001\000\002\001\001\000\004\002\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\040\043\u0123" +
    "\060\u0121\061\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\040\043\u0125\001\001" +
    "\000\002\001\001\000\010\032\u0127\033\347\035\350\001" +
    "\001\000\002\001\001\000\010\032\u0129\033\347\035\350" +
    "\001\001\000\002\001\001\000\010\013\040\043\u0123\060" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\273\007\120\010\131\013\040\043\117\066\104\072\134" +
    "\077\u0132\101\113\102\055\103\274\104\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\365\001\001" +
    "\000\024\006\u0135\007\120\010\131\013\040\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\002\001\001" +
    "\000\024\006\u0137\007\120\010\131\013\040\043\117\066" +
    "\104\072\134\101\113\102\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\u013b\007" +
    "\120\010\131\013\040\043\117\066\104\072\134\101\113" +
    "\102\055\001\001\000\002\001\001\000\004\002\u013d\001" +
    "\001\000\002\001\001\000\024\006\u013f\007\120\010\131" +
    "\013\040\043\117\066\104\072\134\101\113\102\055\001" +
    "\001\000\002\001\001\000\004\002\u0141\001\001\000\002" +
    "\001\001\000\010\002\u0144\024\u0145\025\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\262\007\120\010" +
    "\131\013\040\036\u014a\043\117\066\104\072\134\101\113" +
    "\102\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\u014e\007\120" +
    "\010\131\013\040\043\117\066\104\072\134\101\113\102" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\u0151\007\120\010\131\013\040\043\117\066\104\072" +
    "\134\101\113\102\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\u0156\052\u0154\001\001\000\006\050" +
    "\u015d\051\u015b\001\001\000\024\006\u0157\007\120\010\131" +
    "\013\040\043\117\066\104\072\134\101\113\102\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\003\u0159" +
    "\004\071\005\047\007\004\010\036\013\040\014\072\015" +
    "\011\017\032\020\057\021\052\022\042\023\012\024\027" +
    "\027\015\037\056\043\006\053\045\062\007\063\073\064" +
    "\061\065\030\066\063\072\043\074\064\100\031\101\060" +
    "\102\055\106\053\107\024\110\062\111\017\001\001\000" +
    "\100\004\102\005\047\007\004\010\036\013\040\014\072" +
    "\015\011\017\032\020\057\021\052\022\042\023\012\024" +
    "\027\027\015\037\056\043\006\053\045\062\007\063\073" +
    "\064\061\065\030\066\063\072\043\074\064\100\031\101" +
    "\060\102\055\106\053\107\024\110\062\111\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\003\u015f\004\071\005\047\007\004" +
    "\010\036\013\040\014\072\015\011\017\032\020\057\021" +
    "\052\022\042\023\012\024\027\027\015\037\056\043\006" +
    "\053\045\062\007\063\073\064\061\065\030\066\063\072" +
    "\043\074\064\100\031\101\060\102\055\106\053\107\024" +
    "\110\062\111\017\001\001\000\100\004\102\005\047\007" +
    "\004\010\036\013\040\014\072\015\011\017\032\020\057" +
    "\021\052\022\042\023\012\024\027\027\015\037\056\043" +
    "\006\053\045\062\007\063\073\064\061\065\030\066\063" +
    "\072\043\074\064\100\031\101\060\102\055\106\053\107" +
    "\024\110\062\111\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\344\033\347\035\350\001\001\000\012" +
    "\013\040\043\u0123\060\u0121\061\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\040" +
    "\043\u0123\060\u0121\061\u016b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= DOWHILE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= BREAK puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= CONTINUE puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= DECLARACIONCONSTANTE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= CONCATENAR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Concatenar inst = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= SETESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetEscribir inst = (SetEscribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= SETAPPEND puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetApend inst = (SetApend)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= CLOSEARCHIVO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CerrarArchivo inst = (CerrarArchivo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= ESCRIBIR puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Escribir inst = (Escribir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CLOSEARCHIVO ::= tclose pari pard 
            {
              CerrarArchivo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CerrarArchivo(tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLOSEARCHIVO",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SETESCRIBIR ::= escritura pari EXP pard 
            {
              SetEscribir RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetEscribir(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETESCRIBIR",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SETAPPEND ::= tapend pari EXP pard 
            {
              SetApend RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new SetApend(e, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETAPPEND",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESCRIBIR ::= escribir pari cadena pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESCRIBIR ::= escribir pari cadena coma LVALORES pard 
            {
              Escribir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Escribir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NDIM ::= LEXP 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = new Asignacion(origen , valor, origenright, origenleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= multi ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= tatexto pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aTexto(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= CONCATENAR 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Concatenar v = (Concatenar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= taentero pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aEntero(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= tadecimal pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aDecimal(expresion, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= teql pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Equals(expresion1, expresion2, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONCATENAR ::= tconcatenar pari EXP coma EXP pard 
            {
              Concatenar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Concatenar(exp1,exp2,tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENAR",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AUMENTO ::= ACCESO aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECREMENTO ::= ACCESO decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ORIGEN ::= TIPO 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo id = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id.nombreTipo(), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CABECERAMET ::= TIPO NDIMVACIO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); 
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTINUE ::= continuar 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BREAK ::= romper 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            lista.add(defecto);
            RESULT = new Switch(condicion, lista, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DOWHILE ::= hacer BLOQUE donde pari EXP pard 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo act = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ACTUALIZACION ::= AUMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ACTUALIZACION ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ACTUALIZACION ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ACTUALIZACION ::= ASIGV 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
