
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\012\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\077\010\000\002\064\004" +
    "\000\002\046\004\000\002\046\004\000\002\005\004\000" +
    "\002\044\005\000\002\044\003\000\002\045\003\000\002" +
    "\045\005\000\002\045\004\000\002\045\006\000\002\045" +
    "\006\000\002\045\006\000\002\032\003\000\002\032\003" +
    "\000\002\033\005\000\002\033\004\000\002\034\006\000" +
    "\002\034\005\000\002\076\005\000\002\042\005\000\002" +
    "\041\005\000\002\041\003\000\002\040\003\000\002\040" +
    "\003\000\002\017\005\000\002\037\006\000\002\103\003" +
    "\000\002\103\003\000\002\102\006\000\002\070\003\000" +
    "\002\070\002\000\002\071\005\000\002\071\003\000\002" +
    "\014\006\000\002\014\010\000\002\015\006\000\002\015" +
    "\010\000\002\036\005\000\002\036\003\000\002\035\006" +
    "\000\002\035\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\005\000" +
    "\002\006\003\000\002\006\006\000\002\007\004\000\002" +
    "\007\004\000\002\010\004\000\002\010\004\000\002\100" +
    "\005\000\002\100\003\000\002\101\003\000\002\101\004" +
    "\000\002\043\003\000\002\043\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\073\007\000\002\073\006\000\002\075\005\000\002\075" +
    "\004\000\002\072\004\000\002\062\004\000\002\063\007" +
    "\000\002\063\007\000\002\002\005\000\002\002\004\000" +
    "\002\065\005\000\002\065\004\000\002\031\003\000\002" +
    "\061\005\000\002\061\003\000\002\061\002\000\002\060" +
    "\004\000\002\060\005\000\002\060\005\000\002\060\006" +
    "\000\002\024\007\000\002\024\011\000\002\025\003\000" +
    "\002\025\003\000\002\066\010\000\002\066\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\036\003\037\004\020\005\031\006\027\007" +
    "\005\016\035\022\012\034\013\050\010\057\040\060\034" +
    "\061\007\062\041\125\042\001\002\000\004\016\uffa0\001" +
    "\002\000\004\016\uff9b\001\002\000\004\011\364\001\002" +
    "\000\004\016\360\001\002\000\004\014\351\001\002\000" +
    "\124\002\uffa3\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\011\uffa3\013\uffa3\015\uffa3\016\uffa3\017\175\020\uffa3\021" +
    "\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\050\uffa3\052\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\117\uffa3\120\uffa3\121\uffa3" +
    "\123\uffa3\124\uffa3\125\uffa3\133\uffa3\134\uffa3\135\uffa3\136" +
    "\uffa3\137\uffa3\141\uffa3\001\002\000\004\014\340\001\002" +
    "\000\004\016\334\001\002\000\004\011\333\001\002\000" +
    "\004\011\332\001\002\000\042\002\ufff2\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\013\ufff2\016\ufff2\022\ufff2\034" +
    "\ufff2\050\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\125\ufff2" +
    "\001\002\000\004\011\331\001\002\000\004\016\uff9e\001" +
    "\002\000\042\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\013\ufff4\016\ufff4\022\ufff4\034\ufff4\050\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\125\ufff4\001\002\000\004" +
    "\011\330\001\002\000\042\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\013\ufff5\016\ufff5\022\ufff5\034\ufff5" +
    "\050\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\125\ufff5\001" +
    "\002\000\004\011\327\001\002\000\006\021\325\121\167" +
    "\001\002\000\040\002\000\003\037\004\020\005\031\006" +
    "\027\007\005\016\035\022\012\034\013\050\010\057\040" +
    "\060\034\061\007\062\041\125\042\001\002\000\004\016" +
    "\uff9d\001\002\000\004\016\307\001\002\000\004\016\uff9c" +
    "\001\002\000\042\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\013\ufffe\016\ufffe\022\ufffe\034\ufffe\050\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\062\ufffe\125\ufffe\001\002\000" +
    "\004\012\155\001\002\000\004\014\300\001\002\000\014" +
    "\014\143\016\uff9f\017\175\021\uffa2\121\uffa2\001\002\000" +
    "\004\011\274\001\002\000\042\002\ufff1\003\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\013\ufff1\016\ufff1\022\ufff1\034" +
    "\ufff1\050\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\125\ufff1" +
    "\001\002\000\036\011\272\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\004\016\205\001" +
    "\002\000\004\014\050\001\002\000\004\011\047\001\002" +
    "\000\004\002\046\001\002\000\042\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\013\ufff6\016\ufff6\022\ufff6" +
    "\034\ufff6\050\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\125" +
    "\ufff6\001\002\000\004\002\001\001\002\000\042\002\ufff9" +
    "\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\013\ufff9\016" +
    "\ufff9\022\ufff9\034\ufff9\050\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\125\ufff9\001\002\000\034\014\072\016\065\035" +
    "\064\067\071\117\057\120\066\122\054\134\063\142\052" +
    "\143\061\144\067\145\053\146\055\001\002\000\116\002" +
    "\uffb2\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2" +
    "\013\uffb2\015\uffb2\016\uffb2\020\uffb2\022\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\050\uffb2\052\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\117\uffb2\120\uffb2\123\uffb2\124\uffb2\125\uffb2\133\uffb2" +
    "\134\uffb2\135\uffb2\136\uffb2\137\uffb2\141\uffb2\001\002\000" +
    "\116\002\uffae\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\011\uffae\013\uffae\015\uffae\016\uffae\020\uffae\022\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\050\uffae\052\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\117\uffae\120\uffae\123\uffae\124\uffae\125\uffae" +
    "\133\uffae\134\uffae\135\uffae\136\uffae\137\uffae\141\uffae\001" +
    "\002\000\116\002\uffb0\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\011\uffb0\013\uffb0\015\uffb0\016\uffb0\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\050\uffb0\052\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0" +
    "\125\uffb0\133\uffb0\134\uffb0\135\uffb0\136\uffb0\137\uffb0\141" +
    "\uffb0\001\002\000\034\014\072\016\065\035\064\067\071" +
    "\117\057\120\066\122\054\134\063\142\052\143\061\144" +
    "\067\145\053\146\055\001\002\000\116\002\uffaf\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\050" +
    "\uffaf\052\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\117\uffaf" +
    "\120\uffaf\123\uffaf\124\uffaf\125\uffaf\133\uffaf\134\uffaf\135" +
    "\uffaf\136\uffaf\137\uffaf\141\uffaf\001\002\000\120\002\uffac" +
    "\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac\013" +
    "\uffac\015\uffac\016\uffac\020\uffac\022\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\050\uffac\052\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\117\uffac\120\uffac\121\167\123\uffac\124\uffac\125\uffac\133" +
    "\uffac\134\uffac\135\uffac\136\uffac\137\uffac\141\uffac\001\002" +
    "\000\034\014\072\016\065\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\050\015\153\025\114\026\104\027" +
    "\116\030\101\031\075\032\102\033\105\052\112\117\077" +
    "\120\107\123\115\124\076\133\113\134\100\135\106\136" +
    "\103\137\110\141\111\001\002\000\116\002\uffad\003\uffad" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\013\uffad\015" +
    "\uffad\016\uffad\020\uffad\022\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\050" +
    "\uffad\052\uffad\057\uffad\060\uffad\061\uffad\062\uffad\117\uffad" +
    "\120\uffad\123\uffad\124\uffad\125\uffad\133\uffad\134\uffad\135" +
    "\uffad\136\uffad\137\uffad\141\uffad\001\002\000\116\002\uffb4" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013" +
    "\uffb4\015\uffb4\016\uffb4\020\uffb4\022\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\050\uffb4\052\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\117\uffb4\120\uffb4\123\uffb4\124\uffb4\125\uffb4\133\uffb4\134" +
    "\uffb4\135\uffb4\136\uffb4\137\uffb4\141\uffb4\001\002\000\034" +
    "\014\072\016\065\035\064\067\071\117\057\120\066\122" +
    "\054\134\063\142\052\143\061\144\067\145\053\146\055" +
    "\001\002\000\116\002\uffaa\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\015\uffaa\016\uffaa\020\uffaa" +
    "\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\050\uffaa\052\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\117\uffaa\120\uffaa\123\uffaa\124" +
    "\uffaa\125\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa\137\uffaa" +
    "\141\uffaa\001\002\000\124\002\uffa2\003\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\011\uffa2\013\uffa2\014\143\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\050\uffa2\052\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\117" +
    "\uffa2\120\uffa2\121\uffa2\123\uffa2\124\uffa2\125\uffa2\133\uffa2" +
    "\134\uffa2\135\uffa2\136\uffa2\137\uffa2\141\uffa2\001\002\000" +
    "\034\014\072\016\065\035\064\067\071\117\057\120\066" +
    "\122\054\134\063\142\052\143\061\144\067\145\053\146" +
    "\055\001\002\000\116\002\uffb1\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\011\uffb1\013\uffb1\015\uffb1\016\uffb1\020" +
    "\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\050\uffb1\052\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\117\uffb1\120\uffb1\123\uffb1" +
    "\124\uffb1\125\uffb1\133\uffb1\134\uffb1\135\uffb1\136\uffb1\137" +
    "\uffb1\141\uffb1\001\002\000\116\002\uffb3\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\011\uffb3\013\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\050\uffb3\052" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\117\uffb3\120\uffb3" +
    "\123\uffb3\124\uffb3\125\uffb3\133\uffb3\134\uffb3\135\uffb3\136" +
    "\uffb3\137\uffb3\141\uffb3\001\002\000\004\014\137\001\002" +
    "\000\034\014\072\016\065\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\050\015\074\025\114\026\104\027" +
    "\116\030\101\031\075\032\102\033\105\052\112\117\077" +
    "\120\107\123\115\124\076\133\113\134\100\135\106\136" +
    "\103\137\110\141\111\001\002\000\116\002\uffab\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\013\uffab\015" +
    "\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\050" +
    "\uffab\052\uffab\057\uffab\060\uffab\061\uffab\062\uffab\117\uffab" +
    "\120\uffab\123\uffab\124\uffab\125\uffab\133\uffab\134\uffab\135" +
    "\uffab\136\uffab\137\uffab\141\uffab\001\002\000\034\014\072" +
    "\016\065\035\064\067\071\117\057\120\066\122\054\134" +
    "\063\142\052\143\061\144\067\145\053\146\055\001\002" +
    "\000\034\014\072\016\065\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\116\002\uffa8\003\uffa8\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\011\uffa8\013\uffa8\015\uffa8\016\uffa8" +
    "\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\050\uffa8\052\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\117\uffa8\120\uffa8\123" +
    "\uffa8\124\uffa8\125\uffa8\133\uffa8\134\uffa8\135\uffa8\136\uffa8" +
    "\137\uffa8\141\uffa8\001\002\000\034\014\072\016\065\035" +
    "\064\067\071\117\057\120\066\122\054\134\063\142\052" +
    "\143\061\144\067\145\053\146\055\001\002\000\034\014" +
    "\072\016\065\035\064\067\071\117\057\120\066\122\054" +
    "\134\063\142\052\143\061\144\067\145\053\146\055\001" +
    "\002\000\034\014\072\016\065\035\064\067\071\117\057" +
    "\120\066\122\054\134\063\142\052\143\061\144\067\145" +
    "\053\146\055\001\002\000\034\014\072\016\065\035\064" +
    "\067\071\117\057\120\066\122\054\134\063\142\052\143" +
    "\061\144\067\145\053\146\055\001\002\000\034\014\072" +
    "\016\065\035\064\067\071\117\057\120\066\122\054\134" +
    "\063\142\052\143\061\144\067\145\053\146\055\001\002" +
    "\000\034\014\072\016\065\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\034\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\116\002\uffa6\003" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\050\uffa6\052\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\117" +
    "\uffa6\120\uffa6\123\uffa6\124\uffa6\125\uffa6\133\uffa6\134\uffa6" +
    "\135\uffa6\136\uffa6\137\uffa6\141\uffa6\001\002\000\034\014" +
    "\072\016\065\035\064\067\071\117\057\120\066\122\054" +
    "\134\063\142\052\143\061\144\067\145\053\146\055\001" +
    "\002\000\034\014\072\016\065\035\064\067\071\117\057" +
    "\120\066\122\054\134\063\142\052\143\061\144\067\145" +
    "\053\146\055\001\002\000\004\016\123\001\002\000\034" +
    "\014\072\016\065\035\064\067\071\117\057\120\066\122" +
    "\054\134\063\142\052\143\061\144\067\145\053\146\055" +
    "\001\002\000\034\014\072\016\065\035\064\067\071\117" +
    "\057\120\066\122\054\134\063\142\052\143\061\144\067" +
    "\145\053\146\055\001\002\000\034\014\072\016\065\035" +
    "\064\067\071\117\057\120\066\122\054\134\063\142\052" +
    "\143\061\144\067\145\053\146\055\001\002\000\034\014" +
    "\072\016\065\035\064\067\071\117\057\120\066\122\054" +
    "\134\063\142\052\143\061\144\067\145\053\146\055\001" +
    "\002\000\116\002\uffbf\003\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\011\uffbf\013\uffbf\015\uffbf\016\uffbf\020\uffbf\022" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\105\034\uffbf\050\uffbf\052\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\117\077\120\107\123\uffbf\124\uffbf" +
    "\125\uffbf\133\113\134\100\135\106\136\103\137\uffbf\141" +
    "\111\001\002\000\116\002\uffc6\003\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\016\uffc6\020" +
    "\uffc6\022\uffc6\024\uffc6\025\114\026\104\027\116\030\101" +
    "\031\075\032\102\033\105\034\uffc6\050\uffc6\052\112\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\117\077\120\107\123\uffc6" +
    "\124\uffc6\125\uffc6\133\113\134\100\135\106\136\103\137" +
    "\110\141\111\001\002\000\116\002\uffc1\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\011\uffc1\013\uffc1\015\uffc1\016" +
    "\uffc1\020\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027\116" +
    "\030\101\031\075\032\102\033\105\034\uffc1\050\uffc1\052" +
    "\112\057\uffc1\060\uffc1\061\uffc1\062\uffc1\117\077\120\107" +
    "\123\uffc1\124\uffc1\125\uffc1\133\113\134\100\135\106\136" +
    "\103\137\uffc1\141\111\001\002\000\116\002\uffbb\003\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\013\uffbb\015" +
    "\uffbb\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\105\034\uffbb\050" +
    "\uffbb\052\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\117\077" +
    "\120\107\123\uffbb\124\uffbb\125\uffbb\133\uffbb\134\uffbb\135" +
    "\106\136\103\137\uffbb\141\111\001\002\000\116\002\uffc3" +
    "\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\013" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\050\uffc3\052\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\117\uffc3\120\uffc3\123\uffc3\124\uffc3\125\uffc3\133\uffc3\134" +
    "\uffc3\135\uffc3\136\uffc3\137\uffc3\141\uffc3\001\002\000\116" +
    "\002\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\020\uffb7\022\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\105\034\uffb7\050\uffb7\052\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\117\077\120\107\123\uffb7\124\uffb7\125\uffb7\133" +
    "\uffb7\134\uffb7\135\uffb7\136\uffb7\137\uffb7\141\uffb7\001\002" +
    "\000\116\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\011\uffc4\013\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4" +
    "\024\uffc4\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\034\uffc4\050\uffc4\052\112\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\117\077\120\107\123\uffc4\124\uffc4\125" +
    "\uffc4\133\113\134\100\135\106\136\103\137\uffc4\141\111" +
    "\001\002\000\116\002\uffb9\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\011\uffb9\013\uffb9\015\uffb9\016\uffb9\020\uffb9" +
    "\022\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\105\034\uffb9\050\uffb9\052\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\117\077\120\107\123\uffb9\124" +
    "\uffb9\125\uffb9\133\uffb9\134\uffb9\135\uffb9\136\uffb9\137\uffb9" +
    "\141\uffb9\001\002\000\116\002\uffb6\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\013\uffb6\015\uffb6\016\uffb6" +
    "\020\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\050\uffb6\052\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\117\077\120\107\123" +
    "\uffb6\124\uffb6\125\uffb6\133\uffb6\134\uffb6\135\uffb6\136\uffb6" +
    "\137\uffb6\141\uffb6\001\002\000\116\002\uffc0\003\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\116\030\101\031\075\032\102\033\105\034\uffc0\050\uffc0" +
    "\052\112\057\uffc0\060\uffc0\061\uffc0\062\uffc0\117\077\120" +
    "\107\123\uffc0\124\uffc0\125\uffc0\133\113\134\100\135\106" +
    "\136\103\137\uffc0\141\111\001\002\000\116\002\uffb8\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\022\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\105\034\uffb8" +
    "\050\uffb8\052\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\117" +
    "\077\120\107\123\uffb8\124\uffb8\125\uffb8\133\uffb8\134\uffb8" +
    "\135\uffb8\136\uffb8\137\uffb8\141\uffb8\001\002\000\116\002" +
    "\uffbe\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\105" +
    "\034\uffbe\050\uffbe\052\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\117\077\120\107\123\uffbe\124\uffbe\125\uffbe\133\113" +
    "\134\100\135\106\136\103\137\uffbe\141\111\001\002\000" +
    "\116\002\uffbd\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\013\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\105\034\uffbd\050\uffbd\052\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\117\077\120\107\123\uffbd\124\uffbd\125\uffbd" +
    "\133\113\134\100\135\106\136\103\137\uffbd\141\111\001" +
    "\002\000\116\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\011\uffba\013\uffba\015\uffba\016\uffba\020\uffba\022" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\105\034\uffba\050\uffba\052\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\117\077\120\107\123\uffba\124\uffba" +
    "\125\uffba\133\uffba\134\uffba\135\106\136\103\137\uffba\141" +
    "\111\001\002\000\116\002\uffc5\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5\016\uffc5\020" +
    "\uffc5\022\uffc5\024\uffc5\025\114\026\104\027\116\030\101" +
    "\031\075\032\102\033\105\034\uffc5\050\uffc5\052\112\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\117\077\120\107\123\115" +
    "\124\uffc5\125\uffc5\133\113\134\100\135\106\136\103\137" +
    "\110\141\111\001\002\000\116\002\uffbc\003\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013\uffbc\015\uffbc\016" +
    "\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\105\034\uffbc\050\uffbc\052" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\117\077\120\107" +
    "\123\uffbc\124\uffbc\125\uffbc\133\113\134\100\135\106\136" +
    "\103\137\uffbc\141\111\001\002\000\004\016\140\001\002" +
    "\000\004\015\141\001\002\000\116\002\uffa9\003\uffa9\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\013\uffa9\015\uffa9" +
    "\016\uffa9\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\050\uffa9" +
    "\052\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\117\uffa9\120" +
    "\uffa9\123\uffa9\124\uffa9\125\uffa9\133\uffa9\134\uffa9\135\uffa9" +
    "\136\uffa9\137\uffa9\141\uffa9\001\002\000\112\002\uffa5\003" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\013\uffa5" +
    "\015\uffa5\016\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\050\uffa5\052\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\123" +
    "\uffa5\124\uffa5\125\uffa5\133\uffa5\134\uffa5\135\uffa5\136\uffa5" +
    "\137\uffa5\141\uffa5\001\002\000\036\014\072\015\uffd1\016" +
    "\065\035\064\067\071\117\057\120\066\122\054\134\063" +
    "\142\052\143\061\144\067\145\053\146\055\001\002\000" +
    "\004\015\151\001\002\000\052\015\uffcf\024\uffcf\025\114" +
    "\026\104\027\116\030\101\031\075\032\102\033\105\052" +
    "\112\117\077\120\107\123\115\124\076\133\113\134\100" +
    "\135\106\136\103\137\110\141\111\001\002\000\006\015" +
    "\uffd2\024\147\001\002\000\034\014\072\016\065\035\064" +
    "\067\071\117\057\120\066\122\054\134\063\142\052\143" +
    "\061\144\067\145\053\146\055\001\002\000\052\015\uffd0" +
    "\024\uffd0\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\052\112\117\077\120\107\123\115\124\076" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\116\002\uff81\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\011\uff81\013\uff81\015\uff81\016\uff81\020\uff81\022" +
    "\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\034\uff81\050\uff81\052\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\117\uff81\120\uff81\123\uff81\124\uff81" +
    "\125\uff81\133\uff81\134\uff81\135\uff81\136\uff81\137\uff81\141" +
    "\uff81\001\002\000\116\002\uffb5\003\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\011\uffb5\013\uffb5\015\uffb5\016\uffb5\020" +
    "\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\105\034\uffb5\050\uffb5\052\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\117\077\120\107\123\uffb5" +
    "\124\uffb5\125\uffb5\133\uffb5\134\uffb5\135\106\136\103\137" +
    "\uffb5\141\111\001\002\000\004\012\155\001\002\000\044" +
    "\002\uff86\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86\013" +
    "\uff86\016\uff86\022\uff86\034\uff86\050\uff86\057\uff86\060\uff86" +
    "\061\uff86\062\uff86\125\uff86\127\162\001\002\000\040\003" +
    "\037\004\020\005\031\006\027\007\005\013\157\016\035" +
    "\022\012\034\013\050\010\057\040\060\034\061\007\062" +
    "\041\125\042\001\002\000\040\003\037\004\020\005\031" +
    "\006\027\007\005\013\161\016\035\022\012\034\013\050" +
    "\010\057\040\060\034\061\007\062\041\125\042\001\002" +
    "\000\044\002\uff91\003\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\013\uff91\016\uff91\022\uff91\034\uff91\050\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\125\uff91\127\uff91\001\002\000" +
    "\042\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\013\uffff\016\uffff\022\uffff\034\uffff\050\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\125\uffff\001\002\000\044\002\uff92" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\013\uff92\016" +
    "\uff92\022\uff92\034\uff92\050\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\125\uff92\127\uff92\001\002\000\006\012\155\125" +
    "\042\001\002\000\042\002\uff85\003\uff85\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\013\uff85\016\uff85\022\uff85\034\uff85\050" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\125\uff85\001\002" +
    "\000\042\002\uff83\003\uff83\004\uff83\005\uff83\006\uff83\007" +
    "\uff83\013\uff83\016\uff83\022\uff83\034\uff83\050\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\125\uff83\001\002\000\042\002" +
    "\uff84\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\013\uff84" +
    "\016\uff84\022\uff84\034\uff84\050\uff84\057\uff84\060\uff84\061" +
    "\uff84\062\uff84\125\uff84\001\002\000\112\002\uffa7\003\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\013\uffa7\015" +
    "\uffa7\016\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\050" +
    "\uffa7\052\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\123\uffa7" +
    "\124\uffa7\125\uffa7\133\uffa7\134\uffa7\135\uffa7\136\uffa7\137" +
    "\uffa7\141\uffa7\001\002\000\004\016\171\001\002\000\124" +
    "\002\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011" +
    "\uffa4\013\uffa4\015\uffa4\016\uffa4\017\175\020\uffa4\021\uffa4" +
    "\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\050\uffa4\052\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\117\uffa4\120\uffa4\121\uffa4\123" +
    "\uffa4\124\uffa4\125\uffa4\133\uffa4\134\uffa4\135\uffa4\136\uffa4" +
    "\137\uffa4\141\uffa4\001\002\000\126\002\uffa2\003\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\011\uffa2\013\uffa2\014\172" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\050\uffa2\052\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\117\uffa2\120\uffa2\121\uffa2\123\uffa2\124\uffa2" +
    "\125\uffa2\133\uffa2\134\uffa2\135\uffa2\136\uffa2\137\uffa2\141" +
    "\uffa2\001\002\000\036\014\072\015\uffd1\016\065\035\064" +
    "\067\071\117\057\120\066\122\054\134\063\142\052\143" +
    "\061\144\067\145\053\146\055\001\002\000\004\015\174" +
    "\001\002\000\116\002\uff82\003\uff82\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\011\uff82\013\uff82\015\uff82\016\uff82\020\uff82" +
    "\022\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\050\uff82\052\uff82\057\uff82" +
    "\060\uff82\061\uff82\062\uff82\117\uff82\120\uff82\123\uff82\124" +
    "\uff82\125\uff82\133\uff82\134\uff82\135\uff82\136\uff82\137\uff82" +
    "\141\uff82\001\002\000\034\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\124\002\uffa1\003" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\011\uffa1\013\uffa1" +
    "\015\uffa1\016\uffa1\017\177\020\uffa1\021\uffa1\022\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\050\uffa1\052\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\117\uffa1\120\uffa1\121\uffa1\123\uffa1\124\uffa1" +
    "\125\uffa1\133\uffa1\134\uffa1\135\uffa1\136\uffa1\137\uffa1\141" +
    "\uffa1\001\002\000\034\014\072\016\065\035\064\067\071" +
    "\117\057\120\066\122\054\134\063\142\052\143\061\144" +
    "\067\145\053\146\055\001\002\000\050\020\201\025\114" +
    "\026\104\027\116\030\101\031\075\032\102\033\105\052" +
    "\112\117\077\120\107\123\115\124\076\133\113\134\100" +
    "\135\106\136\103\137\110\141\111\001\002\000\124\002" +
    "\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\050\uffc8\052\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\117\uffc8\120\uffc8\121\uffc8\123\uffc8" +
    "\124\uffc8\125\uffc8\133\uffc8\134\uffc8\135\uffc8\136\uffc8\137" +
    "\uffc8\141\uffc8\001\002\000\050\020\203\025\114\026\104" +
    "\027\116\030\101\031\075\032\102\033\105\052\112\117" +
    "\077\120\107\123\115\124\076\133\113\134\100\135\106" +
    "\136\103\137\110\141\111\001\002\000\124\002\uffc7\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\050\uffc7\052\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\117\uffc7\120\uffc7\121\uffc7\123\uffc7\124\uffc7" +
    "\125\uffc7\133\uffc7\134\uffc7\135\uffc7\136\uffc7\137\uffc7\141" +
    "\uffc7\001\002\000\112\002\uffc2\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\050\uffc2\052\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\123\uffc2\124\uffc2\125\uffc2" +
    "\133\uffc2\134\uffc2\135\uffc2\136\uffc2\137\uffc2\141\uffc2\001" +
    "\002\000\004\012\206\001\002\000\016\004\020\005\031" +
    "\006\027\007\005\013\211\016\207\001\002\000\004\016" +
    "\uff9f\001\002\000\016\004\020\005\031\006\027\007\005" +
    "\013\265\016\207\001\002\000\004\011\uff99\001\002\000" +
    "\004\016\217\001\002\000\004\011\214\001\002\000\016" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\013\uff97\016\uff97\001" +
    "\002\000\006\011\uffea\024\uffea\001\002\000\006\011\uff96" +
    "\024\263\001\002\000\012\011\uffe9\017\222\021\223\024" +
    "\uffe9\001\002\000\014\011\uffe2\015\uffe2\017\260\021\uffe2" +
    "\024\uffe2\001\002\000\010\011\uffe7\021\241\024\uffe7\001" +
    "\002\000\036\014\072\016\065\020\236\035\064\067\071" +
    "\117\057\120\066\122\054\134\063\142\052\143\061\144" +
    "\067\145\053\146\055\001\002\000\036\014\072\016\065" +
    "\035\064\067\071\070\232\117\057\120\066\122\054\134" +
    "\063\142\052\143\061\144\067\145\053\146\055\001\002" +
    "\000\014\011\uffe3\015\uffe3\017\225\021\uffe3\024\uffe3\001" +
    "\002\000\004\020\226\001\002\000\014\011\uffe1\015\uffe1" +
    "\017\uffe1\021\uffe1\024\uffe1\001\002\000\006\011\uffe8\024" +
    "\uffe8\001\002\000\112\002\uffd5\003\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\013\uffd5\016\uffd5\022\uffd5\024" +
    "\uffd5\025\114\026\104\027\116\030\101\031\075\032\102" +
    "\033\105\034\uffd5\050\uffd5\052\112\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\117\077\120\107\123\115\124\076\125\uffd5" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\046\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\013\uffd4\016\uffd4\022\uffd4\024\uffd4\034" +
    "\uffd4\050\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\125\uffd4" +
    "\001\002\000\004\014\233\001\002\000\034\014\072\016" +
    "\065\035\064\067\071\117\057\120\066\122\054\134\063" +
    "\142\052\143\061\144\067\145\053\146\055\001\002\000" +
    "\050\015\235\025\114\026\104\027\116\030\101\031\075" +
    "\032\102\033\105\052\112\117\077\120\107\123\115\124" +
    "\076\133\113\134\100\135\106\136\103\137\110\141\111" +
    "\001\002\000\046\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\013\uffd3\016\uffd3\022\uffd3\024\uffd3" +
    "\034\uffd3\050\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\125" +
    "\uffd3\001\002\000\014\011\uffe0\015\uffe0\017\uffe0\021\uffe0" +
    "\024\uffe0\001\002\000\050\020\240\025\114\026\104\027" +
    "\116\030\101\031\075\032\102\033\105\052\112\117\077" +
    "\120\107\123\115\124\076\133\113\134\100\135\106\136" +
    "\103\137\110\141\111\001\002\000\014\011\uffde\015\uffde" +
    "\017\uffde\021\uffde\024\uffde\001\002\000\036\012\245\014" +
    "\072\016\065\035\064\067\071\117\057\120\066\122\054" +
    "\134\063\142\052\143\061\144\067\145\053\146\055\001" +
    "\002\000\006\011\uffe5\024\uffe5\001\002\000\006\011\uffe6" +
    "\024\uffe6\001\002\000\052\011\uffe4\024\uffe4\025\114\026" +
    "\104\027\116\030\101\031\075\032\102\033\105\052\112" +
    "\117\077\120\107\123\115\124\076\133\113\134\100\135" +
    "\106\136\103\137\110\141\111\001\002\000\040\012\253" +
    "\014\072\016\065\017\175\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\006\013\255\024\256\001\002\000" +
    "\006\013\uffd8\024\uffd8\001\002\000\006\013\uffda\024\uffda" +
    "\001\002\000\052\013\uffd9\024\uffd9\025\114\026\104\027" +
    "\116\030\101\031\075\032\102\033\105\052\112\117\077" +
    "\120\107\123\115\124\076\133\113\134\100\135\106\136" +
    "\103\137\110\141\111\001\002\000\006\013\254\017\177" +
    "\001\002\000\036\012\253\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\046\002\uffdd\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\013\uffdd" +
    "\016\uffdd\022\uffdd\024\uffdd\034\uffdd\050\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\125\uffdd\001\002\000\010\011\uffdc" +
    "\013\uffdc\024\uffdc\001\002\000\036\012\253\014\072\016" +
    "\065\035\064\067\071\117\057\120\066\122\054\134\063" +
    "\142\052\143\061\144\067\145\053\146\055\001\002\000" +
    "\006\013\uffdb\024\uffdb\001\002\000\034\014\072\016\065" +
    "\035\064\067\071\117\057\120\066\122\054\134\063\142" +
    "\052\143\061\144\067\145\053\146\055\001\002\000\050" +
    "\020\262\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\052\112\117\077\120\107\123\115\124\076" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\014\011\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf" +
    "\001\002\000\004\016\217\001\002\000\006\011\uffeb\024" +
    "\uffeb\001\002\000\004\011\uff9a\001\002\000\004\011\267" +
    "\001\002\000\016\004\uff98\005\uff98\006\uff98\007\uff98\013" +
    "\uff98\016\uff98\001\002\000\004\011\273\001\002\000\050" +
    "\011\uff8e\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\052\112\117\077\120\107\123\115\124\076" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\042\002\uff8f\003\uff8f\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\013\uff8f\016\uff8f\022\uff8f\034\uff8f\050\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\125\uff8f\001\002\000\042" +
    "\002\uff90\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\013" +
    "\uff90\016\uff90\022\uff90\034\uff90\050\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\125\uff90\001\002\000\042\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\013\ufffd\016\ufffd" +
    "\022\ufffd\034\ufffd\050\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\125\ufffd\001\002\000\006\017\177\021\276\001\002" +
    "\000\034\014\072\016\065\035\064\067\071\117\057\120" +
    "\066\122\054\134\063\142\052\143\061\144\067\145\053" +
    "\146\055\001\002\000\050\011\uffd6\025\114\026\104\027" +
    "\116\030\101\031\075\032\102\033\105\052\112\117\077" +
    "\120\107\123\115\124\076\133\113\134\100\135\106\136" +
    "\103\137\110\141\111\001\002\000\034\014\072\016\065" +
    "\035\064\067\071\117\057\120\066\122\054\134\063\142" +
    "\052\143\061\144\067\145\053\146\055\001\002\000\050" +
    "\024\302\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\052\112\117\077\120\107\123\115\124\076" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\034\014\072\016\065\035\064\067\071\117\057" +
    "\120\066\122\054\134\063\142\052\143\061\144\067\145" +
    "\053\146\055\001\002\000\050\015\304\025\114\026\104" +
    "\027\116\030\101\031\075\032\102\033\105\052\112\117" +
    "\077\120\107\123\115\124\076\133\113\134\100\135\106" +
    "\136\103\137\110\141\111\001\002\000\004\011\ufff0\001" +
    "\002\000\042\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\013\uff95\016\uff95\022\uff95\034\uff95\050\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\125\uff95\001\002\000\006" +
    "\011\uffec\024\263\001\002\000\014\011\uffe9\014\310\017" +
    "\222\021\223\024\uffe9\001\002\000\022\004\020\005\031" +
    "\006\027\007\005\015\uff8b\016\207\024\uff8b\046\314\001" +
    "\002\000\006\015\uff8c\024\uff8c\001\002\000\004\016\323" +
    "\001\002\000\006\015\321\024\320\001\002\000\014\004" +
    "\020\005\031\006\027\007\005\016\207\001\002\000\004" +
    "\016\316\001\002\000\010\015\uff89\017\222\024\uff89\001" +
    "\002\000\006\015\uff87\024\uff87\001\002\000\016\004\020" +
    "\005\031\006\027\007\005\016\207\046\314\001\002\000" +
    "\004\012\uff94\001\002\000\006\015\uff8d\024\uff8d\001\002" +
    "\000\010\015\uff8a\017\222\024\uff8a\001\002\000\006\015" +
    "\uff88\024\uff88\001\002\000\036\014\072\016\065\035\064" +
    "\067\071\070\232\117\057\120\066\122\054\134\063\142" +
    "\052\143\061\144\067\145\053\146\055\001\002\000\004" +
    "\011\uffd7\001\002\000\042\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\013\ufff7\016\ufff7\022\ufff7\034\ufff7" +
    "\050\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\125\ufff7\001" +
    "\002\000\042\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\013\ufff8\016\ufff8\022\ufff8\034\ufff8\050\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\125\ufff8\001\002\000\042" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013" +
    "\ufffb\016\ufffb\022\ufffb\034\ufffb\050\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\125\ufffb\001\002\000\042\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\013\ufffc\016\ufffc" +
    "\022\ufffc\034\ufffc\050\ufffc\057\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\125\ufffc\001\002\000\042\002\ufffa\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\013\ufffa\016\ufffa\022\ufffa\034" +
    "\ufffa\050\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\125\ufffa" +
    "\001\002\000\004\014\335\001\002\000\022\004\020\005" +
    "\031\006\027\007\005\015\uff8b\016\207\024\uff8b\046\314" +
    "\001\002\000\006\015\337\024\320\001\002\000\004\012" +
    "\uff93\001\002\000\004\142\341\001\002\000\006\015\343" +
    "\024\342\001\002\000\034\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\004\011\uffce\001" +
    "\002\000\006\015\347\024\346\001\002\000\052\015\uffc9" +
    "\024\uffc9\025\114\026\104\027\116\030\101\031\075\032" +
    "\102\033\105\052\112\117\077\120\107\123\115\124\076" +
    "\133\113\134\100\135\106\136\103\137\110\141\111\001" +
    "\002\000\034\014\072\016\065\035\064\067\071\117\057" +
    "\120\066\122\054\134\063\142\052\143\061\144\067\145" +
    "\053\146\055\001\002\000\004\011\uffcd\001\002\000\052" +
    "\015\uffca\024\uffca\025\114\026\104\027\116\030\101\031" +
    "\075\032\102\033\105\052\112\117\077\120\107\123\115" +
    "\124\076\133\113\134\100\135\106\136\103\137\110\141" +
    "\111\001\002\000\004\142\352\001\002\000\006\015\354" +
    "\024\353\001\002\000\034\014\072\016\065\035\064\067" +
    "\071\117\057\120\066\122\054\134\063\142\052\143\061" +
    "\144\067\145\053\146\055\001\002\000\004\011\uffcc\001" +
    "\002\000\006\015\356\024\346\001\002\000\004\011\uffcb" +
    "\001\002\000\042\002\uffef\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\013\uffef\016\uffef\022\uffef\034\uffef\050\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\125\uffef\001\002\000" +
    "\040\012\363\014\072\016\065\035\064\067\071\070\232" +
    "\117\057\120\066\122\054\134\063\142\052\143\061\144" +
    "\067\145\053\146\055\001\002\000\042\002\uffed\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\013\uffed\016\uffed\022" +
    "\uffed\034\uffed\050\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\125\uffed\001\002\000\042\002\uffee\003\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\013\uffee\016\uffee\022\uffee\034\uffee" +
    "\050\uffee\057\uffee\060\uffee\061\uffee\062\uffee\125\uffee\001" +
    "\002\000\004\017\175\001\002\000\042\002\ufff3\003\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\013\ufff3\016\ufff3\022" +
    "\ufff3\034\ufff3\050\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\125\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\052\003\025\004\031\005\016\012\043\013" +
    "\003\014\035\015\014\017\042\024\022\037\013\043\027" +
    "\062\044\063\032\064\015\065\020\066\005\073\021\077" +
    "\023\100\024\101\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\356\001\001\000" +
    "\002\001\001\000\004\035\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\157\005\016\013\003" +
    "\014\035\015\014\017\042\024\022\037\013\043\027\062" +
    "\044\063\032\064\015\065\020\066\005\073\021\077\023" +
    "\100\024\101\010\001\001\000\002\001\001\000\006\044" +
    "\305\045\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\304\001\001\000\002\001\001\000\004\035" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\270\007\061\010\067\031\267\066\050\100\055\101" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\057\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\203\007\061" +
    "\010\067\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\165\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\151\007\061" +
    "\010\067\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\141\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\072\007\061" +
    "\010\067\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\135\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\016\006\134\007" +
    "\061\010\067\066\050\100\055\101\010\001\001\000\002" +
    "\001\001\000\016\006\133\007\061\010\067\066\050\100" +
    "\055\101\010\001\001\000\016\006\132\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\016\006\131\007" +
    "\061\010\067\066\050\100\055\101\010\001\001\000\016" +
    "\006\130\007\061\010\067\066\050\100\055\101\010\001" +
    "\001\000\016\006\127\007\061\010\067\066\050\100\055" +
    "\101\010\001\001\000\016\006\126\007\061\010\067\066" +
    "\050\100\055\101\010\001\001\000\016\006\125\007\061" +
    "\010\067\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\016\006\124\007\061\010\067\066\050\100\055" +
    "\101\010\001\001\000\016\006\123\007\061\010\067\066" +
    "\050\100\055\101\010\001\001\000\002\001\001\000\016" +
    "\006\121\007\061\010\067\066\050\100\055\101\010\001" +
    "\001\000\016\006\120\007\061\010\067\066\050\100\055" +
    "\101\010\001\001\000\016\006\117\007\061\010\067\066" +
    "\050\100\055\101\010\001\001\000\016\006\116\007\061" +
    "\010\067\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\144\007\061\010\067\066\050\070\143\071\145" +
    "\100\055\101\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\147\007\061\010\067" +
    "\066\050\100\055\101\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\153\001\001" +
    "\000\002\001\001\000\050\003\155\004\031\005\016\013" +
    "\003\014\035\015\014\017\042\024\022\037\013\043\027" +
    "\062\044\063\032\064\015\065\020\066\005\073\021\077" +
    "\023\100\024\101\010\001\001\000\046\004\157\005\016" +
    "\013\003\014\035\015\014\017\042\024\022\037\013\043" +
    "\027\062\044\063\032\064\015\065\020\066\005\073\021" +
    "\077\023\100\024\101\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\163\024\164" +
    "\025\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\167\001\001" +
    "\000\004\035\175\001\001\000\002\001\001\000\022\006" +
    "\144\007\061\010\067\066\050\070\172\071\145\100\055" +
    "\101\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\201\007\061\010\067\066\050\100\055\101\010" +
    "\001\001\000\002\001\001\000\016\006\177\007\061\010" +
    "\067\066\050\100\055\101\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\003\043\211" +
    "\072\212\075\207\001\001\000\002\001\001\000\010\013" +
    "\003\043\211\072\265\001\001\000\002\001\001\000\006" +
    "\044\215\045\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\220" +
    "\033\223\034\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\236\007\061\010\067\066\050\100\055" +
    "\101\010\001\001\000\022\006\227\007\061\010\067\066" +
    "\050\100\055\101\010\102\230\103\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\233\007\061\010\067\066\050\100\055\101" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\243\007\061\010\067\042\241\066\050\076\242\100\055" +
    "\101\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\250\007\061\010\067\035\251" +
    "\040\247\041\245\042\246\066\050\100\055\101\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\250\007" +
    "\061\010\067\040\247\041\245\042\246\066\050\100\055" +
    "\101\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\250\007\061\010\067\040\256\042\246\066\050" +
    "\100\055\101\010\001\001\000\002\001\001\000\016\006" +
    "\260\007\061\010\067\066\050\100\055\101\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\276\007\061\010\067\066\050\100" +
    "\055\101\010\001\001\000\002\001\001\000\016\006\300" +
    "\007\061\010\067\066\050\100\055\101\010\001\001\000" +
    "\002\001\001\000\016\006\302\007\061\010\067\066\050" +
    "\100\055\101\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\220" +
    "\033\223\034\217\001\001\000\012\013\003\043\311\060" +
    "\310\061\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\003\043\314\001\001\000" +
    "\002\001\001\000\010\032\316\033\223\034\217\001\001" +
    "\000\002\001\001\000\010\013\003\043\311\060\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\323" +
    "\033\223\034\217\001\001\000\002\001\001\000\022\006" +
    "\227\007\061\010\067\066\050\100\055\101\010\102\230" +
    "\103\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\003\043\311\060" +
    "\310\061\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\344\007" +
    "\061\010\067\036\343\066\050\100\055\101\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\347\007\061\010\067\066\050\100\055\101\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\344\007\061\010\067" +
    "\036\354\066\050\100\055\101\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\227\007\061\010\067\066\050\076\361\100" +
    "\055\101\010\102\230\103\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\251\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= PRINT puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= MSN puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Message inst = (Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= FUSION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion inst = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= COPI puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Copi inst = (Copi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= FUNCION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion inst = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= DECLARACIONCONSTANTE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionConstante inst = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COPI ::= tcopi pari EXP coma EXP pard 
            {
              Copi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Copi(origen, destino, tright, tleft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COPI",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONCONSTANTE ::= tdefinir DECCONSTANTE 
            {
              DeclaracionConstante RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec nombre = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Dec> lista = new ArrayList<Dec>();
            lista.add(nombre);
            RESULT = new DeclaracionConstante(null, lista, tright, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECCONSTANTE ::= id VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECCONSTANTE ::= id VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECCONSTANTE",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC ::= id igual VALORASIGNACION 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC ::= id NDIM igual VALORARREGLO 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(valor instanceof Literal)
            {
                Literal valTmp = (Literal)valor;
                if(valTmp.tipo.isString())
                {
                    /*Hay que pasar la cadena a una expresionArreglo */
                    Arreglo tmpArreglo = new Arreglo();
                    tmpArreglo.columna = valorright;
                    tmpArreglo.linea = valorleft;            
                    NodoNario raizArreglo = new NodoNario();
                    tmpArreglo.raiz = raizArreglo;
                    raizArreglo.hijos = new ArrayList<NodoNario>();
                    raizArreglo.tipo = new Tipo(Tipo.TypePrimitive.CHAR);            
                    char[] caracteres = valTmp.valor.toString().toCharArray();
                    for(char caracter : caracteres)
                    {
                        NodoNario nuevoNodo = new NodoNario();
                        nuevoNodo.tipo = tmpArreglo.tipo;
                        nuevoNodo.valor = caracter;
                        nuevoNodo.linea = valorright;
                        nuevoNodo.columna = valorleft;
                        raizArreglo.hijos.add(nuevoNodo);
                    }

                    RESULT = new Dec(id,dim, 
                            new ExpresionArreglo(raizArreglo, valorright, valorleft)
                            ,idright,
                            idleft);
                }
                else
                {
                    RESULT = new Dec(id,dim, valor, idright, idleft);
                }
            }
            else
            {
                RESULT = new Dec(id,dim, valor, idright, idleft);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NDIM ::= NDIMVACIO 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NDIM ::= NDIMVALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> v = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NDIMVACIO ::= NDIMVACIO corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n ; n.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NDIMVACIO ::= corchetei corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVACIO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NDIMVALOR ::= NDIMVALOR corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = n ; n.add(valor);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NDIMVALOR ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(valor);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIMVALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORARREGLO ::= llavei LEXP llaved 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpresionArreglo(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              Asignacion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(origen , valor, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALORASIGNACION ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALORASIGNACION ::= INSTANCIA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTANCIA ::= treservar pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(valor, nright, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRINT ::= print pari cadena pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT ::= print pari cadena coma LVALORES pard 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Imprimir(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MSN ::= msn pari cadena pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MSN ::= msn pari cadena coma LVALORES pard 
            {
              Message RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Message(
                    new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft), 
                    pright,
                    pleft,
                    l);  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MSN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LVALORES ::= LVALORES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LVALORES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= ACCESO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= tpeso pari id pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Peso(nombre,tright, tleft );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCESO ::= ACCESO punto ORIGEN 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion destino = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(origen, destino, origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACCESO ::= ORIGEN 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ORIGEN ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(id, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ORIGEN ::= ORIGEN LEXP 
            {
              Expresion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(origen , coor , origenright, origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGEN",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUSION ::= tfusion id llavei CUERPO llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUSION ::= tfusion id llavei llaved 
            {
              Fusion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                RESULT = new Fusion();
                RESULT.setId(nombre);                                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUSION",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fusion clase = (Fusion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                clase.addAtributo(f); 
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO ::= DECATRIB puntocoma 
            {
              Fusion RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Fusion c = new Fusion(atributosright,atributosleft); 
                c.addAtributo(atributos); 
                RESULT = c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECATRIB ::= TIPO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CABECERAMET ::= TIPO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CABECERAMET ::= tvoid id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(), new Tipo(res),nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RETORNO ::= retorno puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Retorno( rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(), tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,new ArrayList<Expresion>(),fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> n = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(origen,nombre, l, origenright,origenleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null, nombre, l, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
