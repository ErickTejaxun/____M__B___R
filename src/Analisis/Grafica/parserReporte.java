
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Grafica;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import Utilidades.ErrorC;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserReporte extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserReporte() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserReporte(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserReporte(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\002\004\000\002\100\003\000\002\071" +
    "\004\000\002\071\005\000\002\071\003\000\002\071\004" +
    "\000\002\077\004\000\002\066\010\000\002\066\012\000" +
    "\002\050\003\000\002\050\002\000\002\067\003\000\002" +
    "\067\002\000\002\070\004\000\002\070\005\000\002\070" +
    "\003\000\002\070\004\000\002\070\006\000\002\070\005" +
    "\000\002\002\005\000\002\002\004\000\002\003\004\000" +
    "\002\003\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\027\003\000\002\027\003\000\002\046\011\000" +
    "\002\046\012\000\002\045\004\000\002\045\003\000\002" +
    "\043\006\000\002\044\005\000\002\023\007\000\002\023" +
    "\011\000\002\024\003\000\002\024\003\000\002\022\004" +
    "\000\002\021\004\000\002\017\007\000\002\020\011\000" +
    "\002\042\012\000\002\026\013\000\002\026\013\000\002" +
    "\015\006\000\002\014\007\000\002\014\007\000\002\016" +
    "\005\000\002\033\006\000\002\073\005\000\002\073\003" +
    "\000\002\073\003\000\002\074\003\000\002\074\004\000" +
    "\002\005\004\000\002\040\005\000\002\040\003\000\002" +
    "\041\003\000\002\041\005\000\002\041\004\000\002\041" +
    "\006\000\002\041\006\000\002\076\003\000\002\076\003" +
    "\000\002\072\005\000\002\072\005\000\002\037\003\000" +
    "\002\037\003\000\002\031\005\000\002\031\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\010\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\075\007\000\002\061\010\000\002\061\006\000" +
    "\002\060\005\000\002\060\004\000\002\063\003\000\002" +
    "\063\002\000\002\064\005\000\002\064\003\000\002\030" +
    "\003\000\002\056\004\000\002\056\004\000\002\057\010" +
    "\000\002\057\007\000\002\057\007\000\002\057\006\000" +
    "\002\053\003\000\002\053\003\000\002\055\005\000\002" +
    "\055\003\000\002\055\002\000\002\054\004\000\002\054" +
    "\005\000\002\054\005\000\002\054\006\000\002\047\004" +
    "\000\002\047\003\000\002\051\003\000\002\051\003\000" +
    "\002\065\005\000\002\065\004\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\032\006\000\002\032\005" +
    "\000\002\036\005\000\002\035\005\000\002\035\003\000" +
    "\002\034\003\000\002\034\003\000\002\007\004\000\002" +
    "\007\004\000\002\010\004\000\002\010\004\000\002\025" +
    "\007\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\022\036\014\041\ufff7\045\020\047\015\052" +
    "\005\053\006\054\012\061\016\001\002\000\004\011\u0173" +
    "\001\002\000\036\004\uff62\005\uff62\006\uff62\007\uff62\010" +
    "\uff62\016\uff62\034\uff62\036\uff62\041\uff62\045\uff62\052\uff62" +
    "\053\uff62\054\uff62\061\uff62\001\002\000\036\004\uff63\005" +
    "\uff63\006\uff63\007\uff63\010\uff63\016\uff63\034\uff63\036\uff63" +
    "\041\uff63\045\uff63\052\uff63\053\uff63\054\uff63\061\uff63\001" +
    "\002\000\036\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c" +
    "\016\uff6c\034\uff6c\036\uff6c\041\uff6c\045\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\061\uff6c\001\002\000\004\002\u0172\001\002" +
    "\000\004\041\031\001\002\000\036\004\uff64\005\uff64\006" +
    "\uff64\007\uff64\010\uff64\016\uff64\034\uff64\036\uff64\041\uff64" +
    "\045\uff64\052\uff64\053\uff64\054\uff64\061\uff64\001\002\000" +
    "\024\002\ufffd\036\ufffd\041\ufffd\045\ufffd\047\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\061\ufffd\001\002\000\036\004\uff6a\005" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\016\uff6a\034\uff6a\036\uff6a" +
    "\041\uff6a\045\uff6a\052\uff6a\053\uff6a\054\uff6a\061\uff6a\001" +
    "\002\000\004\124\030\001\002\000\036\004\uff66\005\uff66" +
    "\006\uff66\007\uff66\010\uff66\016\uff66\034\uff66\036\uff66\041" +
    "\uff66\045\uff66\052\uff66\053\uff66\054\uff66\061\uff66\001\002" +
    "\000\020\036\014\041\ufff8\045\020\052\005\053\006\054" +
    "\012\061\016\001\002\000\036\004\uff67\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\016\uff67\034\uff67\036\uff67\041\uff67\045" +
    "\uff67\052\uff67\053\uff67\054\uff67\061\uff67\001\002\000\036" +
    "\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\016\uff6b\034" +
    "\uff6b\036\uff6b\041\uff6b\045\uff6b\052\uff6b\053\uff6b\054\uff6b" +
    "\061\uff6b\001\002\000\036\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\016\uff65\034\uff65\036\uff65\041\uff65\045\uff65" +
    "\052\uff65\053\uff65\054\uff65\061\uff65\001\002\000\024\002" +
    "\000\036\014\041\ufff7\045\020\047\015\052\005\053\006" +
    "\054\012\061\016\001\002\000\004\011\026\001\002\000" +
    "\024\002\uffff\036\uffff\041\uffff\045\uffff\047\uffff\052\uffff" +
    "\053\uffff\054\uffff\061\uffff\001\002\000\024\002\ufffe\036" +
    "\ufffe\041\ufffe\045\ufffe\047\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\061\ufffe\001\002\000\036\004\uff6d\005\uff6d\006\uff6d\007" +
    "\uff6d\010\uff6d\016\uff6d\034\uff6d\036\uff6d\041\uff6d\045\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\061\uff6d\001\002\000\004\011" +
    "\ufffb\001\002\000\004\016\032\001\002\000\006\012\033" +
    "\044\034\001\002\000\040\004\043\005\047\006\045\007" +
    "\040\010\051\013\ufff5\016\053\034\041\036\014\045\020" +
    "\052\005\053\006\054\012\056\055\061\016\001\002\000" +
    "\004\016\035\001\002\000\004\012\036\001\002\000\040" +
    "\004\043\005\047\006\045\007\040\010\051\013\ufff5\016" +
    "\053\034\041\036\014\045\020\052\005\053\006\054\012" +
    "\056\055\061\016\001\002\000\006\014\uffab\016\uffab\001" +
    "\002\000\012\014\uff52\015\uff52\016\uff52\017\uff52\001\002" +
    "\000\004\016\uff75\001\002\000\040\004\043\005\047\006" +
    "\045\007\040\010\051\013\ufff6\016\053\034\041\036\014" +
    "\045\020\052\005\053\006\054\012\056\u016b\061\016\001" +
    "\002\000\012\014\uff55\015\uff55\016\uff55\017\uff55\001\002" +
    "\000\004\016\uff76\001\002\000\012\014\uff54\015\uff54\016" +
    "\uff54\017\uff54\001\002\000\004\013\u0169\001\002\000\012" +
    "\014\uff53\015\uff53\016\uff53\017\uff53\001\002\000\004\011" +
    "\u0168\001\002\000\012\014\uff51\015\uff51\016\uff51\017\uff51" +
    "\001\002\000\006\011\344\012\346\001\002\000\006\014" +
    "\341\016\uffaa\001\002\000\004\016\340\001\002\000\004" +
    "\057\325\001\002\000\034\004\043\005\047\006\045\007" +
    "\040\010\051\016\060\034\041\036\014\045\020\052\005" +
    "\053\006\054\012\061\016\001\002\000\040\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\016\ufff2\034\ufff2" +
    "\036\ufff2\045\ufff2\052\ufff2\053\ufff2\054\ufff2\056\ufff2\061" +
    "\ufff2\001\002\000\006\014\322\016\uffaa\001\002\000\004" +
    "\016\063\001\002\000\006\011\uffb5\024\uffb5\001\002\000" +
    "\014\011\uffb4\014\305\017\071\021\072\024\uffb4\001\002" +
    "\000\006\011\uff69\024\065\001\002\000\004\016\067\001" +
    "\002\000\006\011\uffb6\024\uffb6\001\002\000\012\011\uffb4" +
    "\017\071\021\072\024\uffb4\001\002\000\012\011\uffb2\017" +
    "\263\021\264\024\uffb2\001\002\000\004\020\262\001\002" +
    "\000\050\014\125\016\115\033\120\035\113\051\126\064" +
    "\127\065\116\066\122\067\101\070\075\101\106\102\121" +
    "\104\100\116\112\124\074\125\110\126\123\127\077\130" +
    "\103\001\002\000\062\011\uff92\013\uff92\015\uff92\020\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\050\uff92\077\uff92\100\uff92\101\uff92\102\uff92\105\uff92" +
    "\106\uff92\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\123" +
    "\uff92\001\002\000\062\011\uff8c\013\uff8c\015\uff8c\020\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\050\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\105\uff8c" +
    "\106\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c\123" +
    "\uff8c\001\002\000\004\014\257\001\002\000\070\011\uffbb" +
    "\013\uffbb\015\uffbb\017\244\020\uffbb\021\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\050\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\105\uffbb\106" +
    "\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\123\uffbb" +
    "\001\002\000\062\011\uff8e\013\uff8e\015\uff8e\020\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\050\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\105\uff8e\106" +
    "\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\121\uff8e\123\uff8e" +
    "\001\002\000\046\014\125\016\115\033\120\035\113\064" +
    "\127\065\116\066\122\067\101\070\075\101\106\102\121" +
    "\104\100\116\112\124\074\125\110\126\123\127\077\130" +
    "\103\001\002\000\004\014\253\001\002\000\062\011\uff95" +
    "\013\uff95\015\uff95\020\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\050\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\105\uff95\106\uff95\115\uff95\116\uff95\117" +
    "\uff95\120\uff95\121\uff95\123\uff95\001\002\000\062\011\uff8d" +
    "\013\uff8d\015\uff8d\020\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\050\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\102\uff8d\105\uff8d\106\uff8d\115\uff8d\116\uff8d\117" +
    "\uff8d\120\uff8d\121\uff8d\123\uff8d\001\002\000\006\011\uffb3" +
    "\024\uffb3\001\002\000\064\011\uff8a\013\uff8a\015\uff8a\020" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\050\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103" +
    "\236\105\uff8a\106\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a" +
    "\121\uff8a\123\uff8a\001\002\000\046\014\125\016\115\033" +
    "\120\035\113\064\127\065\116\066\122\067\101\070\075" +
    "\101\106\102\121\104\100\116\112\124\074\125\110\126" +
    "\123\127\077\130\103\001\002\000\052\011\uffaf\024\uffaf" +
    "\025\157\026\150\027\161\030\144\031\140\032\145\050" +
    "\155\077\147\101\142\102\152\105\160\106\141\115\156" +
    "\116\143\117\151\120\146\121\153\123\154\001\002\000" +
    "\062\011\uff8b\013\uff8b\015\uff8b\020\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\050\uff8b\077" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\105\uff8b\106\uff8b\115\uff8b" +
    "\116\uff8b\117\uff8b\120\uff8b\121\uff8b\123\uff8b\001\002\000" +
    "\062\011\uff94\013\uff94\015\uff94\020\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\050\uff94\077" +
    "\uff94\100\uff94\101\uff94\102\uff94\105\uff94\106\uff94\115\uff94" +
    "\116\uff94\117\uff94\120\uff94\121\uff94\123\uff94\001\002\000" +
    "\046\014\125\016\115\033\120\035\113\064\127\065\116" +
    "\066\122\067\101\070\075\101\106\102\121\104\100\116" +
    "\112\124\074\125\110\126\123\127\077\130\103\001\002" +
    "\000\062\011\uff87\013\uff87\015\uff87\020\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\050\uff87" +
    "\077\uff87\100\uff87\101\uff87\102\uff87\105\uff87\106\uff87\115" +
    "\uff87\116\uff87\117\uff87\120\uff87\121\uff87\123\uff87\001\002" +
    "\000\062\011\uff88\013\uff88\015\uff88\020\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\050\uff88" +
    "\077\uff88\100\uff88\101\uff88\102\uff88\105\uff88\106\uff88\115" +
    "\uff88\116\uff88\117\uff88\120\uff88\121\uff88\123\uff88\001\002" +
    "\000\070\011\uffb9\013\uffb9\014\210\015\uffb9\017\uffb9\020" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\050\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\105\uffb9\106\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\121\uffb9\123\uffb9\001\002\000\004\014\231\001\002\000" +
    "\006\011\uffae\024\uffae\001\002\000\004\014\224\001\002" +
    "\000\046\014\125\016\115\033\120\035\113\064\127\065" +
    "\116\066\122\067\101\070\075\101\106\102\121\104\100" +
    "\116\112\124\074\125\110\126\123\127\077\130\103\001" +
    "\002\000\004\014\220\001\002\000\062\011\uff8f\013\uff8f" +
    "\015\uff8f\020\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\050\uff8f\077\uff8f\100\uff8f\101\uff8f" +
    "\102\uff8f\105\uff8f\106\uff8f\115\uff8f\116\uff8f\117\uff8f\120" +
    "\uff8f\121\uff8f\123\uff8f\001\002\000\062\011\uff93\013\uff93" +
    "\015\uff93\020\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\050\uff93\077\uff93\100\uff93\101\uff93" +
    "\102\uff93\105\uff93\106\uff93\115\uff93\116\uff93\117\uff93\120" +
    "\uff93\121\uff93\123\uff93\001\002\000\060\004\043\005\047" +
    "\006\045\007\040\010\051\014\125\016\207\033\120\035" +
    "\113\064\127\065\116\066\122\067\101\070\075\101\106" +
    "\102\121\104\100\116\112\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\016\004\043\005\047\006\045" +
    "\007\040\010\051\016\131\001\002\000\066\011\uffba\013" +
    "\uffba\015\uffba\020\uffba\021\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\050\uffba\077\uffba\100" +
    "\uffba\101\uffba\102\uffba\103\uffba\105\uffba\106\uffba\115\uffba" +
    "\116\uffba\117\uffba\120\uffba\121\uffba\123\uffba\001\002\000" +
    "\004\014\132\001\002\000\006\014\uffaa\016\uffaa\001\002" +
    "\000\050\014\125\015\uff80\016\115\033\120\035\113\064" +
    "\127\065\116\066\122\067\101\070\075\101\106\102\121" +
    "\104\100\116\112\124\074\125\110\126\123\127\077\130" +
    "\103\001\002\000\004\015\204\001\002\000\052\015\uff7e" +
    "\024\uff7e\025\157\026\150\027\161\030\144\031\140\032" +
    "\145\050\155\077\147\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\006\015\uff81\024\136\001\002\000\046\014\125" +
    "\016\115\033\120\035\113\064\127\065\116\066\122\067" +
    "\101\070\075\101\106\102\121\104\100\116\112\124\074" +
    "\125\110\126\123\127\077\130\103\001\002\000\052\015" +
    "\uff7f\024\uff7f\025\157\026\150\027\161\030\144\031\140" +
    "\032\145\050\155\077\147\101\142\102\152\105\160\106" +
    "\141\115\156\116\143\117\151\120\146\121\153\123\154" +
    "\001\002\000\046\014\125\016\115\033\120\035\113\064" +
    "\127\065\116\066\122\067\101\070\075\101\106\102\121" +
    "\104\100\116\112\124\074\125\110\126\123\127\077\130" +
    "\103\001\002\000\046\014\125\016\115\033\120\035\113" +
    "\064\127\065\116\066\122\067\101\070\075\101\106\102" +
    "\121\104\100\116\112\124\074\125\110\126\123\127\077" +
    "\130\103\001\002\000\062\011\uff5a\013\uff5a\015\uff5a\020" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\032\uff5a\050\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a\105" +
    "\uff5a\106\uff5a\115\uff5a\116\uff5a\117\uff5a\120\uff5a\121\uff5a" +
    "\123\uff5a\001\002\000\046\014\125\016\115\033\120\035" +
    "\113\064\127\065\116\066\122\067\101\070\075\101\106" +
    "\102\121\104\100\116\112\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\046\014\125\016\115\033\120" +
    "\035\113\064\127\065\116\066\122\067\101\070\075\101" +
    "\106\102\121\104\100\116\112\124\074\125\110\126\123" +
    "\127\077\130\103\001\002\000\046\014\125\016\115\033" +
    "\120\035\113\064\127\065\116\066\122\067\101\070\075" +
    "\101\106\102\121\104\100\116\112\124\074\125\110\126" +
    "\123\127\077\130\103\001\002\000\046\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\046\014\125\016" +
    "\115\033\120\035\113\064\127\065\116\066\122\067\101" +
    "\070\075\101\106\102\121\104\100\116\112\124\074\125" +
    "\110\126\123\127\077\130\103\001\002\000\046\014\125" +
    "\016\115\033\120\035\113\064\127\065\116\066\122\067" +
    "\101\070\075\101\106\102\121\104\100\116\112\124\074" +
    "\125\110\126\123\127\077\130\103\001\002\000\046\014" +
    "\125\016\115\033\120\035\113\064\127\065\116\066\122" +
    "\067\101\070\075\101\106\102\121\104\100\116\112\124" +
    "\074\125\110\126\123\127\077\130\103\001\002\000\062" +
    "\011\uff58\013\uff58\015\uff58\020\uff58\024\uff58\025\uff58\026" +
    "\uff58\027\uff58\030\uff58\031\uff58\032\uff58\050\uff58\077\uff58" +
    "\100\uff58\101\uff58\102\uff58\105\uff58\106\uff58\115\uff58\116" +
    "\uff58\117\uff58\120\uff58\121\uff58\123\uff58\001\002\000\046" +
    "\014\125\016\115\033\120\035\113\064\127\065\116\066" +
    "\122\067\101\070\075\101\106\102\121\104\100\116\112" +
    "\124\074\125\110\126\123\127\077\130\103\001\002\000" +
    "\046\014\125\016\115\033\120\035\113\064\127\065\116" +
    "\066\122\067\101\070\075\101\106\102\121\104\100\116" +
    "\112\124\074\125\110\126\123\127\077\130\103\001\002" +
    "\000\004\016\166\001\002\000\046\014\125\016\115\033" +
    "\120\035\113\064\127\065\116\066\122\067\101\070\075" +
    "\101\106\102\121\104\100\116\112\124\074\125\110\126" +
    "\123\127\077\130\103\001\002\000\046\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\046\014\125\016" +
    "\115\033\120\035\113\064\127\065\116\066\122\067\101" +
    "\070\075\101\106\102\121\104\100\116\112\124\074\125" +
    "\110\126\123\127\077\130\103\001\002\000\046\014\125" +
    "\016\115\033\120\035\113\064\127\065\116\066\122\067" +
    "\101\070\075\101\106\102\121\104\100\116\112\124\074" +
    "\125\110\126\123\127\077\130\103\001\002\000\062\011" +
    "\uffa0\013\uffa0\015\uffa0\020\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\050\uffa0\077\uffa0\100" +
    "\uffa0\101\142\102\152\105\uffa0\106\uffa0\115\156\116\143" +
    "\117\151\120\146\121\uffa0\123\154\001\002\000\062\011" +
    "\uffa7\013\uffa7\015\uffa7\020\uffa7\024\uffa7\025\157\026\150" +
    "\027\161\030\144\031\140\032\145\050\155\077\uffa7\100" +
    "\uffa7\101\142\102\152\105\uffa7\106\uffa7\115\156\116\143" +
    "\117\151\120\146\121\153\123\154\001\002\000\062\011" +
    "\uffa2\013\uffa2\015\uffa2\020\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\161\030\144\031\140\032\145\050\155\077\uffa2\100" +
    "\uffa2\101\142\102\152\105\uffa2\106\uffa2\115\156\116\143" +
    "\117\151\120\146\121\uffa2\123\154\001\002\000\062\011" +
    "\uff9c\013\uff9c\015\uff9c\020\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\050\uff9c\077\uff9c\100" +
    "\uff9c\101\142\102\152\105\uff9c\106\uff9c\115\uff9c\116\uff9c" +
    "\117\151\120\146\121\uff9c\123\154\001\002\000\062\011" +
    "\uffa4\013\uffa4\015\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\050\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\105\uffa4\106\uffa4\115\uffa4\116\uffa4" +
    "\117\uffa4\120\uffa4\121\uffa4\123\uffa4\001\002\000\062\011" +
    "\uff98\013\uff98\015\uff98\020\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\050\uff98\077\uff98\100" +
    "\uff98\101\142\102\152\105\uff98\106\uff98\115\uff98\116\uff98" +
    "\117\uff98\120\uff98\121\uff98\123\uff98\001\002\000\062\011" +
    "\uffa5\013\uffa5\015\uffa5\020\uffa5\024\uffa5\025\157\026\150" +
    "\027\161\030\144\031\140\032\145\050\155\077\uffa5\100" +
    "\uffa5\101\142\102\152\105\uffa5\106\uffa5\115\156\116\143" +
    "\117\151\120\146\121\uffa5\123\154\001\002\000\062\011" +
    "\uff9a\013\uff9a\015\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\050\uff9a\077\uff9a\100" +
    "\uff9a\101\142\102\152\105\uff9a\106\uff9a\115\uff9a\116\uff9a" +
    "\117\uff9a\120\uff9a\121\uff9a\123\uff9a\001\002\000\062\011" +
    "\uffa1\013\uffa1\015\uffa1\020\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\161\030\144\031\140\032\145\050\155\077\uffa1\100" +
    "\uffa1\101\142\102\152\105\uffa1\106\uffa1\115\156\116\143" +
    "\117\151\120\146\121\uffa1\123\154\001\002\000\050\025" +
    "\157\026\150\027\161\030\144\031\140\032\145\050\155" +
    "\077\147\100\174\101\142\102\152\105\160\106\141\115" +
    "\156\116\143\117\151\120\146\121\153\123\154\001\002" +
    "\000\046\014\125\016\115\033\120\035\113\064\127\065" +
    "\116\066\122\067\101\070\075\101\106\102\121\104\100" +
    "\116\112\124\074\125\110\126\123\127\077\130\103\001" +
    "\002\000\062\011\uff56\013\uff56\015\uff56\020\uff56\024\uff56" +
    "\025\157\026\150\027\161\030\144\031\140\032\145\050" +
    "\155\077\147\100\uff56\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\062\011\uff99\013\uff99\015\uff99\020\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\050" +
    "\uff99\077\uff99\100\uff99\101\142\102\152\105\uff99\106\uff99" +
    "\115\uff99\116\uff99\117\uff99\120\uff99\121\uff99\123\uff99\001" +
    "\002\000\062\011\uff9f\013\uff9f\015\uff9f\020\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\050" +
    "\uff9f\077\uff9f\100\uff9f\101\142\102\152\105\uff9f\106\uff9f" +
    "\115\156\116\143\117\151\120\146\121\uff9f\123\154\001" +
    "\002\000\062\011\uff9e\013\uff9e\015\uff9e\020\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\050" +
    "\uff9e\077\uff9e\100\uff9e\101\142\102\152\105\uff9e\106\uff9e" +
    "\115\156\116\143\117\151\120\146\121\uff9e\123\154\001" +
    "\002\000\062\011\uff9b\013\uff9b\015\uff9b\020\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\050" +
    "\uff9b\077\uff9b\100\uff9b\101\142\102\152\105\uff9b\106\uff9b" +
    "\115\uff9b\116\uff9b\117\151\120\146\121\uff9b\123\154\001" +
    "\002\000\062\011\uffa6\013\uffa6\015\uffa6\020\uffa6\024\uffa6" +
    "\025\157\026\150\027\161\030\144\031\140\032\145\050" +
    "\155\077\uffa6\100\uffa6\101\142\102\152\105\160\106\uffa6" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\062\011\uff9d\013\uff9d\015\uff9d\020\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\050" +
    "\uff9d\077\uff9d\100\uff9d\101\142\102\152\105\uff9d\106\uff9d" +
    "\115\156\116\143\117\151\120\146\121\uff9d\123\154\001" +
    "\002\000\006\011\uff86\024\uff86\001\002\000\004\015\216" +
    "\001\002\000\050\015\215\025\157\026\150\027\161\030" +
    "\144\031\140\032\145\050\155\077\147\101\142\102\152" +
    "\105\160\106\141\115\156\116\143\117\151\120\146\121" +
    "\153\123\154\001\002\000\056\014\210\015\211\017\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\050" +
    "\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\105\uffb9\106\uffb9" +
    "\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\123\uffb9\001" +
    "\002\000\050\014\125\015\uff80\016\115\033\120\035\113" +
    "\064\127\065\116\066\122\067\101\070\075\101\106\102" +
    "\121\104\100\116\112\124\074\125\110\126\123\127\077" +
    "\130\103\001\002\000\046\014\125\016\115\033\120\035" +
    "\113\064\127\065\116\066\122\067\101\070\075\101\106" +
    "\102\121\104\100\116\112\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\062\011\uff90\013\uff90\015\uff90" +
    "\020\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\050\uff90\077\uff90\100\uff90\101\uff90\102\uff90" +
    "\105\uff90\106\uff90\115\uff90\116\uff90\117\uff90\120\uff90\121" +
    "\uff90\123\uff90\001\002\000\004\015\214\001\002\000\062" +
    "\011\uff84\013\uff84\015\uff84\020\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\050\uff84\077\uff84" +
    "\100\uff84\101\uff84\102\uff84\105\uff84\106\uff84\115\uff84\116" +
    "\uff84\117\uff84\120\uff84\121\uff84\123\uff84\001\002\000\062" +
    "\011\uff89\013\uff89\015\uff89\020\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\050\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\105\uff89\106\uff89\115\uff89\116" +
    "\uff89\117\uff89\120\uff89\121\uff89\123\uff89\001\002\000\046" +
    "\014\125\016\115\033\120\035\113\064\127\065\116\066" +
    "\122\067\101\070\075\101\106\102\121\104\100\116\112" +
    "\124\074\125\110\126\123\127\077\130\103\001\002\000" +
    "\062\011\uff91\013\uff91\015\uff91\020\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\050\uff91\077" +
    "\uff91\100\uff91\101\uff91\102\uff91\105\uff91\106\uff91\115\uff91" +
    "\116\uff91\117\uff91\120\uff91\121\uff91\123\uff91\001\002\000" +
    "\046\014\125\016\115\033\120\035\113\064\127\065\116" +
    "\066\122\067\101\070\075\101\106\102\121\104\100\116" +
    "\112\124\074\125\110\126\123\127\077\130\103\001\002" +
    "\000\050\015\222\025\157\026\150\027\161\030\144\031" +
    "\140\032\145\050\155\077\147\101\142\102\152\105\160" +
    "\106\141\115\156\116\143\117\151\120\146\121\153\123" +
    "\154\001\002\000\062\011\uffd7\013\uffd7\015\uffd7\020\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\050\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\105\uffd7" +
    "\106\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7\123" +
    "\uffd7\001\002\000\056\011\uff57\013\uff57\015\uff57\020\uff57" +
    "\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032" +
    "\uff57\050\uff57\077\uff57\100\uff57\105\uff57\106\uff57\115\uff57" +
    "\116\uff57\117\uff57\120\uff57\121\uff57\123\uff57\001\002\000" +
    "\046\014\125\016\115\033\120\035\113\064\127\065\116" +
    "\066\122\067\101\070\075\101\106\102\121\104\100\116" +
    "\112\124\074\125\110\126\123\127\077\130\103\001\002" +
    "\000\050\024\226\025\157\026\150\027\161\030\144\031" +
    "\140\032\145\050\155\077\147\101\142\102\152\105\160" +
    "\106\141\115\156\116\143\117\151\120\146\121\153\123" +
    "\154\001\002\000\046\014\125\016\115\033\120\035\113" +
    "\064\127\065\116\066\122\067\101\070\075\101\106\102" +
    "\121\104\100\116\112\124\074\125\110\126\123\127\077" +
    "\130\103\001\002\000\050\015\230\025\157\026\150\027" +
    "\161\030\144\031\140\032\145\050\155\077\147\101\142" +
    "\102\152\105\160\106\141\115\156\116\143\117\151\120" +
    "\146\121\153\123\154\001\002\000\062\011\uff97\013\uff97" +
    "\015\uff97\020\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\050\uff97\077\uff97\100\uff97\101\uff97" +
    "\102\uff97\105\uff97\106\uff97\115\uff97\116\uff97\117\uff97\120" +
    "\uff97\121\uff97\123\uff97\001\002\000\046\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\050\015\233\025" +
    "\157\026\150\027\161\030\144\031\140\032\145\050\155" +
    "\077\147\101\142\102\152\105\160\106\141\115\156\116" +
    "\143\117\151\120\146\121\153\123\154\001\002\000\062" +
    "\011\uffd6\013\uffd6\015\uffd6\020\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\050\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\105\uffd6\106\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\123\uffd6\001\002\000\062" +
    "\011\uff96\013\uff96\015\uff96\020\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\050\uff96\077\uff96" +
    "\100\uff96\101\142\102\152\105\uff96\106\uff96\115\uff96\116" +
    "\uff96\117\151\120\146\121\uff96\123\154\001\002\000\056" +
    "\011\uff59\013\uff59\015\uff59\020\uff59\024\uff59\025\uff59\026" +
    "\uff59\027\uff59\030\uff59\031\uff59\032\uff59\050\uff59\077\uff59" +
    "\100\uff59\105\uff59\106\uff59\115\uff59\116\uff59\117\uff59\120" +
    "\uff59\121\uff59\123\uff59\001\002\000\004\016\240\001\002" +
    "\000\070\011\uffbc\013\uffbc\015\uffbc\017\244\020\uffbc\021" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\050\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\105\uffbc\106\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\123\uffbc\001\002\000\072\011\uffb9\013\uffb9\014" +
    "\241\015\uffb9\017\uffb9\020\uffb9\021\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\050\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\105\uffb9\106\uffb9" +
    "\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\123\uffb9\001" +
    "\002\000\050\014\125\015\uff80\016\115\033\120\035\113" +
    "\064\127\065\116\066\122\067\101\070\075\101\106\102" +
    "\121\104\100\116\112\124\074\125\110\126\123\127\077" +
    "\130\103\001\002\000\004\015\243\001\002\000\062\011" +
    "\uff85\013\uff85\015\uff85\020\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\050\uff85\077\uff85\100" +
    "\uff85\101\uff85\102\uff85\105\uff85\106\uff85\115\uff85\116\uff85" +
    "\117\uff85\120\uff85\121\uff85\123\uff85\001\002\000\046\014" +
    "\125\016\115\033\120\035\113\064\127\065\116\066\122" +
    "\067\101\070\075\101\106\102\121\104\100\116\112\124" +
    "\074\125\110\126\123\127\077\130\103\001\002\000\070" +
    "\011\uffb8\013\uffb8\015\uffb8\017\246\020\uffb8\021\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\050\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\105" +
    "\uffb8\106\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8" +
    "\123\uffb8\001\002\000\046\014\125\016\115\033\120\035" +
    "\113\064\127\065\116\066\122\067\101\070\075\101\106" +
    "\102\121\104\100\116\112\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\050\020\250\025\157\026\150" +
    "\027\161\030\144\031\140\032\145\050\155\077\147\101" +
    "\142\102\152\105\160\106\141\115\156\116\143\117\151" +
    "\120\146\121\153\123\154\001\002\000\070\011\uff61\013" +
    "\uff61\015\uff61\017\uff61\020\uff61\021\uff61\024\uff61\025\uff61" +
    "\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\050\uff61\077" +
    "\uff61\100\uff61\101\uff61\102\uff61\103\uff61\105\uff61\106\uff61" +
    "\115\uff61\116\uff61\117\uff61\120\uff61\121\uff61\123\uff61\001" +
    "\002\000\050\020\252\025\157\026\150\027\161\030\144" +
    "\031\140\032\145\050\155\077\147\101\142\102\152\105" +
    "\160\106\141\115\156\116\143\117\151\120\146\121\153" +
    "\123\154\001\002\000\070\011\uff60\013\uff60\015\uff60\017" +
    "\uff60\020\uff60\021\uff60\024\uff60\025\uff60\026\uff60\027\uff60" +
    "\030\uff60\031\uff60\032\uff60\050\uff60\077\uff60\100\uff60\101" +
    "\uff60\102\uff60\103\uff60\105\uff60\106\uff60\115\uff60\116\uff60" +
    "\117\uff60\120\uff60\121\uff60\123\uff60\001\002\000\046\014" +
    "\125\016\115\033\120\035\113\064\127\065\116\066\122" +
    "\067\101\070\075\101\106\102\121\104\100\116\112\124" +
    "\074\125\110\126\123\127\077\130\103\001\002\000\050" +
    "\015\255\025\157\026\150\027\161\030\144\031\140\032" +
    "\145\050\155\077\147\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\062\011\uffd5\013\uffd5\015\uffd5\020\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\050" +
    "\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\105\uffd5\106\uffd5" +
    "\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\123\uffd5\001" +
    "\002\000\056\011\uffa3\013\uffa3\015\uffa3\020\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\050" +
    "\uffa3\077\uffa3\100\uffa3\105\uffa3\106\uffa3\115\uffa3\116\uffa3" +
    "\117\uffa3\120\uffa3\121\uffa3\123\uffa3\001\002\000\046\014" +
    "\125\016\115\033\120\035\113\064\127\065\116\066\122" +
    "\067\101\070\075\101\106\102\121\104\100\116\112\124" +
    "\074\125\110\126\123\127\077\130\103\001\002\000\050" +
    "\015\261\025\157\026\150\027\161\030\144\031\140\032" +
    "\145\050\155\077\147\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\062\011\uffd8\013\uffd8\015\uffd8\020\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\050" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\105\uffd8\106\uffd8" +
    "\115\uffd8\116\uffd8\117\uffd8\120\uffd8\121\uffd8\123\uffd8\001" +
    "\002\000\014\011\uffa8\015\uffa8\017\uffa8\021\uffa8\024\uffa8" +
    "\001\002\000\004\020\304\001\002\000\006\012\265\051" +
    "\266\001\002\000\050\012\265\014\125\016\115\033\120" +
    "\035\113\064\127\065\116\066\122\067\101\070\075\101" +
    "\106\102\121\104\100\116\112\124\074\125\110\126\123" +
    "\127\077\130\103\001\002\000\016\004\043\005\047\006" +
    "\045\007\040\010\051\016\272\001\002\000\006\011\uffb1" +
    "\024\uffb1\001\002\000\006\011\uffb0\024\uffb0\001\002\000" +
    "\004\017\244\001\002\000\004\017\244\001\002\000\010" +
    "\011\uffac\017\246\024\uffac\001\002\000\010\011\uffad\017" +
    "\246\024\uffad\001\002\000\006\013\301\024\302\001\002" +
    "\000\006\013\uff5b\024\uff5b\001\002\000\006\013\uff5d\024" +
    "\uff5d\001\002\000\052\013\uff5c\024\uff5c\025\157\026\150" +
    "\027\161\030\144\031\140\032\145\050\155\077\147\101" +
    "\142\102\152\105\160\106\141\115\156\116\143\117\151" +
    "\120\146\121\153\123\154\001\002\000\010\011\uff5f\013" +
    "\uff5f\024\uff5f\001\002\000\050\012\265\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\006\013\uff5e\024" +
    "\uff5e\001\002\000\014\011\uffa9\015\uffa9\017\uffa9\021\uffa9" +
    "\024\uffa9\001\002\000\024\004\043\005\047\006\045\007" +
    "\040\010\051\015\uff72\016\131\024\uff72\045\311\001\002" +
    "\000\006\015\uff73\024\uff73\001\002\000\006\015\320\024" +
    "\317\001\002\000\004\016\315\001\002\000\016\004\043" +
    "\005\047\006\045\007\040\010\051\016\131\001\002\000" +
    "\004\016\313\001\002\000\010\015\uff70\017\071\024\uff70" +
    "\001\002\000\010\015\uff6e\017\263\024\uff6e\001\002\000" +
    "\010\015\uff71\017\071\024\uff71\001\002\000\010\015\uff6f" +
    "\017\263\024\uff6f\001\002\000\020\004\043\005\047\006" +
    "\045\007\040\010\051\016\131\045\311\001\002\000\006" +
    "\011\uff7a\012\uff7a\001\002\000\006\015\uff74\024\uff74\001" +
    "\002\000\024\004\043\005\047\006\045\007\040\010\051" +
    "\015\uff72\016\131\024\uff72\045\311\001\002\000\006\015" +
    "\324\024\317\001\002\000\006\011\uff78\012\uff78\001\002" +
    "\000\034\004\043\005\047\006\045\007\040\010\051\016" +
    "\053\034\041\036\014\045\020\052\005\053\006\054\012" +
    "\061\016\001\002\000\004\016\333\001\002\000\034\004" +
    "\043\005\047\006\045\007\040\010\051\016\060\034\041" +
    "\036\014\045\020\052\005\053\006\054\012\061\016\001" +
    "\002\000\040\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\013\uffef\016\uffef\034\uffef\036\uffef\045\uffef\052\uffef\053" +
    "\uffef\054\uffef\056\uffef\061\uffef\001\002\000\004\016\332" +
    "\001\002\000\004\014\305\001\002\000\004\014\334\001" +
    "\002\000\024\004\043\005\047\006\045\007\040\010\051" +
    "\015\uff72\016\131\024\uff72\045\311\001\002\000\006\015" +
    "\336\024\317\001\002\000\006\011\uff79\012\uff79\001\002" +
    "\000\006\011\uff68\024\065\001\002\000\014\011\uffb4\014" +
    "\334\017\071\021\072\024\uffb4\001\002\000\024\004\043" +
    "\005\047\006\045\007\040\010\051\015\uff72\016\131\024" +
    "\uff72\045\311\001\002\000\006\015\343\024\317\001\002" +
    "\000\006\011\uff77\012\uff77\001\002\000\040\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\013\uff7b\016\uff7b\034\uff7b" +
    "\036\uff7b\045\uff7b\052\uff7b\053\uff7b\054\uff7b\056\uff7b\061" +
    "\uff7b\001\002\000\040\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\013\uff7c\016\uff7c\034\uff7c\036\uff7c\045\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\056\uff7c\061\uff7c\001\002\000\112" +
    "\004\043\005\047\006\045\007\040\010\051\012\346\013" +
    "\360\014\125\016\375\022\u0107\023\377\033\120\035\113" +
    "\043\u0101\055\u0109\063\356\064\127\065\116\066\122\067" +
    "\101\070\075\073\362\074\370\075\351\076\347\101\106" +
    "\102\121\104\100\107\361\116\112\122\353\124\074\125" +
    "\110\126\123\127\077\130\103\001\002\000\004\011\u0167" +
    "\001\002\000\050\011\u0166\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\050\uff94\077\uff94\101\uff94\102\uff94" +
    "\105\uff94\106\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121" +
    "\uff94\123\uff94\001\002\000\004\011\u0165\001\002\000\004" +
    "\016\067\001\002\000\004\014\u0162\001\002\000\112\004" +
    "\043\005\047\006\045\007\040\010\051\012\346\013\u0161" +
    "\014\125\016\375\022\u0107\023\377\033\120\035\113\043" +
    "\u0101\055\u0109\063\356\064\127\065\116\066\122\067\101" +
    "\070\075\073\362\074\370\075\351\076\347\101\106\102" +
    "\121\104\100\107\361\116\112\122\353\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\116\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\016\uffe1\022\uffe1\023\uffe1\033\uffe1\035\uffe1\037\uffe1\042" +
    "\uffe1\043\uffe1\055\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\070\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\101" +
    "\uffe1\102\uffe1\104\uffe1\107\uffe1\116\uffe1\122\uffe1\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\001\002\000\004\014" +
    "\u014f\001\002\000\116\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\022\uffe3\023" +
    "\uffe3\033\uffe3\035\uffe3\037\uffe3\042\uffe3\043\uffe3\055\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\101\uffe3\102\uffe3\104\uffe3" +
    "\107\uffe3\116\uffe3\122\uffe3\124\uffe3\125\uffe3\126\uffe3\127" +
    "\uffe3\130\uffe3\001\002\000\140\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\016\uffed\022" +
    "\uffed\023\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\042\uffed\043\uffed\045\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\073\uffed\074\uffed\075\uffed\076\uffed\101" +
    "\uffed\102\uffed\104\uffed\107\uffed\111\uffed\116\uffed\122\uffed" +
    "\124\uffed\125\uffed\126\uffed\127\uffed\130\uffed\001\002\000" +
    "\004\014\u0147\001\002\000\004\014\u0143\001\002\000\116" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\022\uffe0\023\uffe0\033\uffe0\035\uffe0" +
    "\037\uffe0\042\uffe0\043\uffe0\055\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\076\uffe0\101\uffe0\102\uffe0\104\uffe0\107\uffe0\116\uffe0\122" +
    "\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\001\002" +
    "\000\046\025\157\026\150\027\161\030\144\031\140\032" +
    "\145\050\155\077\147\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\116\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\016\uffda\022\uffda\023\uffda\033" +
    "\uffda\035\uffda\037\uffda\042\uffda\043\uffda\055\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\101\uffda\102\uffda\104\uffda\107\uffda" +
    "\116\uffda\122\uffda\124\uffda\125\uffda\126\uffda\127\uffda\130" +
    "\uffda\001\002\000\116\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\022\uffe6\023" +
    "\uffe6\033\uffe6\035\uffe6\037\uffe6\042\uffe6\043\uffe6\055\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\101\uffe6\102\uffe6\104\uffe6" +
    "\107\uffe6\116\uffe6\122\uffe6\124\uffe6\125\uffe6\126\uffe6\127" +
    "\uffe6\130\uffe6\001\002\000\004\011\u0142\001\002\000\004" +
    "\014\u0126\001\002\000\050\011\u0125\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\050\uff93\077\uff93\101\uff93" +
    "\102\uff93\105\uff93\106\uff93\115\uff93\116\uff93\117\uff93\120" +
    "\uff93\121\uff93\123\uff93\001\002\000\116\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\022\uffe2\023\uffe2\033\uffe2\035\uffe2\037\uffe2\042\uffe2" +
    "\043\uffe2\055\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\101\uffe2" +
    "\102\uffe2\104\uffe2\107\uffe2\116\uffe2\122\uffe2\124\uffe2\125" +
    "\uffe2\126\uffe2\127\uffe2\130\uffe2\001\002\000\116\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\022\uffdb\023\uffdb\033\uffdb\035\uffdb\037\uffdb" +
    "\042\uffdb\043\uffdb\055\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\101\uffdb\102\uffdb\104\uffdb\107\uffdb\116\uffdb\122\uffdb\124" +
    "\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb\001\002\000\004" +
    "\011\u0124\001\002\000\060\014\210\016\uffaa\017\244\021" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\050\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\105\uffb9\106" +
    "\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\123\uffb9" +
    "\001\002\000\116\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\022\uffdc\023\uffdc" +
    "\033\uffdc\035\uffdc\037\uffdc\042\uffdc\043\uffdc\055\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\101\uffdc\102\uffdc\104\uffdc\107" +
    "\uffdc\116\uffdc\122\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc" +
    "\130\uffdc\001\002\000\004\014\u011d\001\002\000\116\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\022\uffe4\023\uffe4\033\uffe4\035\uffe4\037" +
    "\uffe4\042\uffe4\043\uffe4\055\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\101\uffe4\102\uffe4\104\uffe4\107\uffe4\116\uffe4\122\uffe4" +
    "\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\001\002\000" +
    "\004\012\346\001\002\000\004\011\u0116\001\002\000\116" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\022\uffe5\023\uffe5\033\uffe5\035\uffe5" +
    "\037\uffe5\042\uffe5\043\uffe5\055\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\101\uffe5\102\uffe5\104\uffe5\107\uffe5\116\uffe5\122" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\001\002" +
    "\000\052\021\u0114\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\050\uff8a\077\uff8a\101\uff8a\102\uff8a\103\236" +
    "\105\uff8a\106\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121" +
    "\uff8a\123\uff8a\001\002\000\116\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\022" +
    "\uffe8\023\uffe8\033\uffe8\035\uffe8\037\uffe8\042\uffe8\043\uffe8" +
    "\055\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\101\uffe8\102\uffe8" +
    "\104\uffe8\107\uffe8\116\uffe8\122\uffe8\124\uffe8\125\uffe8\126" +
    "\uffe8\127\uffe8\130\uffe8\001\002\000\050\011\u0113\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\050\uff92\077" +
    "\uff92\101\uff92\102\uff92\105\uff92\106\uff92\115\uff92\116\uff92" +
    "\117\uff92\120\uff92\121\uff92\123\uff92\001\002\000\004\014" +
    "\u010f\001\002\000\116\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\022\uffeb\023" +
    "\uffeb\033\uffeb\035\uffeb\037\uffeb\042\uffeb\043\uffeb\055\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\073" +
    "\uffeb\074\uffeb\075\uffeb\076\uffeb\101\uffeb\102\uffeb\104\uffeb" +
    "\107\uffeb\116\uffeb\122\uffeb\124\uffeb\125\uffeb\126\uffeb\127" +
    "\uffeb\130\uffeb\001\002\000\050\011\u010d\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\116\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\022\uffe7\023\uffe7\033\uffe7\035\uffe7\037\uffe7\042" +
    "\uffe7\043\uffe7\055\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\101" +
    "\uffe7\102\uffe7\104\uffe7\107\uffe7\116\uffe7\122\uffe7\124\uffe7" +
    "\125\uffe7\126\uffe7\127\uffe7\130\uffe7\001\002\000\004\011" +
    "\u010e\001\002\000\050\011\uff7d\025\157\026\150\027\161" +
    "\030\144\031\140\032\145\050\155\077\147\101\142\102" +
    "\152\105\160\106\141\115\156\116\143\117\151\120\146" +
    "\121\153\123\154\001\002\000\116\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\010\uff82\012\uff82\013\uff82\014\uff82\016\uff82" +
    "\022\uff82\023\uff82\033\uff82\035\uff82\037\uff82\042\uff82\043" +
    "\uff82\055\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\073\uff82\074\uff82\075\uff82\076\uff82\101\uff82\102" +
    "\uff82\104\uff82\107\uff82\116\uff82\122\uff82\124\uff82\125\uff82" +
    "\126\uff82\127\uff82\130\uff82\001\002\000\116\004\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\012\uff83\013\uff83\014\uff83" +
    "\016\uff83\022\uff83\023\uff83\033\uff83\035\uff83\037\uff83\042" +
    "\uff83\043\uff83\055\uff83\063\uff83\064\uff83\065\uff83\066\uff83" +
    "\067\uff83\070\uff83\073\uff83\074\uff83\075\uff83\076\uff83\101" +
    "\uff83\102\uff83\104\uff83\107\uff83\116\uff83\122\uff83\124\uff83" +
    "\125\uff83\126\uff83\127\uff83\130\uff83\001\002\000\046\014" +
    "\125\016\115\033\120\035\113\064\127\065\116\066\122" +
    "\067\101\070\075\101\106\102\121\104\100\116\112\124" +
    "\074\125\110\126\123\127\077\130\103\001\002\000\050" +
    "\015\u0111\025\157\026\150\027\161\030\144\031\140\032" +
    "\145\050\155\077\147\101\142\102\152\105\160\106\141" +
    "\115\156\116\143\117\151\120\146\121\153\123\154\001" +
    "\002\000\004\011\u0112\001\002\000\116\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\022\uffbf\023\uffbf\033\uffbf\035\uffbf\037\uffbf\042\uffbf" +
    "\043\uffbf\055\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\101\uffbf" +
    "\102\uffbf\104\uffbf\107\uffbf\116\uffbf\122\uffbf\124\uffbf\125" +
    "\uffbf\126\uffbf\127\uffbf\130\uffbf\001\002\000\116\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\016\uffd9\022\uffd9\023\uffd9\033\uffd9\035\uffd9\037\uffd9" +
    "\042\uffd9\043\uffd9\055\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\101\uffd9\102\uffd9\104\uffd9\107\uffd9\116\uffd9\122\uffd9\124" +
    "\uffd9\125\uffd9\126\uffd9\127\uffd9\130\uffd9\001\002\000\050" +
    "\014\125\016\115\033\120\035\113\051\126\064\127\065" +
    "\116\066\122\067\101\070\075\101\106\102\121\104\100" +
    "\116\112\124\074\125\110\126\123\127\077\130\103\001" +
    "\002\000\004\011\uffbe\001\002\000\116\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\022\uffdd\023\uffdd\033\uffdd\035\uffdd\037\uffdd\042\uffdd" +
    "\043\uffdd\055\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\101\uffdd" +
    "\102\uffdd\104\uffdd\107\uffdd\116\uffdd\122\uffdd\124\uffdd\125" +
    "\uffdd\126\uffdd\127\uffdd\130\uffdd\001\002\000\004\073\u0118" +
    "\001\002\000\004\014\u0119\001\002\000\046\014\125\016" +
    "\115\033\120\035\113\064\127\065\116\066\122\067\101" +
    "\070\075\101\106\102\121\104\100\116\112\124\074\125" +
    "\110\126\123\127\077\130\103\001\002\000\050\015\u011b" +
    "\025\157\026\150\027\161\030\144\031\140\032\145\050" +
    "\155\077\147\101\142\102\152\105\160\106\141\115\156" +
    "\116\143\117\151\120\146\121\153\123\154\001\002\000" +
    "\004\011\u011c\001\002\000\116\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\022" +
    "\uffc5\023\uffc5\033\uffc5\035\uffc5\037\uffc5\042\uffc5\043\uffc5" +
    "\055\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\101\uffc5\102\uffc5" +
    "\104\uffc5\107\uffc5\116\uffc5\122\uffc5\124\uffc5\125\uffc5\126" +
    "\uffc5\127\uffc5\130\uffc5\001\002\000\046\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\050\015\u011f\025" +
    "\157\026\150\027\161\030\144\031\140\032\145\050\155" +
    "\077\147\101\142\102\152\105\160\106\141\115\156\116" +
    "\143\117\151\120\146\121\153\123\154\001\002\000\004" +
    "\011\u0120\001\002\000\116\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\022\uffc0" +
    "\023\uffc0\033\uffc0\035\uffc0\037\uffc0\042\uffc0\043\uffc0\055" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\101\uffc0\102\uffc0\104" +
    "\uffc0\107\uffc0\116\uffc0\122\uffc0\124\uffc0\125\uffc0\126\uffc0" +
    "\127\uffc0\130\uffc0\001\002\000\006\017\246\021\u0122\001" +
    "\002\000\046\014\125\016\115\033\120\035\113\064\127" +
    "\065\116\066\122\067\101\070\075\101\106\102\121\104" +
    "\100\116\112\124\074\125\110\126\123\127\077\130\103" +
    "\001\002\000\050\011\uffbd\025\157\026\150\027\161\030" +
    "\144\031\140\032\145\050\155\077\147\101\142\102\152" +
    "\105\160\106\141\115\156\116\143\117\151\120\146\121" +
    "\153\123\154\001\002\000\116\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\016\uffea\022" +
    "\uffea\023\uffea\033\uffea\035\uffea\037\uffea\042\uffea\043\uffea" +
    "\055\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\101\uffea\102\uffea" +
    "\104\uffea\107\uffea\116\uffea\122\uffea\124\uffea\125\uffea\126" +
    "\uffea\127\uffea\130\uffea\001\002\000\116\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\016" +
    "\uffde\022\uffde\023\uffde\033\uffde\035\uffde\037\uffde\042\uffde" +
    "\043\uffde\055\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\073\uffde\074\uffde\075\uffde\076\uffde\101\uffde" +
    "\102\uffde\104\uffde\107\uffde\116\uffde\122\uffde\124\uffde\125" +
    "\uffde\126\uffde\127\uffde\130\uffde\001\002\000\020\004\043" +
    "\005\047\006\045\007\040\010\051\016\u0127\064\127\001" +
    "\002\000\012\016\uffaa\017\uffb9\021\uffb9\103\uffb9\001\002" +
    "\000\006\021\u0114\103\u0140\001\002\000\004\011\u013a\001" +
    "\002\000\004\011\u0132\001\002\000\004\016\u012d\001\002" +
    "\000\006\011\uffb7\024\065\001\002\000\014\011\uffb4\017" +
    "\071\021\072\024\uffb4\100\u012e\001\002\000\046\014\125" +
    "\016\115\033\120\035\113\064\127\065\116\066\122\067" +
    "\101\070\075\101\106\102\121\104\100\116\112\124\074" +
    "\125\110\126\123\127\077\130\103\001\002\000\050\015" +
    "\u0130\025\157\026\150\027\161\030\144\031\140\032\145" +
    "\050\155\077\147\101\142\102\152\105\160\106\141\115" +
    "\156\116\143\117\151\120\146\121\153\123\154\001\002" +
    "\000\004\012\346\001\002\000\116\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4" +
    "\022\uffc4\023\uffc4\033\uffc4\035\uffc4\037\uffc4\042\uffc4\043" +
    "\uffc4\055\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\101\uffc4\102" +
    "\uffc4\104\uffc4\107\uffc4\116\uffc4\122\uffc4\124\uffc4\125\uffc4" +
    "\126\uffc4\127\uffc4\130\uffc4\001\002\000\046\014\125\016" +
    "\115\033\120\035\113\064\127\065\116\066\122\067\101" +
    "\070\075\101\106\102\121\104\100\116\112\124\074\125" +
    "\110\126\123\127\077\130\103\001\002\000\050\011\u0134" +
    "\025\157\026\150\027\161\030\144\031\140\032\145\050" +
    "\155\077\147\101\142\102\152\105\160\106\141\115\156" +
    "\116\143\117\151\120\146\121\153\123\154\001\002\000" +
    "\046\014\125\016\115\033\120\035\113\064\127\065\116" +
    "\066\122\067\101\070\075\101\106\102\121\104\100\116" +
    "\112\124\074\125\110\126\123\127\077\130\103\001\002" +
    "\000\050\015\uffd4\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\050\uff94\077\uff94\101\uff94\102\uff94\105\uff94" +
    "\106\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\123" +
    "\uff94\001\002\000\004\015\u0138\001\002\000\050\015\uffd3" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\050" +
    "\uff93\077\uff93\101\uff93\102\uff93\105\uff93\106\uff93\115\uff93" +
    "\116\uff93\117\uff93\120\uff93\121\uff93\123\uff93\001\002\000" +
    "\004\012\346\001\002\000\116\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\022" +
    "\uffc2\023\uffc2\033\uffc2\035\uffc2\037\uffc2\042\uffc2\043\uffc2" +
    "\055\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\101\uffc2\102\uffc2" +
    "\104\uffc2\107\uffc2\116\uffc2\122\uffc2\124\uffc2\125\uffc2\126" +
    "\uffc2\127\uffc2\130\uffc2\001\002\000\046\014\125\016\115" +
    "\033\120\035\113\064\127\065\116\066\122\067\101\070" +
    "\075\101\106\102\121\104\100\116\112\124\074\125\110" +
    "\126\123\127\077\130\103\001\002\000\050\011\u013c\025" +
    "\157\026\150\027\161\030\144\031\140\032\145\050\155" +
    "\077\147\101\142\102\152\105\160\106\141\115\156\116" +
    "\143\117\151\120\146\121\153\123\154\001\002\000\046" +
    "\014\125\016\115\033\120\035\113\064\127\065\116\066" +
    "\122\067\101\070\075\101\106\102\121\104\100\116\112" +
    "\124\074\125\110\126\123\127\077\130\103\001\002\000" +
    "\004\015\u013e\001\002\000\004\012\346\001\002\000\116" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\022\uffc3\023\uffc3\033\uffc3\035\uffc3" +
    "\037\uffc3\042\uffc3\043\uffc3\055\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\101\uffc3\102\uffc3\104\uffc3\107\uffc3\116\uffc3\122" +
    "\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\001\002" +
    "\000\004\016\u0141\001\002\000\010\017\uffb9\021\uffb9\103" +
    "\uffb9\001\002\000\116\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\022\uffe9\023" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\042\uffe9\043\uffe9\055\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\101\uffe9\102\uffe9\104\uffe9" +
    "\107\uffe9\116\uffe9\122\uffe9\124\uffe9\125\uffe9\126\uffe9\127" +
    "\uffe9\130\uffe9\001\002\000\046\014\125\016\115\033\120" +
    "\035\113\064\127\065\116\066\122\067\101\070\075\101" +
    "\106\102\121\104\100\116\112\124\074\125\110\126\123" +
    "\127\077\130\103\001\002\000\050\015\u0145\025\157\026" +
    "\150\027\161\030\144\031\140\032\145\050\155\077\147" +
    "\101\142\102\152\105\160\106\141\115\156\116\143\117" +
    "\151\120\146\121\153\123\154\001\002\000\004\012\346" +
    "\001\002\000\116\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\022\uffc6\023\uffc6" +
    "\033\uffc6\035\uffc6\037\uffc6\042\uffc6\043\uffc6\055\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\101\uffc6\102\uffc6\104\uffc6\107" +
    "\uffc6\116\uffc6\122\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6" +
    "\130\uffc6\001\002\000\046\014\125\016\115\033\120\035" +
    "\113\064\127\065\116\066\122\067\101\070\075\101\106" +
    "\102\121\104\100\116\112\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\050\015\u0149\025\157\026\150" +
    "\027\161\030\144\031\140\032\145\050\155\077\147\101" +
    "\142\102\152\105\160\106\141\115\156\116\143\117\151" +
    "\120\146\121\153\123\154\001\002\000\004\012\346\001" +
    "\002\000\120\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\016\uffcc\022\uffcc\023\uffcc\033" +
    "\uffcc\035\uffcc\037\uffcc\042\uffcc\043\uffcc\055\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\101\uffcc\102\uffcc\104\uffcc\107\uffcc" +
    "\111\u014b\116\uffcc\122\uffcc\124\uffcc\125\uffcc\126\uffcc\127" +
    "\uffcc\130\uffcc\001\002\000\006\012\346\107\361\001\002" +
    "\000\116\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\016\uffcb\022\uffcb\023\uffcb\033\uffcb" +
    "\035\uffcb\037\uffcb\042\uffcb\043\uffcb\055\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\101\uffcb\102\uffcb\104\uffcb\107\uffcb\116" +
    "\uffcb\122\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\130\uffcb" +
    "\001\002\000\116\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\022\uffc9\023\uffc9" +
    "\033\uffc9\035\uffc9\037\uffc9\042\uffc9\043\uffc9\055\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\101\uffc9\102\uffc9\104\uffc9\107" +
    "\uffc9\116\uffc9\122\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9" +
    "\130\uffc9\001\002\000\116\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\022\uffca" +
    "\023\uffca\033\uffca\035\uffca\037\uffca\042\uffca\043\uffca\055" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\101\uffca\102\uffca\104" +
    "\uffca\107\uffca\116\uffca\122\uffca\124\uffca\125\uffca\126\uffca" +
    "\127\uffca\130\uffca\001\002\000\046\014\125\016\115\033" +
    "\120\035\113\064\127\065\116\066\122\067\101\070\075" +
    "\101\106\102\121\104\100\116\112\124\074\125\110\126" +
    "\123\127\077\130\103\001\002\000\050\015\u0151\025\157" +
    "\026\150\027\161\030\144\031\140\032\145\050\155\077" +
    "\147\101\142\102\152\105\160\106\141\115\156\116\143" +
    "\117\151\120\146\121\153\123\154\001\002\000\004\012" +
    "\u0152\001\002\000\004\037\u0154\001\002\000\010\013\u015a" +
    "\037\u0154\042\u015c\001\002\000\046\014\125\016\115\033" +
    "\120\035\113\064\127\065\116\066\122\067\101\070\075" +
    "\101\106\102\121\104\100\116\112\124\074\125\110\126" +
    "\123\127\077\130\103\001\002\000\010\013\uffcf\037\uffcf" +
    "\042\uffcf\001\002\000\050\025\157\026\150\027\161\030" +
    "\144\031\140\032\145\050\155\077\147\100\u0157\101\142" +
    "\102\152\105\160\106\141\115\156\116\143\117\151\120" +
    "\146\121\153\123\154\001\002\000\110\004\043\005\047" +
    "\006\045\007\040\010\051\012\346\014\125\016\375\022" +
    "\u0107\023\377\033\120\035\113\043\u0101\055\u0109\063\356" +
    "\064\127\065\116\066\122\067\101\070\075\073\362\074" +
    "\370\075\351\076\347\101\106\102\121\104\100\107\361" +
    "\116\112\122\353\124\074\125\110\126\123\127\077\130" +
    "\103\001\002\000\116\004\043\005\047\006\045\007\040" +
    "\010\051\012\346\013\uffce\014\125\016\375\022\u0107\023" +
    "\377\033\120\035\113\037\uffce\042\uffce\043\u0101\055\u0109" +
    "\063\356\064\127\065\116\066\122\067\101\070\075\073" +
    "\362\074\370\075\351\076\347\101\106\102\121\104\100" +
    "\107\361\116\112\122\353\124\074\125\110\126\123\127" +
    "\077\130\103\001\002\000\116\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016\uffec\022" +
    "\uffec\023\uffec\033\uffec\035\uffec\037\uffec\042\uffec\043\uffec" +
    "\055\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\073\uffec\074\uffec\075\uffec\076\uffec\101\uffec\102\uffec" +
    "\104\uffec\107\uffec\116\uffec\122\uffec\124\uffec\125\uffec\126" +
    "\uffec\127\uffec\130\uffec\001\002\000\116\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\022\uffd2\023\uffd2\033\uffd2\035\uffd2\037\uffd2\042\uffd2" +
    "\043\uffd2\055\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\101\uffd2" +
    "\102\uffd2\104\uffd2\107\uffd2\116\uffd2\122\uffd2\124\uffd2\125" +
    "\uffd2\126\uffd2\127\uffd2\130\uffd2\001\002\000\004\013\u0160" +
    "\001\002\000\004\100\u015e\001\002\000\010\013\uffd0\037" +
    "\uffd0\042\uffd0\001\002\000\110\004\043\005\047\006\045" +
    "\007\040\010\051\012\346\014\125\016\375\022\u0107\023" +
    "\377\033\120\035\113\043\u0101\055\u0109\063\356\064\127" +
    "\065\116\066\122\067\101\070\075\073\362\074\370\075" +
    "\351\076\347\101\106\102\121\104\100\107\361\116\112" +
    "\122\353\124\074\125\110\126\123\127\077\130\103\001" +
    "\002\000\112\004\043\005\047\006\045\007\040\010\051" +
    "\012\346\013\uffcd\014\125\016\375\022\u0107\023\377\033" +
    "\120\035\113\043\u0101\055\u0109\063\356\064\127\065\116" +
    "\066\122\067\101\070\075\073\362\074\370\075\351\076" +
    "\347\101\106\102\121\104\100\107\361\116\112\122\353" +
    "\124\074\125\110\126\123\127\077\130\103\001\002\000" +
    "\116\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\022\uffd1\023\uffd1\033\uffd1\035" +
    "\uffd1\037\uffd1\042\uffd1\043\uffd1\055\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\101\uffd1\102\uffd1\104\uffd1\107\uffd1\116\uffd1" +
    "\122\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\001" +
    "\002\000\140\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\012\uffee\013\uffee\014\uffee\016\uffee\022\uffee\023\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\042\uffee\043\uffee" +
    "\045\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\061" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\073\uffee\074\uffee\075\uffee\076\uffee\101\uffee\102\uffee\104" +
    "\uffee\107\uffee\111\uffee\116\uffee\122\uffee\124\uffee\125\uffee" +
    "\126\uffee\127\uffee\130\uffee\001\002\000\004\015\u0163\001" +
    "\002\000\004\011\u0164\001\002\000\116\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\022\uffc1\023\uffc1\033\uffc1\035\uffc1\037\uffc1\042\uffc1" +
    "\043\uffc1\055\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\101\uffc1" +
    "\102\uffc1\104\uffc1\107\uffc1\116\uffc1\122\uffc1\124\uffc1\125" +
    "\uffc1\126\uffc1\127\uffc1\130\uffc1\001\002\000\116\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\016\uffc7\022\uffc7\023\uffc7\033\uffc7\035\uffc7\037\uffc7" +
    "\042\uffc7\043\uffc7\055\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\101\uffc7\102\uffc7\104\uffc7\107\uffc7\116\uffc7\122\uffc7\124" +
    "\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\001\002\000\116" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\022\uffdf\023\uffdf\033\uffdf\035\uffdf" +
    "\037\uffdf\042\uffdf\043\uffdf\055\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\101\uffdf\102\uffdf\104\uffdf\107\uffdf\116\uffdf\122" +
    "\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\001\002" +
    "\000\116\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\016\uffc8\022\uffc8\023\uffc8\033\uffc8" +
    "\035\uffc8\037\uffc8\042\uffc8\043\uffc8\055\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\076\uffc8\101\uffc8\102\uffc8\104\uffc8\107\uffc8\116" +
    "\uffc8\122\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8" +
    "\001\002\000\040\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\013\ufff1\016\ufff1\034\ufff1\036\ufff1\045\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\056\ufff1\061\ufff1\001\002\000\024\002" +
    "\ufff9\036\ufff9\041\ufff9\045\ufff9\047\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\061\ufff9\001\002\000\004\011\u016f\001\002\000" +
    "\004\057\u016d\001\002\000\040\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\013\ufff4\016\ufff4\034\ufff4\036\ufff4\045" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\056\ufff4\061\ufff4\001\002" +
    "\000\034\004\043\005\047\006\045\007\040\010\051\016" +
    "\053\034\041\036\014\045\020\052\005\053\006\054\012" +
    "\061\016\001\002\000\040\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\013\ufff0\016\ufff0\034\ufff0\036\ufff0\045\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\056\ufff0\061\ufff0\001\002\000" +
    "\040\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3" +
    "\016\ufff3\034\ufff3\036\ufff3\045\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\056\ufff3\061\ufff3\001\002\000\004\013\u0171\001\002" +
    "\000\024\002\ufffa\036\ufffa\041\ufffa\045\ufffa\047\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\061\ufffa\001\002\000\004\002\001" +
    "\001\002\000\024\002\ufffc\036\ufffc\041\ufffc\045\ufffc\047" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\061\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\024\047\016\050\010\051\006\052\021\062" +
    "\020\066\012\071\022\077\003\100\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\051\026\052\021\062\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\047\016\050\010\051\006\052\021\062\020\066\024" +
    "\077\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\036\037\043\047" +
    "\055\051\006\052\021\053\053\056\056\057\051\062\020" +
    "\065\047\067\u016f\070\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\013\036\037\043\047\055\051\006" +
    "\052\021\053\053\056\056\057\051\062\020\065\047\067" +
    "\045\070\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\036\037\043\047\055\051" +
    "\006\052\021\053\053\056\u016b\057\051\062\020\065\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\344\001\001\000\002\001" +
    "\001\000\006\040\336\041\061\001\001\000\002\001\001" +
    "\000\016\013\036\037\043\051\026\052\021\053\060\062" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\063\041\061\001\001\000\002\001\001\000\004\031" +
    "\067\001\001\000\002\001\001\000\004\041\065\001\001" +
    "\000\002\001\001\000\004\031\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\106\007\110\010\123" +
    "\011\113\025\101\061\072\073\104\074\075\075\116\076" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\244\001\001\000\002\001\001\000" +
    "\022\006\255\007\110\010\123\011\113\025\101\061\072" +
    "\073\104\074\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\234\007\110\010\123\011\113\025\101\061" +
    "\072\073\104\074\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\233\007\110\010" +
    "\123\011\113\025\101\061\072\073\104\074\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\222\007\110\010\123\011\113\025\101\061\072\073" +
    "\104\074\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\205\007\110\010\123\011" +
    "\113\013\204\025\101\061\072\073\104\074\075\001\001" +
    "\000\006\013\036\037\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\133\007\110" +
    "\010\123\011\113\025\101\061\072\063\132\064\134\073" +
    "\104\074\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\136\007\110\010\123\011" +
    "\113\025\101\061\072\073\104\074\075\001\001\000\002" +
    "\001\001\000\022\006\202\007\110\010\123\011\113\025" +
    "\101\061\072\073\104\074\075\001\001\000\022\006\201" +
    "\007\110\010\123\011\113\025\101\061\072\073\104\074" +
    "\075\001\001\000\002\001\001\000\022\006\200\007\110" +
    "\010\123\011\113\025\101\061\072\073\104\074\075\001" +
    "\001\000\022\006\177\007\110\010\123\011\113\025\101" +
    "\061\072\073\104\074\075\001\001\000\022\006\176\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\022\006\175\007\110\010\123\011\113\025" +
    "\101\061\072\073\104\074\075\001\001\000\022\006\172" +
    "\007\110\010\123\011\113\025\101\061\072\073\104\074" +
    "\075\001\001\000\022\006\171\007\110\010\123\011\113" +
    "\025\101\061\072\073\104\074\075\001\001\000\022\006" +
    "\170\007\110\010\123\011\113\025\101\061\072\073\104" +
    "\074\075\001\001\000\002\001\001\000\022\006\167\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\022\006\166\007\110\010\123\011\113\025" +
    "\101\061\072\073\104\074\075\001\001\000\002\001\001" +
    "\000\022\006\164\007\110\010\123\011\113\025\101\061" +
    "\072\073\104\074\075\001\001\000\022\006\163\007\110" +
    "\010\123\011\113\025\101\061\072\073\104\074\075\001" +
    "\001\000\022\006\162\007\110\010\123\011\113\025\101" +
    "\061\072\073\104\074\075\001\001\000\022\006\161\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\174\007\110\010\123\011\113" +
    "\025\101\061\072\073\104\074\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\133\007\110\010\123\011\113\025" +
    "\101\061\072\063\212\064\134\073\104\074\075\001\001" +
    "\000\022\006\211\007\110\010\123\011\113\025\101\061" +
    "\072\073\104\074\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\216\007\110\010\123\011\113\025\101\061\072\073\104" +
    "\074\075\001\001\000\002\001\001\000\022\006\220\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\224\007\110\010\123\011\113\025\101" +
    "\061\072\073\104\074\075\001\001\000\002\001\001\000" +
    "\022\006\226\007\110\010\123\011\113\025\101\061\072" +
    "\073\104\074\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\231\007\110\010\123\011\113\025\101" +
    "\061\072\073\104\074\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\236\001\001\000\004\032\244\001\001\000\002\001" +
    "\001\000\026\006\133\007\110\010\123\011\113\025\101" +
    "\061\072\063\241\064\134\073\104\074\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\250\007\110" +
    "\010\123\011\113\025\101\061\072\073\104\074\075\001" +
    "\001\000\002\001\001\000\022\006\246\007\110\010\123" +
    "\011\113\025\101\061\072\073\104\074\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\253\007\110\010\123\011\113\025" +
    "\101\061\072\073\104\074\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\257\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\267\072\266\001\001" +
    "\000\030\006\277\007\110\010\123\011\113\025\101\034" +
    "\276\035\274\036\275\061\072\073\104\074\075\001\001" +
    "\000\004\013\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\273\001\001\000\004\032\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\277\007\110\010\123\011\113\025" +
    "\101\034\302\036\275\061\072\073\104\074\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\036\037" +
    "\307\054\305\055\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\036\037\311\001" +
    "\001\000\002\001\001\000\004\031\313\001\001\000\002" +
    "\001\001\000\004\031\315\001\001\000\002\001\001\000" +
    "\010\013\036\037\307\054\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\036\037\307\054\305\055" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\013\036\037\043\047\326\051\006\052\021\053\325\056" +
    "\327\057\051\062\020\001\001\000\002\001\001\000\016" +
    "\013\036\037\043\051\026\052\021\053\330\062\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\036\037\307\054\305\055" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\067\001\001\000\012\013\036\037" +
    "\307\054\305\055\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\002" +
    "\u0104\003\353\004\u0107\005\373\006\363\007\347\010\370" +
    "\011\113\013\036\014\u0109\015\365\016\366\017\u0102\020" +
    "\377\021\371\022\354\023\362\025\101\026\356\033\u0101" +
    "\037\351\042\375\046\372\060\364\061\u0105\073\u0103\074" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\u012b\041\061\001\001\000\002\001" +
    "\001\000\066\002\u0104\004\u0158\005\373\006\363\007\347" +
    "\010\370\011\113\013\036\014\u0109\015\365\016\366\017" +
    "\u0102\020\377\021\371\022\354\023\362\025\101\026\356" +
    "\033\u0101\037\351\042\375\046\372\060\364\061\u0105\073" +
    "\u0103\074\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\u010b\007\110\010\123\011" +
    "\113\025\101\030\u010a\061\072\073\104\074\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\u010f\007\110" +
    "\010\123\011\113\025\101\061\072\073\104\074\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\106\007\110\010\123\011" +
    "\113\025\101\061\072\073\104\074\075\075\116\076\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\u0119\007\110\010\123" +
    "\011\113\025\101\061\072\073\104\074\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\u011d\007\110\010\123\011\113\025\101\061\072\073" +
    "\104\074\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\u0122\007" +
    "\110\010\123\011\113\025\101\061\072\073\104\074\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\u0128\013\036\016\u0129\037\u012a\073\u0127" +
    "\074\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\u012b\041\061" +
    "\001\001\000\002\001\001\000\004\031\067\001\001\000" +
    "\022\006\u012e\007\110\010\123\011\113\025\101\061\072" +
    "\073\104\074\075\001\001\000\002\001\001\000\004\002" +
    "\u0130\001\001\000\002\001\001\000\022\006\u0132\007\110" +
    "\010\123\011\113\025\101\061\072\073\104\074\075\001" +
    "\001\000\002\001\001\000\024\006\363\007\u0134\010\u0136" +
    "\011\113\025\101\027\u0135\061\072\073\104\074\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\u0138\001\001\000\002\001\001\000\022\006" +
    "\u013a\007\110\010\123\011\113\025\101\061\072\073\104" +
    "\074\075\001\001\000\002\001\001\000\024\006\363\007" +
    "\u0134\010\u0136\011\113\025\101\027\u013c\061\072\073\104" +
    "\074\075\001\001\000\002\001\001\000\004\002\u013e\001" +
    "\001\000\002\001\001\000\004\074\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\u0143\007\110\010" +
    "\123\011\113\025\101\061\072\073\104\074\075\001\001" +
    "\000\002\001\001\000\004\002\u0145\001\001\000\002\001" +
    "\001\000\022\006\u0147\007\110\010\123\011\113\025\101" +
    "\061\072\073\104\074\075\001\001\000\002\001\001\000" +
    "\004\002\u0149\001\001\000\002\001\001\000\010\002\u014c" +
    "\023\u014d\024\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\u014f\007\110\010\123" +
    "\011\113\025\101\061\072\073\104\074\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\u0154\045\u0152" +
    "\001\001\000\006\043\u015c\044\u015a\001\001\000\022\006" +
    "\u0155\007\110\010\123\011\113\025\101\061\072\073\104" +
    "\074\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\u0104\003\u0157\004\u0107\005\373\006\363\007\347" +
    "\010\370\011\113\013\036\014\u0109\015\365\016\366\017" +
    "\u0102\020\377\021\371\022\354\023\362\025\101\026\356" +
    "\033\u0101\037\351\042\375\046\372\060\364\061\u0105\073" +
    "\u0103\074\075\001\001\000\066\002\u0104\004\u0158\005\373" +
    "\006\363\007\347\010\370\011\113\013\036\014\u0109\015" +
    "\365\016\366\017\u0102\020\377\021\371\022\354\023\362" +
    "\025\101\026\356\033\u0101\037\351\042\375\046\372\060" +
    "\364\061\u0105\073\u0103\074\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\002\u0104\003\u015e\004\u0107\005\373" +
    "\006\363\007\347\010\370\011\113\013\036\014\u0109\015" +
    "\365\016\366\017\u0102\020\377\021\371\022\354\023\362" +
    "\025\101\026\356\033\u0101\037\351\042\375\046\372\060" +
    "\364\061\u0105\073\u0103\074\075\001\001\000\066\002\u0104" +
    "\004\u0158\005\373\006\363\007\347\010\370\011\113\013" +
    "\036\014\u0109\015\365\016\366\017\u0102\020\377\021\371" +
    "\022\354\023\362\025\101\026\356\033\u0101\037\351\042" +
    "\375\046\372\060\364\061\u0105\073\u0103\074\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\013\036\037\043\047\326\051\006\052\021\053" +
    "\325\056\u016d\057\051\062\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserReporte$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserReporte$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserReporte$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	


	public NodoReporte raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserReporte$actions {
  private final parserReporte parser;

  /** Constructor */
  CUP$parserReporte$actions(parserReporte parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserReporte$do_action_part00000000(
    int                        CUP$parserReporte$act_num,
    java_cup.runtime.lr_parser CUP$parserReporte$parser,
    java.util.Stack            CUP$parserReporte$stack,
    int                        CUP$parserReporte$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserReporte$result;

      /* select the action based on the action number */
      switch (CUP$parserReporte$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = start_val;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserReporte$parser.done_parsing();
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LCLASE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 raiz = lista;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INICIO",62, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LCLASE ::= LCLASE CLASE 
            {
              NodoReporte RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 lista.add(clase); RESULT = lista;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCLASE",55, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCLASE ::= LCLASE IMPORTAR puntocoma 
            {
              NodoReporte RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 lista.add(clase); RESULT = lista;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCLASE",55, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LCLASE ::= CLASE 
            {
              NodoReporte RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Inicio","Inicio",claseright, claseleft);RESULT.add(clase);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCLASE",55, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LCLASE ::= IMPORTAR puntocoma 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Inicio","Inicio",expright, expleft);RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCLASE",55, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTAR ::= importar cadena 
            {
              NodoReporte RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("importar",nombre, orright, orleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("IMPORTAR",61, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CLASE ::= CLASEMODIFICADORES clase id llavei CUERPOCLASE llaved 
            {
              NodoReporte RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte modificador = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		
                clase.add(modificador); 
                clase.add(new NodoReporte("id",nombre,nombreright,nombreleft));
                RESULT = clase;
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CLASE",52, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= CLASEMODIFICADORES clase id extiende id llavei CUERPOCLASE llaved 
            {
              NodoReporte RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).right;
		NodoReporte modificador = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int padreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String padre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		
                clase.add(modificador); 
                clase.add(new NodoReporte("id",nombre,nombreright,nombreleft));
                clase.add(new NodoReporte("padre",padre,padreright,padreleft));
                RESULT = clase;
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CLASE",52, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASEMODIFICADORES ::= LMODFICADOR 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = l;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CLASEMODIFICADORES",38, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASEMODIFICADORES ::= 
            {
              NodoReporte RESULT =null;
		 RESULT = new NodoReporte("modificadores","modifidores",0,0); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CLASEMODIFICADORES",38, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPOCLASE ::= CUERPO 
            {
              NodoReporte RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = clase;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",53, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOCLASE ::= 
            {
              NodoReporte RESULT =null;
		RESULT = new NodoReporte("clase",0,0);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",53, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CUERPO FUNCION 
            {
              NodoReporte RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 clase.add(f); RESULT = clase;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              NodoReporte RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 clase.add(f); RESULT = clase;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= FUNCION 
            {
              NodoReporte RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("clase",fright,fleft); RESULT.add(f);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= DECATRIB puntocoma 
            {
              NodoReporte RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte atributos = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("clase",atributosright,atributosleft); RESULT.add(atributos);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= CUERPO arroba sobrescrito FUNCION 
            {
              NodoReporte RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		NodoReporte clase = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 f.pop(new NodoReporte("override",aright, aleft)); RESULT = clase; RESULT.add(f);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= arroba sobrescrito FUNCION 
            {
              NodoReporte RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		f.pop(new NodoReporte("override",aright, aleft)); RESULT = new NodoReporte("clase",aright,aleft); RESULT.add(f);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CUERPO",54, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE ::= llavei LINST llaved 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("bloque",lright, lleft); RESULT.add(l);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE ::= llavei llaved 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("bloque",lright, lleft); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINST ::= LINST INST 
            {
              NodoReporte RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINST ::= INST 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("lista","lista",instright, instleft); RESULT.add(inst);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= DECLARACION puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = inst; 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= ASIG puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= BLOQUE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = inst; 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= PRINT 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = inst; 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= PRINTABLE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= WHILE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= DOWHILE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= FOR 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= BREAK 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= CONTINUE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= IF 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= AUMENTO puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= DECREMENTO puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= ASIGV puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= FOREACH 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= SWITCH 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= RETORNO 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= LLAMADA puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPLICITCAST ::= str_ pari EXP pard 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte expresion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("tostr", tright, tleft); RESULT.add(expresion);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPLICITCAST ::= todouble pari EXP pard 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte expresion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("todouble", tright, tleft);RESULT.add(expresion);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPLICITCAST ::= tochar pari EXP pard 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte expresion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("tochar", tright, tleft);RESULT.add(expresion);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPLICITCAST ::= toint pari EXP pard 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte expresion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("toint", tright, tleft);RESULT.add(expresion);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACTUALIZACION ::= AUMENTO 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ACTUALIZACION ::= DECREMENTO 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              NodoReporte RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		
                RESULT = new NodoReporte("switch","switch", iright, ileft);
                RESULT.add(lista);
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              NodoReporte RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte defecto = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		
                lista.add(defecto);
                RESULT = new NodoReporte("switch","switch", iright, ileft);
                RESULT.add(lista);
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCASO ::= LCASO CASO 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte caso = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = l; RESULT.add(caso);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCASO ::= CASO 
            {
              NodoReporte RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte caso = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("casos","casos",casoright,casoleft); RESULT.add(caso);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASO ::= caso EXP dospuntos LINST 
            {
              NodoReporte RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte linst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("DEFECTO","defecto",iright,ileft); RESULT.add(condicion);RESULT.add(linst);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEFECTO ::= defecto dospuntos LINST 
            {
              NodoReporte RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte linst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("DEFECTO","defecto",iright,ileft); RESULT.add(linst);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= si pari EXP pard BLOQUE 
            {
              NodoReporte RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("if", "if", siright, sileft); RESULT.add(condicion); RESULT.add(bloque);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              NodoReporte RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst2 = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("if", "if", siright, sileft); RESULT.add(condicion); RESULT.add(bloque); RESULT.add(inst2);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= IF 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte inst = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = inst;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE ::= BLOQUE 
            {
              NodoReporte RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT=bloque; 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTINUE ::= continuar puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("continue","continue",instright, instleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BREAK ::= romper puntocoma 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("break","break",instright, instleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              NodoReporte RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		
                 RESULT = new NodoReporte("while","while",instright, instleft);
                 RESULT.add(condicion);
                 RESULT.add(bloque);
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              NodoReporte RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		
            RESULT = new NodoReporte("dowhile","dowhile", iright, ileft);
            RESULT.add(bloque);
            //RESULT.add(inst);
            RESULT.add(condicion);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DOWHILE",14, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOREACH ::= para pari TIPO id dospuntos EXP pard BLOQUE 
            {
              NodoReporte RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte t = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte origen = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		
            RESULT = new NodoReporte("foreach","foreach",pararight, paraleft);
            RESULT.add(t);
            RESULT.add(new NodoReporte("id",id,idright, idleft));
            RESULT.add(origen);
            RESULT.add(bloque);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("FOREACH",32, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-7)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              NodoReporte RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).right;
		NodoReporte dec = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte act = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
        RESULT = new NodoReporte("for","for",pararight, paraleft);
        RESULT.add(dec);
        RESULT.add(condicion);
        RESULT.add(act);
        RESULT.add(bloque);
    
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              NodoReporte RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).right;
		NodoReporte dec = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte condicion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte act = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
        RESULT = new NodoReporte("for","for",pararight, paraleft);
        RESULT.add(dec);
        RESULT.add(condicion);
        RESULT.add(act);
        RESULT.add(bloque);
    
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-8)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTABLE ::= printable pari pard puntocoma 
            {
              NodoReporte RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		RESULT = new NodoReporte("printable","printable",pright,pleft); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRINTABLE",11, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= println pari EXP pard puntocoma 
            {
              NodoReporte RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		RESULT = new NodoReporte("println","println", pright,pleft); RESULT.add(valor); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= print pari EXP pard puntocoma 
            {
              NodoReporte RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		RESULT = new NodoReporte("print","print", pright,pleft); RESULT.add(valor);  
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG ::= ACCESO igual VALORASIGNACION 
            {
              NodoReporte RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte origen = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("asigancion","asignacion", origenright, origenleft);
            RESULT.add(origen);
            RESULT.add(valor);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGV ::= id LEXP igual EXP 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte coordenas = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("AsignacionV", "AsignacionV",  idright,idleft); 
            RESULT.add(new NodoReporte("ID",id, idright, idleft));
            RESULT.add(coordenas);
            RESULT.add(valor);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ASIGV",25, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= ACCESO punto ORIGEN 
            {
              NodoReporte RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte origen = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte destino = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("acceso", "acceso", origenright, origenleft); RESULT.add(origen); RESULT.add(destino);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACCESO",57, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO ::= ORIGEN 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACCESO",57, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO ::= este 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("acceso","acceso",expright, expleft); RESULT.add(new NodoReporte("ID",exp,expright,expleft));
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACCESO",57, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ORIGEN ::= id 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Origen", "Origen", idright, idleft); RESULT.add(new NodoReporte("ID",id,idright,idleft));
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ORIGEN",58, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ORIGEN ::= ORIGEN LEXP 
            {
              NodoReporte RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte origen = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte coor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Origen" , "Origen", origenright, origenleft); RESULT.add(origen); RESULT.add(coor);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ORIGEN",58, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= TIPO LDEC 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte t = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = lista; RESULT.pop(t); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LDEC ::= LDEC coma DEC 
            {
              NodoReporte RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte dec = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = lista; RESULT.add(dec);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LDEC ::= DEC 
            {
              NodoReporte RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte dec = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Declaracion","Declaracion",decright, decleft); RESULT.add(dec);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEC ::= id 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Dec",id, idright, idleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEC ::= id igual VALORASIGNACION 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Dec",id,idright, idleft); RESULT.add(valor);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEC ::= id NDIM 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Dec",id,idright, idleft); RESULT.add(new NodoReporte("Dimensiones",dim+"",dimright, dimleft)); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEC ::= id NDIM igual VALORARREGLO 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Dec",id,idright, idleft); RESULT.add(new NodoReporte("Dimensiones",dim+"",dimright, dimleft)); RESULT.add(valor);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEC ::= id NDIM igual ARR 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte valor = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("Dec",id,idright, idleft); RESULT.add(new NodoReporte("Dimensiones",dim+"",dimright, dimleft)); RESULT.add(valor);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORASIGNACION ::= EXP 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",60, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORASIGNACION ::= INSTANCIA 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("VALORASIGNACION",60, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALORARREGLO ::= nuevo PRIMITIVO LEXP 
            {
              NodoReporte RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("New","Objeto",nright,nleft); RESULT.add(tipo); RESULT.add(l);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",56, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALORARREGLO ::= nuevo id LEXP 
            {
              NodoReporte RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("New",tipo,nright, nleft); RESULT.add(l);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("VALORARREGLO",56, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= PRIMITIVO 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte t = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = t;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= id 
            {
              NodoReporte RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Tipo", id, idright, idleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NDIM ::= NDIM corchetei corcheted 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		RESULT = n+1;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NDIM ::= corchetei corcheted 
            {
              Integer RESULT =null;
		 RESULT = 1;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP and EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("and","and",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP or EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("or","or",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP xor EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("xor","xor",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP instanceof_ id 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("instanceof",tipo,opiright,opileft); RESULT.add(opi);;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= not EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("not","not",opiright,opileft); RESULT.add(opi);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP igualigual EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("igual","igual",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP desigual EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("desigual","desigual",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP mayor EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("mayor","mayor",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP mayorigual EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("mayorigual","mayorigual",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= EXP menor EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("menor","menor",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP menorigual EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("menorigual","menorigual",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP suma EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("suma","suma",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= EXP menos EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("menos","resta",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXP multi EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("multi","multi",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= EXP div EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("%","%",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= EXP modulo EXP 
            {
              NodoReporte RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("pow","pow",opiright,opileft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= potencia pari EXP coma EXP pard 
            {
              NodoReporte RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		NodoReporte opi = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte opd = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("pow","pow",potright,potleft); RESULT.add(opi); RESULT.add(opd);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= menos EXP 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("menos","menos", opright,opleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= TER 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = op;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= AUMENTO 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = op;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= DECREMENTO 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = op;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= LLAMADA 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= pari PRIMITIVO pard EXP 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("casteo","implicito",tright, tleft);RESULT.add(tipo); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= pari id pard EXP 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("casteo",tipo, tright, tleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= entero 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("entero",v+"",vright, vleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= decimal 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("decimal",v+"",vright, vleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= booleano 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("booleano",v+"",vright, vleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= cadena 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("cadena",v+"",vright, vleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= caracter 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("character",v+"",vright, vleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= ACCESO 
            {
              NodoReporte RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte v = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = v;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= pari EXP pard 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = op;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXPLICITCAST 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= nulo 
            {
              NodoReporte RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Nulo","Nulo",rright, rleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTANCIA ::= nuevo TIPO pari PARACTUALES pard 
            {
              NodoReporte RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("Instancia","Instancia", nright, nleft); RESULT.add(tipo); RESULT.add(lista);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("INSTANCIA",59, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LLAMADA ::= ACCESO punto id pari PARACTUALES pard 
            {
              NodoReporte RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte origen = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("Llamada",nombre, nombreright, nombreleft); RESULT.add(origen); RESULT.add(l); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LLAMADA",47, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LLAMADA ::= id pari PARACTUALES pard 
            {
              NodoReporte RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Llamada",nombre,nombreright,nombreleft); RESULT.add(l);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LLAMADA",47, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              NodoReporte RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Retorno", "Return", rright, rleft); RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("RETORNO",46, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // RETORNO ::= retorno puntocoma 
            {
              NodoReporte RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("Retorno","Retorno",rright, rleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("RETORNO",46, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARACTUALES ::= ACTUALES 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = l;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARACTUALES",49, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARACTUALES ::= 
            {
              NodoReporte RESULT =null;
		RESULT = new NodoReporte("PActuales","Actuales",0, 0);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARACTUALES",49, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACTUALES ::= ACTUALES coma EXP 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = l; RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACTUALES",50, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ACTUALES ::= EXP 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("PActuales","Actuales",expright, expleft); RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ACTUALES",50, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRETORNO ::= EXP 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUNCION ::= CABECERAMET BLOQUE 
            {
              NodoReporte RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte funcion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte bloque = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = funcion; RESULT.add(bloque);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FUNCION ::= CABECERAMET puntocoma 
            {
              NodoReporte RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte funcion = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = funcion;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CABECERAMET ::= LMODFICADOR RESULTADO id pari LPARFORMAL pard 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).right;
		NodoReporte m = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte res = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lf = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 
            RESULT = new NodoReporte("Funcion",nombre, nombreright, nombreleft);
            RESULT.add(m);
            RESULT.add(res);
            RESULT.add(lf);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-5)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CABECERAMET ::= RESULTADO id pari LPARFORMAL pard 
            {
              NodoReporte RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte res = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte lf = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 
        RESULT = new NodoReporte("Funcion",nombre, nombreright, nombreleft);
        RESULT.add(res);
        RESULT.add(lf);
      
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CABECERAMET ::= LMODFICADOR id pari LPARFORMAL pard 
            {
              NodoReporte RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte modificador = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte formales = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		
        RESULT = new NodoReporte("Funcion",nombre, nombreright, nombreleft); 
        RESULT.add(modificador);
        RESULT.add(formales);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CABECERAMET ::= id pari LPARFORMAL pard 
            {
              NodoReporte RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte formales = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Constructor",nombre, nombreright, nombreleft); RESULT.add(formales);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RESULTADO ::= TIPO 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte t = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		  RESULT = t;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("RESULTADO",41, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RESULTADO ::= tvoid 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		  RESULT = new NodoReporte("Tipo",t, tright, tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("RESULTADO",41, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              NodoReporte RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte lista = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte par = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = lista; RESULT.add(par);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",43, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LPARFORMAL ::= PARFORMAL 
            {
              NodoReporte RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte par = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =  new NodoReporte("LFormal","LFormal",parright,parleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",43, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LPARFORMAL ::= 
            {
              NodoReporte RESULT =null;
		 RESULT =  new NodoReporte("LFormal","LFormal",0,0);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",43, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARFORMAL ::= TIPO id 
            {
              NodoReporte RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("PFormal", nombre, tiporight, tipoleft);
            RESULT.add(tipo);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARFORMAL ::= final_ TIPO id 
            {
              NodoReporte RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("PFormal", nombre, fright, fleft);
            RESULT.add(new NodoReporte("modificador",f,fright,fleft));
            RESULT.add(tipo);            
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARFORMAL ::= TIPO id NDIM 
            {
              NodoReporte RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("PFormal", nombre, tiporight, tipoleft);
            RESULT.add(tipo);
            RESULT.add(new NodoReporte("tamano",n+"",nright, nleft));
            
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              NodoReporte RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
            RESULT = new NodoReporte("PFormal", nombre, fright, fleft); 
            RESULT.add(new NodoReporte("modificador",f,fright,fleft));
            RESULT.add(new NodoReporte("dimensiones",n+"",nright,nleft));
             
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LMODFICADOR ::= LMODFICADOR MODFUNCION 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte m = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = l ; RESULT.add(m); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LMODFICADOR ::= MODFUNCION 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte m = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = new NodoReporte("LMOD","LMOD", mright, mleft); RESULT.add(m);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MODFUNCION ::= MODATRIB 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte m = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = m;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODFUNCION",39, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MODFUNCION ::= abstracto 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODFUNCION",39, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECATRIB ::= LMODFICADOR RESULTADO LDEC 
            {
              NodoReporte RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte lm = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte declaraciones = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
                RESULT = new NodoReporte("Atributo","Dec",tiporight, tipoleft);
                RESULT.add(lm);
                RESULT.add(tipo);   
                RESULT.add(declaraciones);
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DECATRIB",51, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECATRIB ::= RESULTADO LDEC 
            {
              NodoReporte RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte tipo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte declaraciones = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 
                RESULT = new NodoReporte("Atributo","Dec",tiporight, tipoleft);
                RESULT.add(tipo);   
                RESULT.add(declaraciones);
            
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DECATRIB",51, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MODATRIB ::= final_ 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODATRIB",48, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MODATRIB ::= estatico 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		  RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODATRIB",48, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MODATRIB ::= MODCONST 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte m = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = m;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODATRIB",48, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // MODCONST ::= publico 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODCONST",40, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // MODCONST ::= protegido 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODCONST",40, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MODCONST ::= privado 
            {
              NodoReporte RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("modificador",m,mright,mleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("MODCONST",40, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              NodoReporte RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).right;
		NodoReporte l = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = l;  RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-3)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LEXP ::= corchetei EXP corcheted 
            {
              NodoReporte RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = new NodoReporte("LEXP","LEXP",xright,xleft); RESULT.add(exp);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ARR ::= llavei LITEM llaved 
            {
              NodoReporte RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte nodo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		 RESULT = nodo;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ARR",28, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LITEM ::= LITEM coma ITEM 
            {
              NodoReporte RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte nodo = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte item = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 nodo.add(item); RESULT = nodo; 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LITEM ::= ITEM 
            {
              NodoReporte RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte item = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT= new NodoReporte("Elementos","item",itemright,itemleft); RESULT.add(item); 
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ITEM ::= EXP 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ITEM ::= ARR 
            {
              NodoReporte RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte exp = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		 RESULT = exp;
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AUMENTO ::= EXP aumento 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Aumento","Postfijo",opright, opleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AUMENTO ::= aumento EXP 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Aumento","Prefijo",opright, opleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECREMENTO ::= EXP decremento 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)).value;
		RESULT = new NodoReporte("Decremento","Postfijo" ,opright, opleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECREMENTO ::= decremento EXP 
            {
              NodoReporte RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte op = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT = new NodoReporte("Decremento","Prefijo",opright, opleft); RESULT.add(op);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-1)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              NodoReporte RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).right;
		NodoReporte c = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).right;
		NodoReporte v = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		NodoReporte f = (NodoReporte)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		                         
            RESULT = new NodoReporte("Ternario","Ternario",cright, cleft); 
            RESULT.add(c);
            RESULT.add(v);
            RESULT.add(f);
        
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("TER",19, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.elementAt(CUP$parserReporte$top-4)), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PRIMITIVO ::= tint 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =  new NodoReporte(t,t,tright,tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PRIMITIVO ::= tchar 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =     new NodoReporte(t,t,tright,tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PRIMITIVO ::= tdouble 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =    new NodoReporte(t,t,tright,tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PRIMITIVO ::= tbool 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =    new NodoReporte(t,t,tright,tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PRIMITIVO ::= tstring 
            {
              NodoReporte RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parserReporte$stack.peek()).value;
		RESULT =   new NodoReporte(t,t,tright,tleft);
              CUP$parserReporte$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserReporte$stack.peek()), RESULT);
            }
          return CUP$parserReporte$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserReporte$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserReporte$do_action(
    int                        CUP$parserReporte$act_num,
    java_cup.runtime.lr_parser CUP$parserReporte$parser,
    java.util.Stack            CUP$parserReporte$stack,
    int                        CUP$parserReporte$top)
    throws java.lang.Exception
    {
              return CUP$parserReporte$do_action_part00000000(
                               CUP$parserReporte$act_num,
                               CUP$parserReporte$parser,
                               CUP$parserReporte$stack,
                               CUP$parserReporte$top);
    }
}

}
