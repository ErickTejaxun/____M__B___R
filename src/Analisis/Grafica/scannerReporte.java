/* The following code was generated by JFlex 1.6.1 */

package Analisis.Grafica;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis.lexema;
import Utilidades.ErrorC;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class scannerReporte implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int cad1 = 2;
  public static final int cad2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    18, 18, 18, 18, 18, 18, 18, 18, 18,  1,  3, 70,  1,  2, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
     1, 47, 10, 18, 18, 68, 52, 11, 54, 55, 12, 46, 45, 19,  5, 20, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 17, 53, 50, 48, 49, 56, 
    60,  6,  6, 42, 62,  6,  6,  6,  6, 63,  6,  6, 41,  6,  6, 61, 
     6,  6,  6, 36,  6, 43,  6,  6,  6,  6,  6, 66, 18, 67, 69,  9, 
    18, 34, 31, 32, 28, 23, 22, 37, 33, 21,  6, 44, 24, 59, 26, 29, 
    38,  6, 35, 25, 27, 30, 39, 40, 58, 64,  6, 57, 51, 65, 18, 18, 
    18, 18, 18, 18, 18, 70, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18,  8, 18, 18, 18, 18, 18, 18, 18,  8, 18, 18, 18,  8, 18, 18, 
    18,  8, 18,  8, 18, 18, 18, 18, 18, 18,  8, 18, 18, 18, 18, 18, 
    18, 18, 18,  7, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 13, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\10\1\1\1\11\1\12\1\13\20\6"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\1\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\6\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\4\0\1\37\1\0"+
    "\1\40\1\41\20\6\1\42\20\6\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\6\1\52\1\53\4\0"+
    "\2\40\1\6\1\54\2\6\1\55\4\6\1\56\2\6"+
    "\1\57\11\6\1\60\16\6\1\61\7\6\3\0\1\40"+
    "\1\0\4\6\1\62\4\6\1\63\6\6\1\64\1\65"+
    "\6\6\1\66\1\67\12\6\1\70\3\6\3\0\1\40"+
    "\2\6\1\71\1\72\2\6\1\73\6\6\1\74\3\6"+
    "\1\75\1\76\1\6\1\77\4\6\1\100\1\6\1\101"+
    "\2\6\1\102\2\6\2\0\1\40\2\0\1\6\1\103"+
    "\1\6\1\104\1\105\2\6\1\106\3\6\1\107\3\6"+
    "\1\110\1\6\1\111\1\112\6\6\2\0\1\40\2\0"+
    "\1\6\1\113\4\6\1\114\1\115\3\6\1\116\1\6"+
    "\1\117\3\6\2\0\1\6\1\120\2\6\1\121\1\122"+
    "\1\123\4\6\1\124\1\0\3\6\1\125\1\126\1\127"+
    "\1\6\1\0\1\130\2\6\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\330\0\330\0\u0120\0\330"+
    "\0\u0168\0\u01b0\0\330\0\u01f8\0\330\0\u0240\0\330\0\u0288"+
    "\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8"+
    "\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708"+
    "\0\u0750\0\330\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900"+
    "\0\u0948\0\330\0\330\0\330\0\330\0\330\0\330\0\u0990"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\u09d8"+
    "\0\u01b0\0\u0a20\0\u0a68\0\330\0\u0ab0\0\u0af8\0\u0168\0\u0b40"+
    "\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80"+
    "\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\u1488"+
    "\0\u09d8\0\330\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\330"+
    "\0\u1638\0\u0168\0\u1680\0\u16c8\0\u0168\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u0168\0\u1830\0\u1878\0\u0168\0\u18c0\0\u1908\0\u1950"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u0168\0\u1b48"+
    "\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u0168\0\u1f38\0\u1f80"+
    "\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0"+
    "\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u0168\0\u23b8"+
    "\0\u2400\0\u2448\0\u2490\0\u0168\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u0168\0\u0168\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u0168\0\u0168\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u0168\0\u2b08"+
    "\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48"+
    "\0\u0168\0\u0168\0\u2d90\0\u2dd8\0\u0168\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u0168\0\u2fd0\0\u3018\0\u3060\0\u0168"+
    "\0\u0168\0\u30a8\0\u0168\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u0168"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u0168\0\u3330\0\u3378\0\u33c0"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u0168\0\u3570\0\u0168"+
    "\0\u0168\0\u35b8\0\u3600\0\u0168\0\u3648\0\u3690\0\u36d8\0\u0168"+
    "\0\u3720\0\u3768\0\u37b0\0\u0168\0\u37f8\0\u0168\0\u0168\0\u3840"+
    "\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u3450\0\u39f0\0\u3a38"+
    "\0\u3a80\0\u2cb8\0\u3ac8\0\u0168\0\u3b10\0\u3b58\0\u3ba0\0\u3be8"+
    "\0\u0168\0\u0168\0\u3c30\0\u3c78\0\u3cc0\0\u0168\0\u3d08\0\u0168"+
    "\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u0168\0\u3f00"+
    "\0\u3f48\0\u0168\0\u0168\0\u0168\0\u3f90\0\u3fd8\0\u4020\0\u4068"+
    "\0\u0168\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u0168\0\u0168\0\u0168"+
    "\0\u41d0\0\u3a38\0\u0168\0\u4218\0\u4260\0\u0168\0\u0168\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\11\1\13\1\14\1\15\1\16\3\4\1\17\1\4"+
    "\1\20\1\21\1\22\1\23\1\24\1\11\1\25\1\26"+
    "\1\27\1\30\2\11\1\31\1\32\1\11\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\4\11\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\11\1\57\1\60\3\11\1\61"+
    "\1\62\1\63\1\64\1\65\3\0\15\66\3\0\66\66"+
    "\2\0\15\67\3\0\66\67\115\0\1\7\1\70\106\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\30\11"+
    "\15\0\2\11\1\0\4\11\17\0\1\11\77\0\14\72"+
    "\1\0\73\72\16\0\1\73\114\0\1\74\100\0\1\75"+
    "\7\0\1\76\67\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\11\1\77\3\11\1\100\22\11\15\0"+
    "\1\11\1\101\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\102\7\11\1\103\4\11"+
    "\1\104\12\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\3\11\1\105"+
    "\24\11\15\0\1\106\1\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\6\11\1\107"+
    "\2\11\1\110\11\11\1\111\4\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\2\11\1\112\6\11\1\113\16\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\10\11\1\114\3\11\1\115\1\11\1\116"+
    "\11\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\2\11\1\117\5\11"+
    "\1\120\17\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\10\11\1\121"+
    "\5\11\1\122\11\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\3\11"+
    "\1\123\4\11\1\124\3\11\1\125\1\126\12\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\12\11\1\127\15\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\2\11\1\130\25\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\6\11\1\131\21\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\16\11\1\132\11\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\10\11"+
    "\1\133\1\134\4\11\1\135\11\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\10\11\1\136\17\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\14\11\1\137\1\11\1\140\11\11\15\0\2\11\1\0"+
    "\4\11\65\0\1\141\111\0\1\142\107\0\1\143\107\0"+
    "\1\144\107\0\1\145\112\0\1\146\110\0\1\147\27\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\22\11"+
    "\1\150\5\11\15\0\2\11\1\0\4\11\13\0\1\151"+
    "\103\0\13\72\1\152\74\72\17\0\1\153\70\0\14\154"+
    "\1\155\7\154\1\156\63\154\2\76\1\157\1\160\104\76"+
    "\4\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\4\11\1\161\1\11\1\162\21\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\21\11\1\163\6\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\5\11\1\164\22\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\16\11"+
    "\1\165\11\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\3\11\1\166"+
    "\24\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\4\11\1\167\23\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\6\11\1\170\21\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\15\11\1\171\1\172\11\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\21\11\1\173\6\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\174\27\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\23\11\1\175\4\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\3\11"+
    "\1\176\24\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\17\11\1\177"+
    "\4\11\1\200\1\201\1\202\1\11\15\0\2\11\1\0"+
    "\1\11\1\203\1\204\1\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\205\27\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\11\11\1\206\16\11\15\0\2\11\1\0"+
    "\3\11\1\207\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\11\1\210\26\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\11\11\1\211\16\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\10\11\1\212\17\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\2\11"+
    "\1\213\25\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\15\11\1\214"+
    "\12\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\5\11\1\215\22\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\15\11\1\216\12\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\4\11\1\217\1\11\1\220\21\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\4\11\1\221\23\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\6\11\1\222\6\11\1\223\12\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\16\11\1\224\11\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\15\11\1\225\12\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\23\11\1\226\4\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\12\11\1\227\15\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\1\230\7\11\1\231\17\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\1\232\27\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\1\233\27\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\234\27\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\2\11\1\235\25\11\15\0\2\11\1\0"+
    "\4\11\7\0\14\236\1\0\73\236\14\154\1\237\73\154"+
    "\14\240\1\237\7\240\1\241\63\240\14\154\1\242\73\154"+
    "\3\0\1\160\110\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\6\11\1\243\21\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\10\11\1\244\17\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\15\11\1\245\12\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\4\11"+
    "\1\246\23\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\2\11\1\247"+
    "\25\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\2\11\1\250\25\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\6\11\1\251\21\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\2\11\1\252\25\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\6\11\1\253\21\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\3\11\1\254\24\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\6\11\1\255\21\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\10\11"+
    "\1\256\17\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\14\11\1\257"+
    "\13\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\21\11\1\260\6\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\10\11\1\261\17\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\5\11\1\262\22\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\4\11\1\263\23\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\2\11\1\264\25\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\15\11\1\265\12\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\12\11"+
    "\1\266\15\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\3\11\1\267"+
    "\24\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\15\11\1\270\12\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\4\11\1\271\23\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\6\11\1\272\21\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\16\11\1\273\11\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\2\11\1\274\25\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\13\11\1\275\14\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\6\11"+
    "\1\276\21\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\11\11\1\277"+
    "\16\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\7\11\1\300\20\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\301\27\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\21\11\1\302\6\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\3\11\1\303\24\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\5\11\1\304\14\11\1\305\5\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\6\11\1\306\21\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\7\11\1\307\20\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\3\11"+
    "\1\310\24\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\6\11\1\311"+
    "\21\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\16\11\1\312\11\11"+
    "\15\0\2\11\1\0\4\11\7\0\15\236\1\313\72\236"+
    "\14\154\1\237\7\154\1\160\63\154\14\240\1\314\73\240"+
    "\14\154\1\315\107\154\1\237\7\154\1\316\63\154\4\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\15\11"+
    "\1\317\12\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\16\11\1\320"+
    "\11\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\3\11\1\321\24\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\2\11\1\322\25\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\5\11\1\323\22\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\324\27\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\16\11\1\325\11\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\13\11"+
    "\1\326\14\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\16\11\1\327"+
    "\11\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\23\11\1\330\4\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\15\11\1\331\12\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\21\11\1\332\6\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\11\11\1\333\16\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\6\11\1\334\21\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\11\11\1\335\16\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\3\11"+
    "\1\336\24\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\2\11\1\337"+
    "\25\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\27\11\1\340\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\4\11\1\341\23\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\342\27\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\14\11\1\343\13\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\16\11"+
    "\1\344\11\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\16\11\1\345"+
    "\11\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\346\13\0\30\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\5\11\1\347\22\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\14\11\1\350\13\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\1\351\27\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\6\11\1\352"+
    "\21\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\15\11\1\353\12\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\2\11\1\354\25\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\2\11\1\355\25\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\2\11\1\356\25\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\16\11\1\357\11\11\15\0\2\11\1\0\4\11"+
    "\7\0\15\236\1\313\1\360\71\236\14\240\1\361\7\240"+
    "\1\362\63\240\14\154\1\363\7\154\1\160\63\154\14\0"+
    "\1\364\77\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\5\11\1\365\22\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\6\11\1\366\21\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\7\11"+
    "\1\367\20\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\13\11\1\370"+
    "\14\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\14\11\1\371\13\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\372\27\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\2\11\1\373\25\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\16\11\1\374\11\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\2\11\1\375\25\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\12\11"+
    "\1\376\15\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\3\11\1\377"+
    "\24\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\2\11\1\u0100\25\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\15\11\1\u0101\12\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\5\11\1\u0102\22\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\15\11\1\u0103\12\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\5\11\1\u0104\22\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\1\11\1\u0105\26\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\20\11"+
    "\1\u0106\7\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\13\11\1\u0107"+
    "\14\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\3\11\1\u0108\11\11"+
    "\1\u0109\12\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\6\11\1\u010a"+
    "\21\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\13\11\1\u010b\14\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\u010c\13\0\30\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\1\u010d\27\11\15\0\2\11\1\0\4\11\7\0"+
    "\15\236\1\313\2\236\1\152\67\236\14\240\1\361\7\240"+
    "\1\160\63\240\14\u010e\1\u010f\73\u010e\14\240\1\237\7\240"+
    "\1\u0110\63\240\14\0\1\u0111\7\0\1\u0112\67\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\13\11\1\u0113"+
    "\14\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\4\11\1\u0114\23\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\5\11\1\u0115\22\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\16\11\1\u0116\11\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\16\11\1\u0117\11\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\3\11\1\u0118\24\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\6\11\1\u0119\21\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\5\11"+
    "\1\u011a\22\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\11\11\1\u011b"+
    "\16\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\13\11\1\u011c\14\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\1\u011d\27\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\5\11\1\u011e\22\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\12\11\1\u011f\15\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\2\11\1\u0120\25\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\6\11"+
    "\1\u0121\21\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\1\11\1\u0122"+
    "\26\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\7\11\1\u0123\20\11"+
    "\15\0\2\11\1\0\4\11\7\0\14\u010e\1\u0124\73\u010e"+
    "\14\0\1\u0125\73\0\14\154\1\u0111\7\154\1\0\63\154"+
    "\4\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\2\11\1\u0126\25\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\20\11"+
    "\1\u0127\7\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\25\11\1\u0128"+
    "\2\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\25\11\1\u0129\2\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\2\11\1\u012a\25\11\15\0"+
    "\2\11\1\0\4\11\13\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\2\11\1\u012b\25\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\6\11\1\u012c\21\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\3\11\1\u012d\24\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\3\11\1\u012e\24\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\2\11"+
    "\1\u012f\25\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\1\u0130\27\11"+
    "\15\0\2\11\1\0\4\11\13\0\1\11\1\0\1\11"+
    "\1\71\1\0\1\11\13\0\2\11\1\u0131\25\11\15\0"+
    "\2\11\1\0\4\11\7\0\14\u010e\1\u0124\7\u010e\1\160"+
    "\63\u010e\14\0\1\u0132\77\0\1\11\1\0\1\11\1\71"+
    "\1\0\1\11\13\0\10\11\1\u0133\17\11\15\0\2\11"+
    "\1\0\4\11\13\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\15\11\1\u0134\12\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\15\11\1\u0135\12\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\2\11\1\u0136\25\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\2\11"+
    "\1\u0137\25\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\7\11\1\u0138"+
    "\20\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\3\11\1\u0139\24\11"+
    "\15\0\2\11\1\0\4\11\7\0\14\240\1\0\7\240"+
    "\1\u013a\63\240\4\0\1\11\1\0\1\11\1\71\1\0"+
    "\1\11\13\0\1\11\1\u013b\26\11\15\0\2\11\1\0"+
    "\4\11\13\0\1\11\1\0\1\11\1\71\1\0\1\11"+
    "\13\0\4\11\1\u013c\23\11\15\0\2\11\1\0\4\11"+
    "\13\0\1\11\1\0\1\11\1\71\1\0\1\11\13\0"+
    "\4\11\1\u013d\23\11\15\0\2\11\1\0\4\11\13\0"+
    "\1\11\1\0\1\11\1\71\1\0\1\11\13\0\2\11"+
    "\1\u013e\25\11\15\0\2\11\1\0\4\11\13\0\1\11"+
    "\1\0\1\11\1\71\1\0\1\11\13\0\2\11\1\u013f"+
    "\25\11\15\0\2\11\1\0\4\11\13\0\1\11\1\0"+
    "\1\11\1\71\1\0\1\11\13\0\2\11\1\u0140\25\11"+
    "\15\0\2\11\1\0\4\11\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\22\1\1\11\7\1\6\11\1\1\7\11"+
    "\4\0\1\11\1\0\43\1\7\11\2\1\1\11\4\0"+
    "\1\1\1\11\55\1\3\0\1\1\1\0\50\1\3\0"+
    "\42\1\2\0\1\1\2\0\31\1\2\0\1\1\2\0"+
    "\21\1\2\0\14\1\1\0\7\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<ErrorC> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).
    public String cadena ="";
    public int linea=0,columna = 0;
    public void adderror(int linea, int columna, String valor)
    {        
        listaErrores.add(new ErrorC(ErrorC.TipoError.LEXICO,valor, linea, columna));
    }

    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 
    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerReporte(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
            adderror(yyline, yychar, yytext());
            }
          case 92: break;
          case 2: 
            { //Imprimir("Salto de linea");
            }
          case 93: break;
          case 3: 
            { yychar=0;
            }
          case 94: break;
          case 4: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	  
            if(Long.parseLong(yytext())> Utilidades.Singlenton.maxInt && Long.parseLong(yytext()) < Utilidades.Singlenton.minInt )
            {
                Utilidades.Singlenton.registrarError("Entero", "Número entero demasiado grande", ErrorC.TipoError.SEMANTICO,yyline, yychar);
                return new Symbol(sym.entero, yychar, yyline,0);             
            }   
            return new Symbol(sym.entero, yychar, yyline,Integer.parseInt(yytext()));
            }
          case 95: break;
          case 5: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.punto, yychar, yyline, yytext());
            }
          case 96: break;
          case 6: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.id, yychar, yyline, yytext().toLowerCase());
            }
          case 97: break;
          case 7: 
            { cadena = "";                    
            yybegin(cad1);
            linea = yyline;
            columna = yychar;
            }
          case 98: break;
          case 8: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.multi, yychar, yyline, yytext());
            }
          case 99: break;
          case 9: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.dospuntos, yychar, yyline, yytext());
            }
          case 100: break;
          case 10: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menos, yychar, yyline, yytext());
            }
          case 101: break;
          case 11: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.div, yychar, yyline, yytext());
            }
          case 102: break;
          case 12: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.coma, yychar, yyline, yytext());
            }
          case 103: break;
          case 13: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.suma, yychar, yyline, yytext());
            }
          case 104: break;
          case 14: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.not, yychar, yyline, yytext());
            }
          case 105: break;
          case 15: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.igual, yychar, yyline, yytext());
            }
          case 106: break;
          case 16: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.mayor, yychar, yyline, yytext());
            }
          case 107: break;
          case 17: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menor, yychar, yyline, yytext());
            }
          case 108: break;
          case 18: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.puntocoma, yychar, yyline, yytext());
            }
          case 109: break;
          case 19: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.pari, yychar, yyline, yytext());
            }
          case 110: break;
          case 20: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.pard, yychar, yyline, yytext());
            }
          case 111: break;
          case 21: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.interrogante, yychar, yyline, yytext());
            }
          case 112: break;
          case 22: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llavei, yychar, yyline, yytext());
            }
          case 113: break;
          case 23: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.arroba, yychar, yyline, yytext());
            }
          case 114: break;
          case 24: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llaved, yychar, yyline, yytext());
            }
          case 115: break;
          case 25: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.corchetei, yychar, yyline, yytext());
            }
          case 116: break;
          case 26: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.corcheted, yychar, yyline, yytext());
            }
          case 117: break;
          case 27: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.modulo, yychar, yyline, yytext());
            }
          case 118: break;
          case 28: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.xor, yychar, yyline, yytext());
            }
          case 119: break;
          case 29: 
            { switch(yytext())
        {
            case "\\":          
                yybegin(cad2);
            break;
            case "\"":      
                yybegin(YYINITIAL);
                return new Symbol(sym.cadena, columna, linea ,cadena);             
            default:
                cadena += yytext();
            break;                
        }
            }
          case 120: break;
          case 30: 
            { switch(yytext())
        {
            case "\'":
                cadena += "\'";
            break;            
            case "\"":
                cadena += "\"";
            break;  
            case "?":
                cadena += "?";
            break;
            case "\\":
                cadena += "\\";
            break;  
            case "0":                
            break;  
            case "a":                
            break;   
            case "b":                
                cadena = cadena.substring(0, cadena.length()-1);
            break; 
            case "v":   
                String partes[] = cadena.split("\n");
                String subcadena = "";
                for(int i = 0 ; i < partes.length-1; i++)
                {
                    subcadena += partes[i];
                }         
                String tabulaciones[] = partes[partes.length].split("\t");
                for(int i = 0; i< tabulaciones.length; i++)
                {
                    subcadena += "\t";
                }
                cadena = subcadena;                                                       
            break;             
            case "n":                
                cadena = cadena + "\n";
            break; 
            case "t":                
                cadena = cadena + "\t";
            break;             
            case "r":       
                partes = cadena.split("\n");
                subcadena = "";
                for(int i = 0 ; i < partes.length-1; i++)
                {
                    subcadena += partes[i];
                }                                       
                cadena = subcadena;
            break;                                                                                                       
            default:
                Utilidades.Singlenton.registrarError("\\"+yytext(), "Carácter ilegal. Ha sido eliminado.", ErrorC.TipoError.SEMANTICO,yyline, yychar);
            break;                
        }
        yybegin(cad1);
            }
          case 121: break;
          case 31: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.decremento, yychar, yyline, yytext());
            }
          case 122: break;
          case 32: 
            { //Imprimir(yytext());
            }
          case 123: break;
          case 33: 
            { addLexema("reservada", yytext(), yyline, yychar);
        return  new Symbol(sym.si, yychar, yyline, yytext());
            }
          case 124: break;
          case 34: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.hacer, yychar, yyline, yytext());
            }
          case 125: break;
          case 35: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.aumento, yychar, yyline, yytext());
            }
          case 126: break;
          case 36: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.desigual, yychar, yyline, yytext());
            }
          case 127: break;
          case 37: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.igualigual, yychar, yyline, yytext());
            }
          case 128: break;
          case 38: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.mayorigual, yychar, yyline, yytext());
            }
          case 129: break;
          case 39: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menorigual, yychar, yyline, yytext());
            }
          case 130: break;
          case 40: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.or, yychar, yyline, yytext());
            }
          case 131: break;
          case 41: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.and, yychar, yyline, yytext());
            }
          case 132: break;
          case 42: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.decimal, yychar, yyline,Double.parseDouble(yytext()));
            }
          case 133: break;
          case 43: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.caracter, yychar, yyline,yytext().substring(1, yytext().length()-1).charAt(0));
            }
          case 134: break;
          case 44: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tint, yychar, yyline, yytext());
            }
          case 135: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.para, yychar, yyline, yytext());
            }
          case 136: break;
          case 46: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.str_, yychar, yyline, yytext());
            }
          case 137: break;
          case 47: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.nuevo, yychar, yyline, yytext());
            }
          case 138: break;
          case 48: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.try_, yychar, yyline, yytext());
            }
          case 139: break;
          case 49: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.potencia, yychar, yyline, yytext());
            }
          case 140: break;
          case 50: 
            { addLexema("reservada", yytext(), yyline, yychar);
        return  new Symbol(sym.sino, yychar, yyline, yytext());
            }
          case 141: break;
          case 51: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.nulo, yychar, yyline, yytext());
            }
          case 142: break;
          case 52: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.este, yychar, yyline, yytext());
            }
          case 143: break;
          case 53: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.booleano, yychar, yyline, true);
            }
          case 144: break;
          case 54: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tchar, yychar, yyline, yytext());
            }
          case 145: break;
          case 55: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.caso, yychar, yyline, yytext());
            }
          case 146: break;
          case 56: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tvoid, yychar, yyline, yytext());
            }
          case 147: break;
          case 57: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.final_, yychar, yyline, yytext());
            }
          case 148: break;
          case 58: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.booleano, yychar, yyline, false);
            }
          case 149: break;
          case 59: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.super_, yychar, yyline, yytext());
            }
          case 150: break;
          case 60: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.toint, yychar, yyline, yytext());
            }
          case 151: break;
          case 61: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.romper, yychar, yyline, yytext());
            }
          case 152: break;
          case 62: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.clase, yychar, yyline, yytext());
            }
          case 153: break;
          case 63: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.cat, yychar, yyline, yytext());
            }
          case 154: break;
          case 64: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.graph, yychar, yyline, yytext());
            }
          case 155: break;
          case 65: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.print, yychar, yyline, yytext());
            }
          case 156: break;
          case 66: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.mientras, yychar, yyline, yytext());
            }
          case 157: break;
          case 67: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.importar, yychar, yyline, yytext());
            }
          case 158: break;
          case 68: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.estatico, yychar, yyline, yytext());
            }
          case 159: break;
          case 69: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.switch_, yychar, yyline, yytext());
            }
          case 160: break;
          case 70: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.tochar, yychar, yyline, yytext());
            }
          case 161: break;
          case 71: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tdouble, yychar, yyline, yytext());
            }
          case 162: break;
          case 72: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.retorno, yychar, yyline, yytext());
            }
          case 163: break;
          case 73: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tstring, yychar, yyline, yytext());
            }
          case 164: break;
          case 74: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.publico, yychar, yyline, yytext());
            }
          case 165: break;
          case 75: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.extiende, yychar, yyline, yytext());
            }
          case 166: break;
          case 76: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.defecto, yychar, yyline, yytext());
            }
          case 167: break;
          case 77: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tbool, yychar, yyline, yytext());
            }
          case 168: break;
          case 78: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.println, yychar, yyline, yytext());
            }
          case 169: break;
          case 79: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.privado, yychar, yyline, yytext());
            }
          case 170: break;
          case 80: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tostring, yychar, yyline, yytext());
            }
          case 171: break;
          case 81: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.todouble, yychar, yyline, yytext());
            }
          case 172: break;
          case 82: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.continuar, yychar, yyline, yytext());
            }
          case 173: break;
          case 83: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.abstracto, yychar, yyline, yytext());
            }
          case 174: break;
          case 84: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.sobrescrito, yychar, yyline, yytext());
            }
          case 175: break;
          case 85: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.leerarchivo, yychar, yyline, yytext());
            }
          case 176: break;
          case 86: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.printable, yychar, yyline, yytext());
            }
          case 177: break;
          case 87: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.protegido, yychar, yyline, yytext());
            }
          case 178: break;
          case 88: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.instanceof_, yychar, yyline, yytext());
            }
          case 179: break;
          case 89: 
            { addLexema("simbolo", yytext(), yyline, yychar);
            return new Symbol(sym.escribir, yychar, yyline, yytext());
            }
          case 180: break;
          case 90: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tolower, yychar, yyline, yytext());
            }
          case 181: break;
          case 91: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.touper, yychar, yyline, yytext());
            }
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
